/** \file
 *  This OBJC source file was generated by $ANTLR version 3.3.1-SNAPSHOT Feb 24, 2011 11:25:29
 *
 *     -  From the grammar source file : /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g
 *     -                            On : 2011-02-24 11:32:12
 *     -           for the tree parser : CodeGeneratorTreeParser *
 * Editing it, at least manually, is not wise. 
 *
 * ObjC language generator and runtime by Alan Condit, acondit|hereisanat|ipns|dotgoeshere|com.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2010 Alan Condit
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// $ANTLR 3.3.1-SNAPSHOT Feb 24, 2011 11:25:29 /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g 2011-02-24 11:32:12


/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#import "CodeGenerator.h"
/* ----------------------------------------- */


/* ============================================================================= */
/* =============================================================================
 * Start of recognizer
 */

#pragma mark Bitsets
static ANTLRBitSet *FOLLOW_template_in_templateAndEOF74;
static const unsigned long long FOLLOW_template_in_templateAndEOF74_data[] = { 0x0000000000000000LL};
static ANTLRBitSet *FOLLOW_EOF_in_templateAndEOF77;
static const unsigned long long FOLLOW_EOF_in_templateAndEOF77_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_chunk_in_template101;
static const unsigned long long FOLLOW_chunk_in_template101_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_element_in_chunk116;
static const unsigned long long FOLLOW_element_in_chunk116_data[] = { 0x0010000980400012LL};
static ANTLRBitSet *FOLLOW_INDENT_in_element130;
static const unsigned long long FOLLOW_INDENT_in_element130_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_element_in_element134;
static const unsigned long long FOLLOW_element_in_element134_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_ifstat_in_element142;
static const unsigned long long FOLLOW_ifstat_in_element142_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_exprElement_in_element147;
static const unsigned long long FOLLOW_exprElement_in_element147_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_TEXT_in_element152;
static const unsigned long long FOLLOW_TEXT_in_element152_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_region_in_element161;
static const unsigned long long FOLLOW_region_in_element161_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_NEWLINE_in_element170;
static const unsigned long long FOLLOW_NEWLINE_in_element170_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_EXPR_in_exprElement190;
static const unsigned long long FOLLOW_EXPR_in_exprElement190_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_expr_in_exprElement192;
static const unsigned long long FOLLOW_expr_in_exprElement192_data[] = { 0x0000001000000008LL};
static ANTLRBitSet *FOLLOW_exprOptions_in_exprElement195;
static const unsigned long long FOLLOW_exprOptions_in_exprElement195_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_REGION_in_region222;
static const unsigned long long FOLLOW_REGION_in_region222_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_region224;
static const unsigned long long FOLLOW_ID_in_region224_data[] = { 0x0010000980400010LL};
static ANTLRBitSet *FOLLOW_template_in_region234;
static const unsigned long long FOLLOW_template_in_region234_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_SUBTEMPLATE_in_subtemplate267;
static const unsigned long long FOLLOW_SUBTEMPLATE_in_subtemplate267_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ARGS_in_subtemplate274;
static const unsigned long long FOLLOW_ARGS_in_subtemplate274_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_subtemplate277;
static const unsigned long long FOLLOW_ID_in_subtemplate277_data[] = { 0x0000000002000008LL};
static ANTLRBitSet *FOLLOW_template_in_subtemplate294;
static const unsigned long long FOLLOW_template_in_subtemplate294_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_IF_in_ifstat325;
static const unsigned long long FOLLOW_IF_in_ifstat325_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_conditional_in_ifstat327;
static const unsigned long long FOLLOW_conditional_in_ifstat327_data[] = { 0x0010000980400010LL};
static ANTLRBitSet *FOLLOW_chunk_in_ifstat337;
static const unsigned long long FOLLOW_chunk_in_ifstat337_data[] = { 0x0000000000000068LL};
static ANTLRBitSet *FOLLOW_ELSEIF_in_ifstat347;
static const unsigned long long FOLLOW_ELSEIF_in_ifstat347_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_conditional_in_ifstat361;
static const unsigned long long FOLLOW_conditional_in_ifstat361_data[] = { 0x0010000980400010LL};
static ANTLRBitSet *FOLLOW_chunk_in_ifstat373;
static const unsigned long long FOLLOW_chunk_in_ifstat373_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_ELSE_in_ifstat396;
static const unsigned long long FOLLOW_ELSE_in_ifstat396_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_chunk_in_ifstat410;
static const unsigned long long FOLLOW_chunk_in_ifstat410_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_OR_in_conditional444;
static const unsigned long long FOLLOW_OR_in_conditional444_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_conditional_in_conditional446;
static const unsigned long long FOLLOW_conditional_in_conditional446_data[] = { 0x0003FFE066000400LL};
static ANTLRBitSet *FOLLOW_conditional_in_conditional448;
static const unsigned long long FOLLOW_conditional_in_conditional448_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_AND_in_conditional458;
static const unsigned long long FOLLOW_AND_in_conditional458_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_conditional_in_conditional460;
static const unsigned long long FOLLOW_conditional_in_conditional460_data[] = { 0x0003FFE066000400LL};
static ANTLRBitSet *FOLLOW_conditional_in_conditional462;
static const unsigned long long FOLLOW_conditional_in_conditional462_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_BANG_in_conditional472;
static const unsigned long long FOLLOW_BANG_in_conditional472_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_conditional_in_conditional474;
static const unsigned long long FOLLOW_conditional_in_conditional474_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_expr_in_conditional486;
static const unsigned long long FOLLOW_expr_in_conditional486_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_OPTIONS_in_exprOptions500;
static const unsigned long long FOLLOW_OPTIONS_in_exprOptions500_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_option_in_exprOptions502;
static const unsigned long long FOLLOW_option_in_exprOptions502_data[] = { 0x0000000000001008LL};
static ANTLRBitSet *FOLLOW_EQUALS_in_option514;
static const unsigned long long FOLLOW_EQUALS_in_option514_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_option516;
static const unsigned long long FOLLOW_ID_in_option516_data[] = { 0x0003FFE066000400LL};
static ANTLRBitSet *FOLLOW_expr_in_option518;
static const unsigned long long FOLLOW_expr_in_option518_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_ZIP_in_expr537;
static const unsigned long long FOLLOW_ZIP_in_expr537_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ELEMENTS_in_expr540;
static const unsigned long long FOLLOW_ELEMENTS_in_expr540_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_expr_in_expr543;
static const unsigned long long FOLLOW_expr_in_expr543_data[] = { 0x0003FFE066000408LL};
static ANTLRBitSet *FOLLOW_mapTemplateRef_in_expr550;
static const unsigned long long FOLLOW_mapTemplateRef_in_expr550_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_MAP_in_expr562;
static const unsigned long long FOLLOW_MAP_in_expr562_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_expr_in_expr564;
static const unsigned long long FOLLOW_expr_in_expr564_data[] = { 0x0002018000000000LL};
static ANTLRBitSet *FOLLOW_mapTemplateRef_in_expr567;
static const unsigned long long FOLLOW_mapTemplateRef_in_expr567_data[] = { 0x0002018000000008LL};
static ANTLRBitSet *FOLLOW_prop_in_expr582;
static const unsigned long long FOLLOW_prop_in_expr582_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_includeExpr_in_expr587;
static const unsigned long long FOLLOW_includeExpr_in_expr587_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_PROP_in_prop597;
static const unsigned long long FOLLOW_PROP_in_prop597_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_expr_in_prop599;
static const unsigned long long FOLLOW_expr_in_prop599_data[] = { 0x0000000002000000LL};
static ANTLRBitSet *FOLLOW_ID_in_prop601;
static const unsigned long long FOLLOW_ID_in_prop601_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_PROP_IND_in_prop615;
static const unsigned long long FOLLOW_PROP_IND_in_prop615_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_expr_in_prop617;
static const unsigned long long FOLLOW_expr_in_prop617_data[] = { 0x0003FFE066000400LL};
static ANTLRBitSet *FOLLOW_expr_in_prop619;
static const unsigned long long FOLLOW_expr_in_prop619_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_INCLUDE_in_mapTemplateRef640;
static const unsigned long long FOLLOW_INCLUDE_in_mapTemplateRef640_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_mapTemplateRef642;
static const unsigned long long FOLLOW_ID_in_mapTemplateRef642_data[] = { 0x0003FFE066001408LL};
static ANTLRBitSet *FOLLOW_args_in_mapTemplateRef652;
static const unsigned long long FOLLOW_args_in_mapTemplateRef652_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_subtemplate_in_mapTemplateRef666;
static const unsigned long long FOLLOW_subtemplate_in_mapTemplateRef666_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_INCLUDE_IND_in_mapTemplateRef678;
static const unsigned long long FOLLOW_INCLUDE_IND_in_mapTemplateRef678_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_expr_in_mapTemplateRef680;
static const unsigned long long FOLLOW_expr_in_mapTemplateRef680_data[] = { 0x0003FFE066001408LL};
static ANTLRBitSet *FOLLOW_args_in_mapTemplateRef690;
static const unsigned long long FOLLOW_args_in_mapTemplateRef690_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_EXEC_FUNC_in_includeExpr712;
static const unsigned long long FOLLOW_EXEC_FUNC_in_includeExpr712_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_includeExpr714;
static const unsigned long long FOLLOW_ID_in_includeExpr714_data[] = { 0x0003FFE066000408LL};
static ANTLRBitSet *FOLLOW_expr_in_includeExpr716;
static const unsigned long long FOLLOW_expr_in_includeExpr716_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_INCLUDE_in_includeExpr727;
static const unsigned long long FOLLOW_INCLUDE_in_includeExpr727_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_includeExpr729;
static const unsigned long long FOLLOW_ID_in_includeExpr729_data[] = { 0x0003FFE066001408LL};
static ANTLRBitSet *FOLLOW_args_in_includeExpr731;
static const unsigned long long FOLLOW_args_in_includeExpr731_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_INCLUDE_SUPER_in_includeExpr742;
static const unsigned long long FOLLOW_INCLUDE_SUPER_in_includeExpr742_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_includeExpr744;
static const unsigned long long FOLLOW_ID_in_includeExpr744_data[] = { 0x0003FFE066001408LL};
static ANTLRBitSet *FOLLOW_args_in_includeExpr746;
static const unsigned long long FOLLOW_args_in_includeExpr746_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_INCLUDE_REGION_in_includeExpr757;
static const unsigned long long FOLLOW_INCLUDE_REGION_in_includeExpr757_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_includeExpr759;
static const unsigned long long FOLLOW_ID_in_includeExpr759_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_INCLUDE_SUPER_REGION_in_includeExpr769;
static const unsigned long long FOLLOW_INCLUDE_SUPER_REGION_in_includeExpr769_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_includeExpr771;
static const unsigned long long FOLLOW_ID_in_includeExpr771_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_primary_in_includeExpr779;
static const unsigned long long FOLLOW_primary_in_includeExpr779_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ID_in_primary790;
static const unsigned long long FOLLOW_ID_in_primary790_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_STRING_in_primary800;
static const unsigned long long FOLLOW_STRING_in_primary800_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_subtemplate_in_primary810;
static const unsigned long long FOLLOW_subtemplate_in_primary810_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_list_in_primary837;
static const unsigned long long FOLLOW_list_in_primary837_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_INCLUDE_IND_in_primary844;
static const unsigned long long FOLLOW_INCLUDE_IND_in_primary844_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_expr_in_primary850;
static const unsigned long long FOLLOW_expr_in_primary850_data[] = { 0x0003FFE066001408LL};
static ANTLRBitSet *FOLLOW_args_in_primary859;
static const unsigned long long FOLLOW_args_in_primary859_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_TO_STR_in_primary873;
static const unsigned long long FOLLOW_TO_STR_in_primary873_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_expr_in_primary875;
static const unsigned long long FOLLOW_expr_in_primary875_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_expr_in_arg888;
static const unsigned long long FOLLOW_expr_in_arg888_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_arg_in_args904;
static const unsigned long long FOLLOW_arg_in_args904_data[] = { 0x0003FFE066000402LL};
static ANTLRBitSet *FOLLOW_EQUALS_in_args923;
static const unsigned long long FOLLOW_EQUALS_in_args923_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_args925;
static const unsigned long long FOLLOW_ID_in_args925_data[] = { 0x0003FFE066000400LL};
static ANTLRBitSet *FOLLOW_expr_in_args927;
static const unsigned long long FOLLOW_expr_in_args927_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_LIST_in_list956;
static const unsigned long long FOLLOW_LIST_in_list956_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_listElement_in_list959;
static const unsigned long long FOLLOW_listElement_in_list959_data[] = { 0x0023FFE066000408LL};
static ANTLRBitSet *FOLLOW_expr_in_listElement976;
static const unsigned long long FOLLOW_expr_in_listElement976_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_A_NULL_in_listElement980;
static const unsigned long long FOLLOW_A_NULL_in_listElement980_data[] = { 0x0000000000000002LL};


#pragma mark Dynamic Global Scopes

#pragma mark Dynamic Rule Scopes
/* start of ruleAttributeScopeImplementation */

@implementation template_Scope
@synthesize state;


+ (template_Scope *)newtemplate_Scope
{
    return [[[template_Scope alloc] init] retain];
}

- (id) init
{
    if (self = [super init]) {
    }
    return self;
}

/* start of template_Scope get and set functions */

- (CompilationState *)getstate { return( state ); }

- (void)setstate:(CompilationState *)aVal { state = aVal; }


/* End of template_Scope get and set functions */

@end /* end of ruleAttributeScopeImplementation */



#pragma mark Rule Return Scopes start
@implementation CodeGenerator_region_return /* returnScope */
 /* start of synthesize -- OBJC-Line 1837 */
@synthesize name;
+ (CodeGenerator_region_return *)newCodeGenerator_region_return
{
    return [[[CodeGenerator_region_return alloc] init] retain];
}

- (id) init
{
    if (self = [super init]) {
    }
    return self;
}

/* start of iterate get and set functions */

- (NSString *)getname { return( name ); }

- (void)setname:(NSString *)aVal { name = aVal; }


/* End of iterate get and set functions */



@end /* end of returnScope implementation */
@implementation CodeGenerator_subtemplate_return /* returnScope */
 /* start of synthesize -- OBJC-Line 1837 */
@synthesize name;

@synthesize nargs;
+ (CodeGenerator_subtemplate_return *)newCodeGenerator_subtemplate_return
{
    return [[[CodeGenerator_subtemplate_return alloc] init] retain];
}

- (id) init
{
    if (self = [super init]) {
    }
    return self;
}

/* start of iterate get and set functions */

- (NSString *)getname { return( name ); }

- (void)setname:(NSString *)aVal { name = aVal; }


- (NSInteger)getnargs { return( nargs ); }

- (void)setnargs:(NSInteger)aVal { nargs = aVal; }


/* End of iterate get and set functions */



@end /* end of returnScope implementation */
@implementation CodeGenerator_conditional_return /* returnScope */
 /* start of synthesize -- OBJC-Line 1837 */
+ (CodeGenerator_conditional_return *)newCodeGenerator_conditional_return
{
    return [[[CodeGenerator_conditional_return alloc] init] retain];
}

- (id) init
{
    if (self = [super init]) {
    }
    return self;
}




@end /* end of returnScope implementation */
@implementation CodeGenerator_primary_return /* returnScope */
 /* start of synthesize -- OBJC-Line 1837 */
+ (CodeGenerator_primary_return *)newCodeGenerator_primary_return
{
    return [[[CodeGenerator_primary_return alloc] init] retain];
}

- (id) init
{
    if (self = [super init]) {
    }
    return self;
}




@end /* end of returnScope implementation */
@implementation CodeGenerator_args_return /* returnScope */
 /* start of synthesize -- OBJC-Line 1837 */
@synthesize n;

@synthesize namedArgs;
+ (CodeGenerator_args_return *)newCodeGenerator_args_return
{
    return [[[CodeGenerator_args_return alloc] init] retain];
}

- (id) init
{
    if (self = [super init]) {
    }
    return self;
}

/* start of iterate get and set functions */

- (NSInteger)getn { return( n ); }

- (void)setn:(NSInteger)aVal { n = aVal; }


- (BOOL)getnamedArgs { return( namedArgs ); }

- (void)setnamedArgs:(BOOL)aVal { namedArgs = aVal; }


/* End of iterate get and set functions */



@end /* end of returnScope implementation */
@implementation CodeGenerator_listElement_return /* returnScope */
 /* start of synthesize -- OBJC-Line 1837 */
+ (CodeGenerator_listElement_return *)newCodeGenerator_listElement_return
{
    return [[[CodeGenerator_listElement_return alloc] init] retain];
}

- (id) init
{
    if (self = [super init]) {
    }
    return self;
}




@end /* end of returnScope implementation */

//#pragma mark Rule return scopes start
//

#pragma mark Rule return scopes start

@implementation CodeGenerator  // line 637

/* ObjC start of ruleAttributeScope */
#pragma mark Dynamic Rule Scopes
/* ruleAttributeScope */
static ANTLRSymbolStack *template_stack;

/* ObjC end of ruleAttributeScope */
#pragma mark global Attribute Scopes
/* ObjC start globalAttributeScope */
/* ObjC end globalAttributeScope */
/* ObjC start actions.(actionScope).synthesize */

	@synthesize outermostTemplateName; // name of overall template
	@synthesize outermostImpl;
	@synthesize templateToken;// overall template token
	@synthesize template; // overall template text
	@synthesize errMgr;

/* ObjC end actions.(actionScope).synthesize */
/* ObjC start synthesize() */
/* ObjC end synthesize() */

+ (void) initialize
{
    #pragma mark Bitsets
    FOLLOW_template_in_templateAndEOF74 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_template_in_templateAndEOF74_data Count:(NSUInteger)1] retain];
    FOLLOW_EOF_in_templateAndEOF77 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_EOF_in_templateAndEOF77_data Count:(NSUInteger)1] retain];
    FOLLOW_chunk_in_template101 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_chunk_in_template101_data Count:(NSUInteger)1] retain];
    FOLLOW_element_in_chunk116 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_element_in_chunk116_data Count:(NSUInteger)1] retain];
    FOLLOW_INDENT_in_element130 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_INDENT_in_element130_data Count:(NSUInteger)1] retain];
    FOLLOW_element_in_element134 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_element_in_element134_data Count:(NSUInteger)1] retain];
    FOLLOW_ifstat_in_element142 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ifstat_in_element142_data Count:(NSUInteger)1] retain];
    FOLLOW_exprElement_in_element147 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_exprElement_in_element147_data Count:(NSUInteger)1] retain];
    FOLLOW_TEXT_in_element152 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_TEXT_in_element152_data Count:(NSUInteger)1] retain];
    FOLLOW_region_in_element161 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_region_in_element161_data Count:(NSUInteger)1] retain];
    FOLLOW_NEWLINE_in_element170 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_NEWLINE_in_element170_data Count:(NSUInteger)1] retain];
    FOLLOW_EXPR_in_exprElement190 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_EXPR_in_exprElement190_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_exprElement192 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_exprElement192_data Count:(NSUInteger)1] retain];
    FOLLOW_exprOptions_in_exprElement195 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_exprOptions_in_exprElement195_data Count:(NSUInteger)1] retain];
    FOLLOW_REGION_in_region222 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_REGION_in_region222_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_region224 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_region224_data Count:(NSUInteger)1] retain];
    FOLLOW_template_in_region234 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_template_in_region234_data Count:(NSUInteger)1] retain];
    FOLLOW_SUBTEMPLATE_in_subtemplate267 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_SUBTEMPLATE_in_subtemplate267_data Count:(NSUInteger)1] retain];
    FOLLOW_ARGS_in_subtemplate274 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ARGS_in_subtemplate274_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_subtemplate277 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_subtemplate277_data Count:(NSUInteger)1] retain];
    FOLLOW_template_in_subtemplate294 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_template_in_subtemplate294_data Count:(NSUInteger)1] retain];
    FOLLOW_IF_in_ifstat325 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_IF_in_ifstat325_data Count:(NSUInteger)1] retain];
    FOLLOW_conditional_in_ifstat327 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_conditional_in_ifstat327_data Count:(NSUInteger)1] retain];
    FOLLOW_chunk_in_ifstat337 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_chunk_in_ifstat337_data Count:(NSUInteger)1] retain];
    FOLLOW_ELSEIF_in_ifstat347 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ELSEIF_in_ifstat347_data Count:(NSUInteger)1] retain];
    FOLLOW_conditional_in_ifstat361 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_conditional_in_ifstat361_data Count:(NSUInteger)1] retain];
    FOLLOW_chunk_in_ifstat373 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_chunk_in_ifstat373_data Count:(NSUInteger)1] retain];
    FOLLOW_ELSE_in_ifstat396 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ELSE_in_ifstat396_data Count:(NSUInteger)1] retain];
    FOLLOW_chunk_in_ifstat410 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_chunk_in_ifstat410_data Count:(NSUInteger)1] retain];
    FOLLOW_OR_in_conditional444 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_OR_in_conditional444_data Count:(NSUInteger)1] retain];
    FOLLOW_conditional_in_conditional446 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_conditional_in_conditional446_data Count:(NSUInteger)1] retain];
    FOLLOW_conditional_in_conditional448 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_conditional_in_conditional448_data Count:(NSUInteger)1] retain];
    FOLLOW_AND_in_conditional458 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_AND_in_conditional458_data Count:(NSUInteger)1] retain];
    FOLLOW_conditional_in_conditional460 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_conditional_in_conditional460_data Count:(NSUInteger)1] retain];
    FOLLOW_conditional_in_conditional462 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_conditional_in_conditional462_data Count:(NSUInteger)1] retain];
    FOLLOW_BANG_in_conditional472 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_BANG_in_conditional472_data Count:(NSUInteger)1] retain];
    FOLLOW_conditional_in_conditional474 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_conditional_in_conditional474_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_conditional486 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_conditional486_data Count:(NSUInteger)1] retain];
    FOLLOW_OPTIONS_in_exprOptions500 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_OPTIONS_in_exprOptions500_data Count:(NSUInteger)1] retain];
    FOLLOW_option_in_exprOptions502 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_option_in_exprOptions502_data Count:(NSUInteger)1] retain];
    FOLLOW_EQUALS_in_option514 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_EQUALS_in_option514_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_option516 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_option516_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_option518 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_option518_data Count:(NSUInteger)1] retain];
    FOLLOW_ZIP_in_expr537 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ZIP_in_expr537_data Count:(NSUInteger)1] retain];
    FOLLOW_ELEMENTS_in_expr540 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ELEMENTS_in_expr540_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_expr543 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr543_data Count:(NSUInteger)1] retain];
    FOLLOW_mapTemplateRef_in_expr550 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_mapTemplateRef_in_expr550_data Count:(NSUInteger)1] retain];
    FOLLOW_MAP_in_expr562 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_MAP_in_expr562_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_expr564 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr564_data Count:(NSUInteger)1] retain];
    FOLLOW_mapTemplateRef_in_expr567 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_mapTemplateRef_in_expr567_data Count:(NSUInteger)1] retain];
    FOLLOW_prop_in_expr582 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_prop_in_expr582_data Count:(NSUInteger)1] retain];
    FOLLOW_includeExpr_in_expr587 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_includeExpr_in_expr587_data Count:(NSUInteger)1] retain];
    FOLLOW_PROP_in_prop597 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_PROP_in_prop597_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_prop599 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_prop599_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_prop601 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_prop601_data Count:(NSUInteger)1] retain];
    FOLLOW_PROP_IND_in_prop615 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_PROP_IND_in_prop615_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_prop617 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_prop617_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_prop619 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_prop619_data Count:(NSUInteger)1] retain];
    FOLLOW_INCLUDE_in_mapTemplateRef640 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_INCLUDE_in_mapTemplateRef640_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_mapTemplateRef642 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_mapTemplateRef642_data Count:(NSUInteger)1] retain];
    FOLLOW_args_in_mapTemplateRef652 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_args_in_mapTemplateRef652_data Count:(NSUInteger)1] retain];
    FOLLOW_subtemplate_in_mapTemplateRef666 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_subtemplate_in_mapTemplateRef666_data Count:(NSUInteger)1] retain];
    FOLLOW_INCLUDE_IND_in_mapTemplateRef678 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_INCLUDE_IND_in_mapTemplateRef678_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_mapTemplateRef680 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_mapTemplateRef680_data Count:(NSUInteger)1] retain];
    FOLLOW_args_in_mapTemplateRef690 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_args_in_mapTemplateRef690_data Count:(NSUInteger)1] retain];
    FOLLOW_EXEC_FUNC_in_includeExpr712 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_EXEC_FUNC_in_includeExpr712_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_includeExpr714 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_includeExpr714_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_includeExpr716 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_includeExpr716_data Count:(NSUInteger)1] retain];
    FOLLOW_INCLUDE_in_includeExpr727 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_INCLUDE_in_includeExpr727_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_includeExpr729 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_includeExpr729_data Count:(NSUInteger)1] retain];
    FOLLOW_args_in_includeExpr731 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_args_in_includeExpr731_data Count:(NSUInteger)1] retain];
    FOLLOW_INCLUDE_SUPER_in_includeExpr742 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_INCLUDE_SUPER_in_includeExpr742_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_includeExpr744 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_includeExpr744_data Count:(NSUInteger)1] retain];
    FOLLOW_args_in_includeExpr746 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_args_in_includeExpr746_data Count:(NSUInteger)1] retain];
    FOLLOW_INCLUDE_REGION_in_includeExpr757 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_INCLUDE_REGION_in_includeExpr757_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_includeExpr759 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_includeExpr759_data Count:(NSUInteger)1] retain];
    FOLLOW_INCLUDE_SUPER_REGION_in_includeExpr769 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_INCLUDE_SUPER_REGION_in_includeExpr769_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_includeExpr771 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_includeExpr771_data Count:(NSUInteger)1] retain];
    FOLLOW_primary_in_includeExpr779 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_primary_in_includeExpr779_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_primary790 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_primary790_data Count:(NSUInteger)1] retain];
    FOLLOW_STRING_in_primary800 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_STRING_in_primary800_data Count:(NSUInteger)1] retain];
    FOLLOW_subtemplate_in_primary810 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_subtemplate_in_primary810_data Count:(NSUInteger)1] retain];
    FOLLOW_list_in_primary837 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_list_in_primary837_data Count:(NSUInteger)1] retain];
    FOLLOW_INCLUDE_IND_in_primary844 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_INCLUDE_IND_in_primary844_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_primary850 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_primary850_data Count:(NSUInteger)1] retain];
    FOLLOW_args_in_primary859 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_args_in_primary859_data Count:(NSUInteger)1] retain];
    FOLLOW_TO_STR_in_primary873 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_TO_STR_in_primary873_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_primary875 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_primary875_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_arg888 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_arg888_data Count:(NSUInteger)1] retain];
    FOLLOW_arg_in_args904 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_arg_in_args904_data Count:(NSUInteger)1] retain];
    FOLLOW_EQUALS_in_args923 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_EQUALS_in_args923_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_args925 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_args925_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_args927 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_args927_data Count:(NSUInteger)1] retain];
    FOLLOW_LIST_in_list956 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_LIST_in_list956_data Count:(NSUInteger)1] retain];
    FOLLOW_listElement_in_list959 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_listElement_in_list959_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_listElement976 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_listElement976_data Count:(NSUInteger)1] retain];
    FOLLOW_A_NULL_in_listElement980 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_A_NULL_in_listElement980_data Count:(NSUInteger)1] retain];

    [ANTLRBaseRecognizer setTokenNames:[[NSArray arrayWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>", 
 @"IF", @"ELSE", @"ELSEIF", @"ENDIF", @"SUPER", @"SEMI", @"BANG", @"ELLIPSIS", 
 @"EQUALS", @"COLON", @"LPAREN", @"RPAREN", @"LBRACK", @"RBRACK", @"COMMA", 
 @"DOT", @"LCURLY", @"RCURLY", @"TEXT", @"LDELIM", @"RDELIM", @"ID", @"STRING", 
 @"WS", @"PIPE", @"OR", @"AND", @"INDENT", @"NEWLINE", @"AT", @"REGION_END", 
 @"EXPR", @"OPTIONS", @"PROP", @"PROP_IND", @"INCLUDE", @"INCLUDE_IND", 
 @"EXEC_FUNC", @"INCLUDE_SUPER", @"INCLUDE_SUPER_REGION", @"INCLUDE_REGION", 
 @"TO_STR", @"LIST", @"MAP", @"ZIP", @"SUBTEMPLATE", @"ARGS", @"ELEMENTS", 
 @"REGION", @"A_NULL", nil] retain]];
    [ANTLRBaseRecognizer setGrammarFileName:@"/Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g"];
}

+ (CodeGenerator *)newCodeGenerator:(id<ANTLRTreeNodeStream>)aStream
{

    return [[CodeGenerator alloc] initWithStream:aStream];

}


- (id) initWithStream:(id<ANTLRTreeNodeStream>)aStream
{
    if ((self = [super initWithStream:aStream State:[[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:20+1] retain]]) != nil) {


        /* ruleAttributeScopeInit */
        template_scope = [template_Scope newtemplate_Scope];
        template_stack = [ANTLRSymbolStack newANTLRSymbolStackWithLen:30];
        /* start of actions-actionScope-init */
        /* start of init */
    }
    return self;
}

- (void) dealloc
{
    [super dealloc];
}

/* ObjC start members */
/* ObjC end members */
/* ObjC start actions.(actionScope).methods */

	+ (id) newCodeGenerator:(id<ANTLRTreeNodeStream>)anInput
	                 errMgr:(ErrorManager *)anErrMgr
	                   name:(NSString *)aName
	               template:(NSString *)aTemplate
	                  token:(ANTLRCommonToken *)aTemplateToken
	{
	    return [[CodeGenerator alloc] init:anInput
		                            errMgr:anErrMgr
	                                  name:aName
	                              template:aTemplate
	                                 token:aTemplateToken];
	}
	
	- (id) init:(id<ANTLRTreeNodeStream>)anInput
		                 errMgr:(ErrorManager *)anErrMgr
	                   name:(NSString *)aName
	               template:(NSString *)aTemplate
	                  token:(ANTLRCommonToken *)aTemplateToken
	{
		if (self = [super initWithStream:anInput State:[ANTLRRecognizerSharedState newANTLRRecognizerSharedState]]) {
            /* ruleAttributeScopeInit */
            template_scope = [template_Scope newtemplate_Scope];
            template_stack = [ANTLRSymbolStack newANTLRSymbolStackWithLen:30];
			errMgr = anErrMgr;
			outermostTemplateName = aName;
			template = aTemplate;
			templateToken = aTemplateToken;
		}
		return self;
	}

	// convience funcs to hide offensive sending of emit messages to
	// CompilationState temp data object.
	
	- (void) emit:(short)anOpcode
	{
		[((template_Scope *)[template_stack peek]).state emit:anOpcode];
    }
    
    - (void) emit:(ANTLRCommonTree *)opAST opcode:(short)anOpcode
    {
		[((template_Scope *)[template_stack peek]).state emit:opAST opcode:anOpcode];
	}
	
	- (void) emit1:(ANTLRCommonTree *)opAST opcode:(short)anOpcode arg:(NSInteger)arg
	{
		[((template_Scope *)[template_stack peek]).state emit1:opAST opcode:anOpcode arg:arg];
	}
	
	- (void) emit1:(ANTLRCommonTree *)opAST opcode:(short)anOpcode s:(NSString *)arg
	{
		[((template_Scope *)[template_stack peek]).state emit1:opAST opcode:anOpcode s:arg];
	}
	
	- (void) emit2:(ANTLRCommonTree *)opAST opcode:(short)anOpcode arg:(NSInteger)anArg arg2:(NSInteger)anArg2
	{
		[((template_Scope *)[template_stack peek]).state emit2:opAST opcode:anOpcode arg:anArg arg2:anArg2];
	}
	
	- (void) emit2:(ANTLRCommonTree *)opAST opcode:(short)anOpcode s:(NSString *)s arg2:(NSInteger)anArg
	{
		[((template_Scope *)[template_stack peek]).state emit2:opAST opcode:anOpcode s:s arg2:anArg];
	}
	
	- (void) insert:(NSInteger)addr opcode:(short)anOpcode s:(NSString *)s
	{
		[((template_Scope *)[template_stack peek]).state insert:addr opcode:anOpcode s:s];
	}
	
	- (void) setOption:(ANTLRCommonTree *)anID
	{
		[((template_Scope *)[template_stack peek]).state setOption:anID];
	}
	
	- (void) write:(NSInteger)addr value:(short)value
	{
		[((template_Scope *)[template_stack peek]).state write:addr value:value];
	}
	
	- (NSInteger) address { return ((template_Scope *)[template_stack peek]).state.ip; }
	- (void) func:(ANTLRCommonTree *)aTree { [((template_Scope *)[template_stack peek]).state func:templateToken tree:aTree]; }
	- (void) refAttr:(ANTLRCommonTree *)aTree { [((template_Scope *)[template_stack peek]).state refAttr:templateToken tree:aTree]; }
	- (NSInteger) defineString:(NSString *)s { return [((template_Scope *)[template_stack peek]).state defineString:s]; }

/* ObjC end actions.(actionScope).methods */
/* ObjC start methods() */
/* ObjC end methods() */
/* ObjC start rules */

/*
 * $ANTLR start templateAndEOF
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:191:1: templateAndEOF : template[nil ,nil] EOF ;
 */
- (void) templateAndEOF
{
    /* ruleScopeSetUp */

    @try {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:191:16: ( template[nil ,nil] EOF ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:191:18: template[nil ,nil] EOF // alt
        {
        /* ruleRef */
        [self pushFollow:FOLLOW_template_in_templateAndEOF74];
        [self template:nil arg1:nil];

        [self popFollow];


        [self match:input TokenType:EOF Follow:FOLLOW_EOF_in_templateAndEOF77]; 

        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end templateAndEOF */

/*
 * $ANTLR start template
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:193:1: template[NSString *name, NSMutableArray *args] returns [CompiledST *impl] : chunk ;
 */
- (CompiledST *) template:(NSString *)name arg1:(NSMutableArray *)args 
{
    /* ruleScopeSetUp */
    ANTLRSymbolStack *template_stack = [ANTLRSymbolStack newANTLRSymbolStackWithLen:30];
    [template_stack push:[[template_Scope newtemplate_Scope] retain]];
    CompiledST * impl = nil;


     	/* scopeSetAttributeRef */
    ((template_Scope *)[template_stack peek]).state =  [CompilationState newCompilationState:errMgr name:name stream:[input getTokenStream]];
    	impl =  ((template_Scope *)[template_stack peek]).state.impl;
     	if ( [template_stack count] == 1 ) outermostImpl = impl;
    	[impl defineFormalArgs:args]; // make sure args are defined prior to compilation
    	if ( name != nil && [name hasPrefix:Compiler.SUBTEMPLATE_PREFIX] ) {
    	    [impl addArg:[FormalArgument newFormalArgument:@"i"]];
    	    [impl addArg:[FormalArgument newFormalArgument:@"i0"]];
        }
    	impl.template = template; // always forget the entire template; char indexes are relative to it

    @try {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:208:2: ( chunk ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:208:4: chunk // alt
        {
        /* ruleRef */
        [self pushFollow:FOLLOW_chunk_in_template101];
        [self chunk];

        [self popFollow];


         // finish off the CompiledST result
                if ( ((template_Scope *)[template_stack peek]).state.stringtable != nil ) impl.strings = [((template_Scope *)[template_stack peek]).state.stringtable toArray];
                impl.codeSize = ((template_Scope *)[template_stack peek]).state.ip;
        		

        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
        [template_stack pop];
    }
    return impl;
}
/* $ANTLR end template */

/*
 * $ANTLR start chunk
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:215:1: chunk : ( element )* ;
 */
- (void) chunk
{
    /* ruleScopeSetUp */

    @try {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:216:2: ( ( element )* ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:216:4: ( element )* // alt
        {
        do {
            NSInteger alt1=2;
            NSInteger LA1_0 = [input LA:1];
            if ( (LA1_0==IF||LA1_0==TEXT||(LA1_0>=INDENT && LA1_0<=NEWLINE)||LA1_0==EXPR||LA1_0==REGION) ) {
                alt1=1;
            }


            switch (alt1) {
                case 1 : ;
                    // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:216:4: element // alt
                    {
                    /* ruleRef */
                    [self pushFollow:FOLLOW_element_in_chunk116];
                    [self element];

                    [self popFollow];



                    }
                    break;

                default :
                    goto loop1;
            }
        } while (YES);
        loop1: ;


        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end chunk */

/*
 * $ANTLR start element
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:219:1: element : ( ^( INDENT element ) | ifstat | exprElement | TEXT | region | NEWLINE );
 */
- (void) element
{
    /* ruleScopeSetUp */

    @try {
        ANTLRCommonTree *INDENT1 = nil;
        ANTLRCommonTree *TEXT2 = nil;
        CodeGenerator_region_return * region3 = nil;


        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:220:2: ( ^( INDENT element ) | ifstat | exprElement | TEXT | region | NEWLINE ) //ruleblock
        NSInteger alt2=6;
        switch ([input LA:1]) {
            case INDENT: ;
                {
                alt2=1;
                }
                break;
            case IF: ;
                {
                alt2=2;
                }
                break;
            case EXPR: ;
                {
                alt2=3;
                }
                break;
            case TEXT: ;
                {
                alt2=4;
                }
                break;
            case REGION: ;
                {
                alt2=5;
                }
                break;
            case NEWLINE: ;
                {
                alt2=6;
                }
                break;

        default: ;
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:2 state:0 stream:input];
            @throw nvae;
        }

        switch (alt2) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:220:4: ^( INDENT element ) // alt
                {
                INDENT1=(ANTLRCommonTree *)[self match:input TokenType:INDENT Follow:FOLLOW_INDENT_in_element130]; 

                [((template_Scope *)[template_stack peek]).state indent:(INDENT1!=nil?[INDENT1 getText]:@"nil")];

                    [self match:input TokenType:DOWN Follow:nil]; 
                    /* ruleRef */
                    [self pushFollow:FOLLOW_element_in_element134];
                    [self element];

                    [self popFollow];


                    [((template_Scope *)[template_stack peek]).state emit:Bytecode.INSTR_DEDENT];

                    [self match:input TokenType:UP Follow:nil]; 

                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:221:4: ifstat // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_ifstat_in_element142];
                [self ifstat];

                [self popFollow];



                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:222:4: exprElement // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_exprElement_in_element147];
                [self exprElement];

                [self popFollow];



                }
                break;
            case 4 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:223:4: TEXT // alt
                {
                TEXT2=(ANTLRCommonTree *)[self match:input TokenType:TEXT Follow:FOLLOW_TEXT_in_element152]; 

                		if ( [(TEXT2!=nil?[TEXT2 getText]:@"nil") length]>0 ) {
                			[self emit1:TEXT2 opcode:Bytecode.INSTR_LOAD_STR s:(TEXT2!=nil?[TEXT2 getText]:@"nil")];
                			[self emit:TEXT2 opcode:Bytecode.INSTR_WRITE];
                		}
                		

                }
                break;
            case 5 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:230:4: region // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_region_in_element161];
                region3 = [self region];

                [self popFollow];



                		[self emit2:(region3!=nil?((ANTLRCommonTree *)region3.start):nil) opcode:Bytecode.INSTR_NEW s:(region3!=nil?region3.name:nil) arg2:0];
                		[self emit:(region3!=nil?((ANTLRCommonTree *)region3.start):nil) opcode:Bytecode.INSTR_WRITE];
                		

                }
                break;
            case 6 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:235:4: NEWLINE // alt
                {
                [self match:input TokenType:NEWLINE Follow:FOLLOW_NEWLINE_in_element170]; 
                [self emit:Bytecode.INSTR_NEWLINE];

                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end element */

/*
 * $ANTLR start exprElement
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:238:1: exprElement : ^( EXPR expr ( exprOptions )? ) ;
 */
- (void) exprElement
{
    /* ruleScopeSetUp */

     short op = Bytecode.INSTR_WRITE; 
    @try {
        ANTLRCommonTree *EXPR4 = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:240:2: ( ^( EXPR expr ( exprOptions )? ) ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:240:4: ^( EXPR expr ( exprOptions )? ) // alt
        {
        EXPR4=(ANTLRCommonTree *)[self match:input TokenType:EXPR Follow:FOLLOW_EXPR_in_exprElement190]; 

            [self match:input TokenType:DOWN Follow:nil]; 
            /* ruleRef */
            [self pushFollow:FOLLOW_expr_in_exprElement192];
            [self expr];

            [self popFollow];


            // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:240:17: ( exprOptions )? // block
            NSInteger alt3=2;
            NSInteger LA3_0 = [input LA:1];

            if ( (LA3_0==OPTIONS) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 : ;
                    // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:240:18: exprOptions // alt
                    {
                    /* ruleRef */
                    [self pushFollow:FOLLOW_exprOptions_in_exprElement195];
                    [self exprOptions];

                    [self popFollow];


                    op=Bytecode.INSTR_WRITE_OPT;

                    }
                    break;

            }


            [self match:input TokenType:UP Follow:nil]; 
        [self emit:EXPR4 opcode:op];

        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end exprElement */

/*
 * $ANTLR start region
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:244:1: region returns [NSString *name] : ^( REGION ID template[$name,nil] ) ;
 */
- (CodeGenerator_region_return *) region
{
    /* ruleScopeSetUp */

    CodeGenerator_region_return * retval = [CodeGenerator_region_return newCodeGenerator_region_return];
    [retval setStart:[input LT:1]];

    @try {
        ANTLRCommonTree *ID5 = nil;
        CompiledST * template6 = nil;


        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:245:2: ( ^( REGION ID template[$name,nil] ) ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:245:4: ^( REGION ID template[$name,nil] ) // alt
        {
        [self match:input TokenType:REGION Follow:FOLLOW_REGION_in_region222]; 

            [self match:input TokenType:DOWN Follow:nil]; 
            ID5=(ANTLRCommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_region224]; 
             retval.name = [STGroup getMangledRegionName:outermostTemplateName name:(ID5!=nil?[ID5 getText]:@"nil")]; /* added to returnSetAttributeRef */
            /* ruleRef */
            [self pushFollow:FOLLOW_template_in_region234];
            template6 = [self template:retval.name  /* added to returnAttributeRef */ arg1:nil];

            [self popFollow];



            			CompiledST *sub = template6;
            	        sub.isRegion = true;
            	        sub.regionDefType = /* ST.RegionType. */ EMBEDDED;
            			//sub.dump();
            			[outermostImpl addImplicitlyDefinedTemplate:sub];
            			

            [self match:input TokenType:UP Follow:nil]; 

        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return retval;
}
/* $ANTLR end region */

/*
 * $ANTLR start subtemplate
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:258:1: subtemplate returns [NSString *name, NSInteger nargs] : ^( SUBTEMPLATE ( ^( ARGS ( ID )+ ) )* template[$name,args] ) ;
 */
- (CodeGenerator_subtemplate_return *) subtemplate
{
    /* ruleScopeSetUp */

    CodeGenerator_subtemplate_return * retval = [CodeGenerator_subtemplate_return newCodeGenerator_subtemplate_return];
    [retval setStart:[input LT:1]];


         retval.name = [Compiler getNewSubtemplateName]; /* added to returnSetAttributeRef */
    	NSMutableArray *args = [NSMutableArray arrayWithCapacity:16];

    @try {
        ANTLRCommonTree *ID7 = nil;
        ANTLRCommonTree *SUBTEMPLATE9 = nil;
        CompiledST * template8 = nil;


        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:263:2: ( ^( SUBTEMPLATE ( ^( ARGS ( ID )+ ) )* template[$name,args] ) ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:263:4: ^( SUBTEMPLATE ( ^( ARGS ( ID )+ ) )* template[$name,args] ) // alt
        {
        SUBTEMPLATE9=(ANTLRCommonTree *)[self match:input TokenType:SUBTEMPLATE Follow:FOLLOW_SUBTEMPLATE_in_subtemplate267]; 

        if ( [input LA:1] == DOWN ) {
            [self match:input TokenType:DOWN Follow:nil]; 
            do {
                NSInteger alt5=2;
                NSInteger LA5_0 = [input LA:1];
                if ( (LA5_0==ARGS) ) {
                    alt5=1;
                }


                switch (alt5) {
                    case 1 : ;
                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:264:5: ^( ARGS ( ID )+ ) // alt
                        {
                        [self match:input TokenType:ARGS Follow:FOLLOW_ARGS_in_subtemplate274]; 

                            [self match:input TokenType:DOWN Follow:nil]; 
                            // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:264:12: ( ID )+ // positiveClosureBlock
                            NSInteger cnt4 = 0;
                            do {
                                NSInteger alt4 = 2;
                                NSInteger LA4_0 = [input LA:1];
                                if ( (LA4_0==ID) ) {
                                    alt4=1;
                                }


                                switch (alt4) {
                                    case 1 : ;
                                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:264:13: ID // alt
                                        {
                                        ID7=(ANTLRCommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_subtemplate277]; 
                                        [args addObject:[FormalArgument newFormalArgument:(ID7!=nil?[ID7 getText]:@"nil")]];

                                        }
                                        break;

                                    default :
                                        if ( cnt4 >= 1 )
                                            goto loop4;
                                        ANTLREarlyExitException *eee = 
                                            [ANTLREarlyExitException exceptionWithStream:input decisionNumber:4];
                                        @throw eee;
                                }
                                cnt4++;
                            } while (YES);
                            loop4: ;


                            [self match:input TokenType:UP Follow:nil]; 

                        }
                        break;

                    default :
                        goto loop5;
                }
            } while (YES);
            loop5: ;

             retval.nargs = [args count]; /* added to returnSetAttributeRef */
            /* ruleRef */
            [self pushFollow:FOLLOW_template_in_subtemplate294];
            template8 = [self template:retval.name  /* added to returnAttributeRef */ arg1:args];

            [self popFollow];



            			CompiledST *sub = template8;
            			sub.isAnonSubtemplate = true;
            			if ( STGroup.debug ) {
            				sub.ast = SUBTEMPLATE9;
            				[sub.ast setUnknownTokenBoundaries];
            				sub.tokens = [input getTokenStream];
            			}
            			//sub.dump();
            			[outermostImpl addImplicitlyDefinedTemplate:sub];
            			

            [self match:input TokenType:UP Follow:nil]; 
        }

        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return retval;
}
/* $ANTLR end subtemplate */

/*
 * $ANTLR start ifstat
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:281:1: ifstat : ^(i= 'if' conditional chunk ( ^(eif= 'elseif' ec= conditional chunk ) )* ( ^(el= 'else' chunk ) )? ) ;
 */
- (void) ifstat
{
    /* ruleScopeSetUp */


        /** Tracks address of branch operand (in code block).  It's how
         *  we backpatch forward references when generating code for IFs.
         */
        NSInteger prevBranchOperand = -1;
        /** Branch instruction operands that are forward refs to end of IF.
         *  We need to update them once we see the endif.
         */
        ANTLRIntArray *endRefs = [ANTLRIntArray newArrayWithLen:16];

    @try {
        ANTLRCommonTree *i = nil;
        ANTLRCommonTree *eif = nil;
        ANTLRCommonTree *el = nil;
        CodeGenerator_conditional_return * ec = nil;


        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:292:2: ( ^(i= 'if' conditional chunk ( ^(eif= 'elseif' ec= conditional chunk ) )* ( ^(el= 'else' chunk ) )? ) ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:292:4: ^(i= 'if' conditional chunk ( ^(eif= 'elseif' ec= conditional chunk ) )* ( ^(el= 'else' chunk ) )? ) // alt
        {
        i=(ANTLRCommonTree *)[self match:input TokenType:IF Follow:FOLLOW_IF_in_ifstat325]; 

            [self match:input TokenType:DOWN Follow:nil]; 
            /* ruleRef */
            [self pushFollow:FOLLOW_conditional_in_ifstat327];
            [self conditional];

            [self popFollow];



            	        prevBranchOperand = [self address]+1;
            	        [self emit1:i opcode:Bytecode.INSTR_BRF arg:-1]; // write placeholder as branch target
            			
            /* ruleRef */
            [self pushFollow:FOLLOW_chunk_in_ifstat337];
            [self chunk];

            [self popFollow];


            do {
                NSInteger alt6=2;
                NSInteger LA6_0 = [input LA:1];
                if ( (LA6_0==ELSEIF) ) {
                    alt6=1;
                }


                switch (alt6) {
                    case 1 : ;
                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:298:6: ^(eif= 'elseif' ec= conditional chunk ) // alt
                        {
                        eif=(ANTLRCommonTree *)[self match:input TokenType:ELSEIF Follow:FOLLOW_ELSEIF_in_ifstat347]; 


                        				[endRefs addInteger:[self address]+1];
                        				[self emit1:eif opcode:Bytecode.INSTR_BR arg:-1]; // br end
                        				// update previous branch instruction
                        				[self write:prevBranchOperand value:(short)[self address]];
                        				prevBranchOperand = -1;
                        				

                            [self match:input TokenType:DOWN Follow:nil]; 
                            /* ruleRef */
                            [self pushFollow:FOLLOW_conditional_in_ifstat361];
                            ec = [self conditional];

                            [self popFollow];



                            		       	prevBranchOperand = [self address]+1;
                            		       	// write placeholder as branch target
                            		       	[self emit1:(ec!=nil?((ANTLRCommonTree *)ec.start):nil) opcode:Bytecode.INSTR_BRF arg:-1];
                            				
                            /* ruleRef */
                            [self pushFollow:FOLLOW_chunk_in_ifstat373];
                            [self chunk];

                            [self popFollow];



                            [self match:input TokenType:UP Follow:nil]; 

                        }
                        break;

                    default :
                        goto loop6;
                }
            } while (YES);
            loop6: ;

            // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:315:4: ( ^(el= 'else' chunk ) )? // block
            NSInteger alt7=2;
            NSInteger LA7_0 = [input LA:1];

            if ( (LA7_0==ELSE) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 : ;
                    // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:315:6: ^(el= 'else' chunk ) // alt
                    {
                    el=(ANTLRCommonTree *)[self match:input TokenType:ELSE Follow:FOLLOW_ELSE_in_ifstat396]; 


                    					[endRefs addInteger:[self address]+1];
                    					[self emit1:el opcode:Bytecode.INSTR_BR arg:-1]; // br end
                    					// update previous branch instruction
                    					[self write:prevBranchOperand value:(short)[self address]];
                    					prevBranchOperand = -1;
                    					

                    if ( [input LA:1] == DOWN ) {
                        [self match:input TokenType:DOWN Follow:nil]; 
                        /* ruleRef */
                        [self pushFollow:FOLLOW_chunk_in_ifstat410];
                        [self chunk];

                        [self popFollow];



                        [self match:input TokenType:UP Follow:nil]; 
                    }

                    }
                    break;

            }


            [self match:input TokenType:UP Follow:nil]; 

        		if ( prevBranchOperand>=0 ) {
        			[self write:prevBranchOperand value:(short)[self address]];
        		}
                for (int opnd = 0; opnd < [endRefs count]; opnd++) {
                    [self write:opnd value:(short)[self address]];
                }
        		

        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end ifstat */

/*
 * $ANTLR start conditional
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:337:1: conditional : ( ^( '||' conditional conditional ) | ^( '&&' conditional conditional ) | ^( '!' conditional ) | expr );
 */
- (CodeGenerator_conditional_return *) conditional
{
    /* ruleScopeSetUp */

    CodeGenerator_conditional_return * retval = [CodeGenerator_conditional_return newCodeGenerator_conditional_return];
    [retval setStart:[input LT:1]];

    @try {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:338:2: ( ^( '||' conditional conditional ) | ^( '&&' conditional conditional ) | ^( '!' conditional ) | expr ) //ruleblock
        NSInteger alt8=4;
        switch ([input LA:1]) {
            case OR: ;
                {
                alt8=1;
                }
                break;
            case AND: ;
                {
                alt8=2;
                }
                break;
            case BANG: ;
                {
                alt8=3;
                }
                break;
            case ID: ;
            case STRING: ;
            case PROP: ;
            case PROP_IND: ;
            case INCLUDE: ;
            case INCLUDE_IND: ;
            case EXEC_FUNC: ;
            case INCLUDE_SUPER: ;
            case INCLUDE_SUPER_REGION: ;
            case INCLUDE_REGION: ;
            case TO_STR: ;
            case LIST: ;
            case MAP: ;
            case ZIP: ;
            case SUBTEMPLATE: ;
                {
                alt8=4;
                }
                break;

        default: ;
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:8 state:0 stream:input];
            @throw nvae;
        }

        switch (alt8) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:338:4: ^( '||' conditional conditional ) // alt
                {
                [self match:input TokenType:OR Follow:FOLLOW_OR_in_conditional444]; 

                    [self match:input TokenType:DOWN Follow:nil]; 
                    /* ruleRef */
                    [self pushFollow:FOLLOW_conditional_in_conditional446];
                    [self conditional];

                    [self popFollow];


                    /* ruleRef */
                    [self pushFollow:FOLLOW_conditional_in_conditional448];
                    [self conditional];

                    [self popFollow];



                    [self match:input TokenType:UP Follow:nil]; 
                [self emit:Bytecode.INSTR_OR];

                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:339:4: ^( '&&' conditional conditional ) // alt
                {
                [self match:input TokenType:AND Follow:FOLLOW_AND_in_conditional458]; 

                    [self match:input TokenType:DOWN Follow:nil]; 
                    /* ruleRef */
                    [self pushFollow:FOLLOW_conditional_in_conditional460];
                    [self conditional];

                    [self popFollow];


                    /* ruleRef */
                    [self pushFollow:FOLLOW_conditional_in_conditional462];
                    [self conditional];

                    [self popFollow];



                    [self match:input TokenType:UP Follow:nil]; 
                [self emit:Bytecode.INSTR_AND];

                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:340:4: ^( '!' conditional ) // alt
                {
                [self match:input TokenType:BANG Follow:FOLLOW_BANG_in_conditional472]; 

                    [self match:input TokenType:DOWN Follow:nil]; 
                    /* ruleRef */
                    [self pushFollow:FOLLOW_conditional_in_conditional474];
                    [self conditional];

                    [self popFollow];



                    [self match:input TokenType:UP Follow:nil]; 
                [self emit:Bytecode.INSTR_NOT];

                }
                break;
            case 4 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:341:4: expr // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_expr_in_conditional486];
                [self expr];

                [self popFollow];



                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return retval;
}
/* $ANTLR end conditional */

/*
 * $ANTLR start exprOptions
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:344:1: exprOptions : ^( OPTIONS ( option )* ) ;
 */
- (void) exprOptions
{
    /* ruleScopeSetUp */

    @try {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:344:13: ( ^( OPTIONS ( option )* ) ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:344:15: ^( OPTIONS ( option )* ) // alt
        {
        [self emit:Bytecode.INSTR_OPTIONS];
        [self match:input TokenType:OPTIONS Follow:FOLLOW_OPTIONS_in_exprOptions500]; 

        if ( [input LA:1] == DOWN ) {
            [self match:input TokenType:DOWN Follow:nil]; 
            do {
                NSInteger alt9=2;
                NSInteger LA9_0 = [input LA:1];
                if ( (LA9_0==EQUALS) ) {
                    alt9=1;
                }


                switch (alt9) {
                    case 1 : ;
                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:344:63: option // alt
                        {
                        /* ruleRef */
                        [self pushFollow:FOLLOW_option_in_exprOptions502];
                        [self option];

                        [self popFollow];



                        }
                        break;

                    default :
                        goto loop9;
                }
            } while (YES);
            loop9: ;


            [self match:input TokenType:UP Follow:nil]; 
        }

        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end exprOptions */

/*
 * $ANTLR start option
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:346:1: option : ^( '=' ID expr ) ;
 */
- (void) option
{
    /* ruleScopeSetUp */

    @try {
        ANTLRCommonTree *ID10 = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:346:8: ( ^( '=' ID expr ) ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:346:10: ^( '=' ID expr ) // alt
        {
        [self match:input TokenType:EQUALS Follow:FOLLOW_EQUALS_in_option514]; 

            [self match:input TokenType:DOWN Follow:nil]; 
            ID10=(ANTLRCommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_option516]; 
            /* ruleRef */
            [self pushFollow:FOLLOW_expr_in_option518];
            [self expr];

            [self popFollow];



            [self match:input TokenType:UP Follow:nil]; 
        [self setOption:ID10];

        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end option */

/*
 * $ANTLR start expr
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:348:1: expr : ( ^( ZIP ^( ELEMENTS ( expr )+ ) mapTemplateRef[ne] ) | ^( MAP expr ( mapTemplateRef[1] )+ ) | prop | includeExpr );
 */
- (void) expr
{
    /* ruleScopeSetUp */

    NSInteger nt = 0, ne = 0;
    @try {
        ANTLRCommonTree *ZIP11 = nil;
        ANTLRCommonTree *MAP12 = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:350:2: ( ^( ZIP ^( ELEMENTS ( expr )+ ) mapTemplateRef[ne] ) | ^( MAP expr ( mapTemplateRef[1] )+ ) | prop | includeExpr ) //ruleblock
        NSInteger alt12=4;
        switch ([input LA:1]) {
            case ZIP: ;
                {
                alt12=1;
                }
                break;
            case MAP: ;
                {
                alt12=2;
                }
                break;
            case PROP: ;
            case PROP_IND: ;
                {
                alt12=3;
                }
                break;
            case ID: ;
            case STRING: ;
            case INCLUDE: ;
            case INCLUDE_IND: ;
            case EXEC_FUNC: ;
            case INCLUDE_SUPER: ;
            case INCLUDE_SUPER_REGION: ;
            case INCLUDE_REGION: ;
            case TO_STR: ;
            case LIST: ;
            case SUBTEMPLATE: ;
                {
                alt12=4;
                }
                break;

        default: ;
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:12 state:0 stream:input];
            @throw nvae;
        }

        switch (alt12) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:350:4: ^( ZIP ^( ELEMENTS ( expr )+ ) mapTemplateRef[ne] ) // alt
                {
                ZIP11=(ANTLRCommonTree *)[self match:input TokenType:ZIP Follow:FOLLOW_ZIP_in_expr537]; 

                    [self match:input TokenType:DOWN Follow:nil]; 
                    [self match:input TokenType:ELEMENTS Follow:FOLLOW_ELEMENTS_in_expr540]; 

                        [self match:input TokenType:DOWN Follow:nil]; 
                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:350:21: ( expr )+ // positiveClosureBlock
                        NSInteger cnt10 = 0;
                        do {
                            NSInteger alt10 = 2;
                            NSInteger LA10_0 = [input LA:1];
                            if ( ((LA10_0>=ID && LA10_0<=STRING)||(LA10_0>=PROP && LA10_0<=SUBTEMPLATE)) ) {
                                alt10=1;
                            }


                            switch (alt10) {
                                case 1 : ;
                                    // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:350:22: expr // alt
                                    {
                                    /* ruleRef */
                                    [self pushFollow:FOLLOW_expr_in_expr543];
                                    [self expr];

                                    [self popFollow];


                                    ne++;

                                    }
                                    break;

                                default :
                                    if ( cnt10 >= 1 )
                                        goto loop10;
                                    ANTLREarlyExitException *eee = 
                                        [ANTLREarlyExitException exceptionWithStream:input decisionNumber:10];
                                    @throw eee;
                            }
                            cnt10++;
                        } while (YES);
                        loop10: ;


                        [self match:input TokenType:UP Follow:nil]; 
                    /* ruleRef */
                    [self pushFollow:FOLLOW_mapTemplateRef_in_expr550];
                    [self mapTemplateRef:ne ];

                    [self popFollow];



                    [self match:input TokenType:UP Follow:nil]; 
                [self emit1:ZIP11 opcode:Bytecode.INSTR_ZIP_MAP arg:ne];

                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:352:4: ^( MAP expr ( mapTemplateRef[1] )+ ) // alt
                {
                MAP12=(ANTLRCommonTree *)[self match:input TokenType:MAP Follow:FOLLOW_MAP_in_expr562]; 

                    [self match:input TokenType:DOWN Follow:nil]; 
                    /* ruleRef */
                    [self pushFollow:FOLLOW_expr_in_expr564];
                    [self expr];

                    [self popFollow];


                    // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:352:15: ( mapTemplateRef[1] )+ // positiveClosureBlock
                    NSInteger cnt11 = 0;
                    do {
                        NSInteger alt11 = 2;
                        NSInteger LA11_0 = [input LA:1];
                        if ( ((LA11_0>=INCLUDE && LA11_0<=INCLUDE_IND)||LA11_0==SUBTEMPLATE) ) {
                            alt11=1;
                        }


                        switch (alt11) {
                            case 1 : ;
                                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:352:16: mapTemplateRef[1] // alt
                                {
                                /* ruleRef */
                                [self pushFollow:FOLLOW_mapTemplateRef_in_expr567];
                                [self mapTemplateRef:1 ];

                                [self popFollow];


                                nt++;

                                }
                                break;

                            default :
                                if ( cnt11 >= 1 )
                                    goto loop11;
                                ANTLREarlyExitException *eee = 
                                    [ANTLREarlyExitException exceptionWithStream:input decisionNumber:11];
                                @throw eee;
                        }
                        cnt11++;
                    } while (YES);
                    loop11: ;


                    [self match:input TokenType:UP Follow:nil]; 

                		if ( nt>1 )
                            [self emit1:MAP12 opcode:Bytecode.INSTR_ROT_MAP arg:nt];
                		else
                            [self emit:MAP12 opcode:Bytecode.INSTR_MAP];
                		

                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:359:4: prop // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_prop_in_expr582];
                [self prop];

                [self popFollow];



                }
                break;
            case 4 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:360:4: includeExpr // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_includeExpr_in_expr587];
                [self includeExpr];

                [self popFollow];



                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end expr */

/*
 * $ANTLR start prop
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:363:1: prop : ( ^( PROP expr ID ) | ^( PROP_IND expr expr ) );
 */
- (void) prop
{
    /* ruleScopeSetUp */

    @try {
        ANTLRCommonTree *PROP13 = nil;
        ANTLRCommonTree *ID14 = nil;
        ANTLRCommonTree *PROP_IND15 = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:363:5: ( ^( PROP expr ID ) | ^( PROP_IND expr expr ) ) //ruleblock
        NSInteger alt13=2;
        NSInteger LA13_0 = [input LA:1];

        if ( (LA13_0==PROP) ) {
            alt13=1;
        }
        else if ( (LA13_0==PROP_IND) ) {
            alt13=2;
        }
        else {
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:13 state:0 stream:input];
            @throw nvae;
        }
        switch (alt13) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:363:7: ^( PROP expr ID ) // alt
                {
                PROP13=(ANTLRCommonTree *)[self match:input TokenType:PROP Follow:FOLLOW_PROP_in_prop597]; 

                    [self match:input TokenType:DOWN Follow:nil]; 
                    /* ruleRef */
                    [self pushFollow:FOLLOW_expr_in_prop599];
                    [self expr];

                    [self popFollow];


                    ID14=(ANTLRCommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_prop601]; 

                    [self match:input TokenType:UP Follow:nil]; 
                [self emit1:PROP13 opcode:Bytecode.INSTR_LOAD_PROP s:(ID14!=nil?[ID14 getText]:@"nil")];

                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:364:4: ^( PROP_IND expr expr ) // alt
                {
                PROP_IND15=(ANTLRCommonTree *)[self match:input TokenType:PROP_IND Follow:FOLLOW_PROP_IND_in_prop615]; 

                    [self match:input TokenType:DOWN Follow:nil]; 
                    /* ruleRef */
                    [self pushFollow:FOLLOW_expr_in_prop617];
                    [self expr];

                    [self popFollow];


                    /* ruleRef */
                    [self pushFollow:FOLLOW_expr_in_prop619];
                    [self expr];

                    [self popFollow];



                    [self match:input TokenType:UP Follow:nil]; 
                [self emit:PROP_IND15 opcode:Bytecode.INSTR_LOAD_PROP_IND];

                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end prop */

/*
 * $ANTLR start mapTemplateRef
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:367:1: mapTemplateRef[NSInteger num_exprs] : ( ^( INCLUDE ID args ) | subtemplate | ^( INCLUDE_IND expr args ) );
 */
- (void) mapTemplateRef:(NSInteger)num_exprs 
{
    /* ruleScopeSetUp */

    @try {
        ANTLRCommonTree *INCLUDE16 = nil;
        ANTLRCommonTree *ID18 = nil;
        ANTLRCommonTree *INCLUDE_IND20 = nil;
        CodeGenerator_args_return * args17 = nil;

        CodeGenerator_subtemplate_return * subtemplate19 = nil;

        CodeGenerator_args_return * args21 = nil;


        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:368:2: ( ^( INCLUDE ID args ) | subtemplate | ^( INCLUDE_IND expr args ) ) //ruleblock
        NSInteger alt14=3;
        switch ([input LA:1]) {
            case INCLUDE: ;
                {
                alt14=1;
                }
                break;
            case SUBTEMPLATE: ;
                {
                alt14=2;
                }
                break;
            case INCLUDE_IND: ;
                {
                alt14=3;
                }
                break;

        default: ;
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:14 state:0 stream:input];
            @throw nvae;
        }

        switch (alt14) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:368:4: ^( INCLUDE ID args ) // alt
                {
                INCLUDE16=(ANTLRCommonTree *)[self match:input TokenType:INCLUDE Follow:FOLLOW_INCLUDE_in_mapTemplateRef640]; 

                    [self match:input TokenType:DOWN Follow:nil]; 
                    ID18=(ANTLRCommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_mapTemplateRef642]; 
                    for (NSInteger i=1; i<=num_exprs; i++) [self emit:INCLUDE16 opcode:Bytecode.INSTR_NULL];
                    /* ruleRef */
                    [self pushFollow:FOLLOW_args_in_mapTemplateRef652];
                    args17 = [self args];

                    [self popFollow];



                    [self match:input TokenType:UP Follow:nil]; 

                		if ( (args17!=nil?args17.namedArgs:NO) )
                			[self emit1:INCLUDE16 opcode:Bytecode.INSTR_NEW_BOX_ARGS s:(ID18!=nil?[ID18 getText]:@"nil")];
                		else
                			[self emit2:INCLUDE16 opcode:Bytecode.INSTR_NEW s:(ID18!=nil?[ID18 getText]:@"nil") arg2:((args17!=nil?args17.n:nil)+num_exprs)];
                		

                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:378:4: subtemplate // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_subtemplate_in_mapTemplateRef666];
                subtemplate19 = [self subtemplate];

                [self popFollow];



                		if ( (subtemplate19!=nil?subtemplate19.nargs:nil) != num_exprs ) {
                            [errMgr compileTimeError:ANON_ARGUMENT_MISMATCH
                                       templateToken:templateToken
                                                   t:(subtemplate19!=nil?((ANTLRCommonTree *)subtemplate19.start):nil).token
                                                 arg:(subtemplate19!=nil?subtemplate19.nargs:nil)
                                                arg2:num_exprs];
                		}
                		for (NSInteger i=1; i<=num_exprs; i++) [self emit:(subtemplate19!=nil?((ANTLRCommonTree *)subtemplate19.start):nil) opcode:Bytecode.INSTR_NULL];
                        [self emit2:(subtemplate19!=nil?((ANTLRCommonTree *)subtemplate19.start):nil) opcode:Bytecode.INSTR_NEW s:(subtemplate19!=nil?subtemplate19.name:nil) arg2:num_exprs];
                		

                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:391:4: ^( INCLUDE_IND expr args ) // alt
                {
                INCLUDE_IND20=(ANTLRCommonTree *)[self match:input TokenType:INCLUDE_IND Follow:FOLLOW_INCLUDE_IND_in_mapTemplateRef678]; 

                    [self match:input TokenType:DOWN Follow:nil]; 
                    /* ruleRef */
                    [self pushFollow:FOLLOW_expr_in_mapTemplateRef680];
                    [self expr];

                    [self popFollow];



                    			[self emit:INCLUDE_IND20 opcode:Bytecode.INSTR_TOSTR];
                    			for (NSInteger i=1; i<=num_exprs; i++) [self emit:INCLUDE_IND20 opcode:Bytecode.INSTR_NULL];
                    			
                    /* ruleRef */
                    [self pushFollow:FOLLOW_args_in_mapTemplateRef690];
                    args21 = [self args];

                    [self popFollow];


                    [self emit1:INCLUDE_IND20 opcode:Bytecode.INSTR_NEW_IND arg:((args21!=nil?args21.n:nil)+num_exprs)];

                    [self match:input TokenType:UP Follow:nil]; 

                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end mapTemplateRef */

/*
 * $ANTLR start includeExpr
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:401:1: includeExpr : ( ^( EXEC_FUNC ID ( expr )? ) | ^( INCLUDE ID args ) | ^( INCLUDE_SUPER ID args ) | ^( INCLUDE_REGION ID ) | ^( INCLUDE_SUPER_REGION ID ) | primary );
 */
- (void) includeExpr
{
    /* ruleScopeSetUp */

    @try {
        ANTLRCommonTree *ID22 = nil;
        ANTLRCommonTree *INCLUDE24 = nil;
        ANTLRCommonTree *ID25 = nil;
        ANTLRCommonTree *INCLUDE_SUPER27 = nil;
        ANTLRCommonTree *ID28 = nil;
        ANTLRCommonTree *ID29 = nil;
        ANTLRCommonTree *INCLUDE_REGION30 = nil;
        ANTLRCommonTree *ID31 = nil;
        ANTLRCommonTree *INCLUDE_SUPER_REGION32 = nil;
        CodeGenerator_args_return * args23 = nil;

        CodeGenerator_args_return * args26 = nil;


        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:402:2: ( ^( EXEC_FUNC ID ( expr )? ) | ^( INCLUDE ID args ) | ^( INCLUDE_SUPER ID args ) | ^( INCLUDE_REGION ID ) | ^( INCLUDE_SUPER_REGION ID ) | primary ) //ruleblock
        NSInteger alt16=6;
        switch ([input LA:1]) {
            case EXEC_FUNC: ;
                {
                alt16=1;
                }
                break;
            case INCLUDE: ;
                {
                alt16=2;
                }
                break;
            case INCLUDE_SUPER: ;
                {
                alt16=3;
                }
                break;
            case INCLUDE_REGION: ;
                {
                alt16=4;
                }
                break;
            case INCLUDE_SUPER_REGION: ;
                {
                alt16=5;
                }
                break;
            case ID: ;
            case STRING: ;
            case INCLUDE_IND: ;
            case TO_STR: ;
            case LIST: ;
            case SUBTEMPLATE: ;
                {
                alt16=6;
                }
                break;

        default: ;
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:16 state:0 stream:input];
            @throw nvae;
        }

        switch (alt16) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:402:4: ^( EXEC_FUNC ID ( expr )? ) // alt
                {
                [self match:input TokenType:EXEC_FUNC Follow:FOLLOW_EXEC_FUNC_in_includeExpr712]; 

                    [self match:input TokenType:DOWN Follow:nil]; 
                    ID22=(ANTLRCommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_includeExpr714]; 
                    // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:402:19: ( expr )? // block
                    NSInteger alt15=2;
                    NSInteger LA15_0 = [input LA:1];

                    if ( ((LA15_0>=ID && LA15_0<=STRING)||(LA15_0>=PROP && LA15_0<=SUBTEMPLATE)) ) {
                        alt15=1;
                    }
                    switch (alt15) {
                        case 1 : ;
                            // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:402:19: expr // alt
                            {
                            /* ruleRef */
                            [self pushFollow:FOLLOW_expr_in_includeExpr716];
                            [self expr];

                            [self popFollow];



                            }
                            break;

                    }


                    [self match:input TokenType:UP Follow:nil]; 
                [self func:ID22];

                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:403:4: ^( INCLUDE ID args ) // alt
                {
                INCLUDE24=(ANTLRCommonTree *)[self match:input TokenType:INCLUDE Follow:FOLLOW_INCLUDE_in_includeExpr727]; 

                    [self match:input TokenType:DOWN Follow:nil]; 
                    ID25=(ANTLRCommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_includeExpr729]; 
                    /* ruleRef */
                    [self pushFollow:FOLLOW_args_in_includeExpr731];
                    args23 = [self args];

                    [self popFollow];



                    [self match:input TokenType:UP Follow:nil]; 

                		if ( (args23!=nil?args23.namedArgs:NO) ) [self emit1:INCLUDE24 opcode:Bytecode.INSTR_NEW_BOX_ARGS s:(ID25!=nil?[ID25 getText]:@"nil")];
                		else [self emit2:INCLUDE24 opcode:Bytecode.INSTR_NEW s:(ID25!=nil?[ID25 getText]:@"nil") arg2:(args23!=nil?args23.n:nil)];
                		

                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:408:4: ^( INCLUDE_SUPER ID args ) // alt
                {
                INCLUDE_SUPER27=(ANTLRCommonTree *)[self match:input TokenType:INCLUDE_SUPER Follow:FOLLOW_INCLUDE_SUPER_in_includeExpr742]; 

                    [self match:input TokenType:DOWN Follow:nil]; 
                    ID28=(ANTLRCommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_includeExpr744]; 
                    /* ruleRef */
                    [self pushFollow:FOLLOW_args_in_includeExpr746];
                    args26 = [self args];

                    [self popFollow];



                    [self match:input TokenType:UP Follow:nil]; 

                		if ( (args26!=nil?args26.namedArgs:NO) ) [self emit1:INCLUDE_SUPER27 opcode:Bytecode.INSTR_SUPER_NEW_BOX_ARGS s:(ID28!=nil?[ID28 getText]:@"nil")];
                		else [self emit2:INCLUDE_SUPER27 opcode:Bytecode.INSTR_SUPER_NEW s:(ID28!=nil?[ID28 getText]:@"nil") arg2:(args26!=nil?args26.n:nil)];
                		

                }
                break;
            case 4 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:413:4: ^( INCLUDE_REGION ID ) // alt
                {
                INCLUDE_REGION30=(ANTLRCommonTree *)[self match:input TokenType:INCLUDE_REGION Follow:FOLLOW_INCLUDE_REGION_in_includeExpr757]; 

                    [self match:input TokenType:DOWN Follow:nil]; 
                    ID29=(ANTLRCommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_includeExpr759]; 

                    [self match:input TokenType:UP Follow:nil]; 

                									CompiledST *impl =
                										[Compiler defineBlankRegion:outermostImpl name:(ID29!=nil?[ID29 getText]:@"nil")];
                									//impl.dump();
                									[self emit2:INCLUDE_REGION30 opcode:Bytecode.INSTR_NEW s:impl.name arg2:0];
                									

                }
                break;
            case 5 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:419:4: ^( INCLUDE_SUPER_REGION ID ) // alt
                {
                INCLUDE_SUPER_REGION32=(ANTLRCommonTree *)[self match:input TokenType:INCLUDE_SUPER_REGION Follow:FOLLOW_INCLUDE_SUPER_REGION_in_includeExpr769]; 

                    [self match:input TokenType:DOWN Follow:nil]; 
                    ID31=(ANTLRCommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_includeExpr771]; 

                    [self match:input TokenType:UP Follow:nil]; 

                									CompiledST *impl =
                										[Compiler defineBlankRegion:outermostImpl name:(ID31!=nil?[ID31 getText]:@"nil")];
                									//impl.dump();
                									[self emit2:INCLUDE_SUPER_REGION32 opcode:Bytecode.INSTR_SUPER_NEW s:impl.name arg2:0];
                									

                }
                break;
            case 6 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:425:4: primary // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_primary_in_includeExpr779];
                [self primary];

                [self popFollow];



                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end includeExpr */

/*
 * $ANTLR start primary
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:428:1: primary : ( ID | STRING | subtemplate | list | ^( INCLUDE_IND expr args ) | ^( TO_STR expr ) );
 */
- (CodeGenerator_primary_return *) primary
{
    /* ruleScopeSetUp */

    CodeGenerator_primary_return * retval = [CodeGenerator_primary_return newCodeGenerator_primary_return];
    [retval setStart:[input LT:1]];

    @try {
        ANTLRCommonTree *ID33 = nil;
        ANTLRCommonTree *STRING34 = nil;
        ANTLRCommonTree *INCLUDE_IND36 = nil;
        ANTLRCommonTree *TO_STR38 = nil;
        CodeGenerator_subtemplate_return * subtemplate35 = nil;

        CodeGenerator_args_return * args37 = nil;


        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:429:2: ( ID | STRING | subtemplate | list | ^( INCLUDE_IND expr args ) | ^( TO_STR expr ) ) //ruleblock
        NSInteger alt17=6;
        switch ([input LA:1]) {
            case ID: ;
                {
                alt17=1;
                }
                break;
            case STRING: ;
                {
                alt17=2;
                }
                break;
            case SUBTEMPLATE: ;
                {
                alt17=3;
                }
                break;
            case LIST: ;
                {
                alt17=4;
                }
                break;
            case INCLUDE_IND: ;
                {
                alt17=5;
                }
                break;
            case TO_STR: ;
                {
                alt17=6;
                }
                break;

        default: ;
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:17 state:0 stream:input];
            @throw nvae;
        }

        switch (alt17) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:429:4: ID // alt
                {
                ID33=(ANTLRCommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_primary790]; 
                [self refAttr:ID33];

                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:430:4: STRING // alt
                {
                STRING34=(ANTLRCommonTree *)[self match:input TokenType:STRING Follow:FOLLOW_STRING_in_primary800]; 
                [self emit1:STRING34 opcode:Bytecode.INSTR_LOAD_STR s:[Misc strip:(STRING34!=nil?[STRING34 getText]:@"nil") n:1]];

                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:431:4: subtemplate // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_subtemplate_in_primary810];
                subtemplate35 = [self subtemplate];

                [self popFollow];


                [self emit2:((ANTLRCommonTree *)retval.start) opcode:Bytecode.INSTR_NEW s:(subtemplate35!=nil?subtemplate35.name:nil) arg2:0];

                }
                break;
            case 4 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:433:4: list // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_list_in_primary837];
                [self list];

                [self popFollow];



                }
                break;
            case 5 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:434:4: ^( INCLUDE_IND expr args ) // alt
                {
                INCLUDE_IND36=(ANTLRCommonTree *)[self match:input TokenType:INCLUDE_IND Follow:FOLLOW_INCLUDE_IND_in_primary844]; 

                    [self match:input TokenType:DOWN Follow:nil]; 
                    /* ruleRef */
                    [self pushFollow:FOLLOW_expr_in_primary850];
                    [self expr];

                    [self popFollow];


                    [self emit:INCLUDE_IND36 opcode:Bytecode.INSTR_TOSTR];
                    /* ruleRef */
                    [self pushFollow:FOLLOW_args_in_primary859];
                    args37 = [self args];

                    [self popFollow];


                    [self emit1:INCLUDE_IND36 opcode:Bytecode.INSTR_NEW_IND arg:(args37!=nil?args37.n:nil)];

                    [self match:input TokenType:UP Follow:nil]; 

                }
                break;
            case 6 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:438:4: ^( TO_STR expr ) // alt
                {
                TO_STR38=(ANTLRCommonTree *)[self match:input TokenType:TO_STR Follow:FOLLOW_TO_STR_in_primary873]; 

                    [self match:input TokenType:DOWN Follow:nil]; 
                    /* ruleRef */
                    [self pushFollow:FOLLOW_expr_in_primary875];
                    [self expr];

                    [self popFollow];



                    [self match:input TokenType:UP Follow:nil]; 
                [self emit:TO_STR38 opcode:Bytecode.INSTR_TOSTR];

                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return retval;
}
/* $ANTLR end primary */

/*
 * $ANTLR start arg
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:441:1: arg : expr ;
 */
- (void) arg
{
    /* ruleScopeSetUp */

    @try {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:441:5: ( expr ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:441:7: expr // alt
        {
        /* ruleRef */
        [self pushFollow:FOLLOW_expr_in_arg888];
        [self expr];

        [self popFollow];



        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end arg */

/*
 * $ANTLR start args
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:443:1: args returns [NSInteger n=0, BOOL namedArgs=false] : ( ( arg )+ | ( ^(eq= '=' ID expr ) )+ | );
 */
- (CodeGenerator_args_return *) args
{
    /* ruleScopeSetUp */

    CodeGenerator_args_return * retval = [CodeGenerator_args_return newCodeGenerator_args_return];
    [retval setStart:[input LT:1]];

    @try {
        ANTLRCommonTree *eq = nil;
        ANTLRCommonTree *ID39 = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:444:2: ( ( arg )+ | ( ^(eq= '=' ID expr ) )+ | ) //ruleblock
        NSInteger alt20=3;
        switch ([input LA:1]) {
            case ID: ;
            case STRING: ;
            case PROP: ;
            case PROP_IND: ;
            case INCLUDE: ;
            case INCLUDE_IND: ;
            case EXEC_FUNC: ;
            case INCLUDE_SUPER: ;
            case INCLUDE_SUPER_REGION: ;
            case INCLUDE_REGION: ;
            case TO_STR: ;
            case LIST: ;
            case MAP: ;
            case ZIP: ;
            case SUBTEMPLATE: ;
                {
                alt20=1;
                }
                break;
            case EQUALS: ;
                {
                alt20=2;
                }
                break;
            case UP: ;
                {
                alt20=3;
                }
                break;

        default: ;
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:20 state:0 stream:input];
            @throw nvae;
        }

        switch (alt20) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:444:4: ( arg )+ // alt
                {
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:444:4: ( arg )+ // positiveClosureBlock
                NSInteger cnt18 = 0;
                do {
                    NSInteger alt18 = 2;
                    NSInteger LA18_0 = [input LA:1];
                    if ( ((LA18_0>=ID && LA18_0<=STRING)||(LA18_0>=PROP && LA18_0<=SUBTEMPLATE)) ) {
                        alt18=1;
                    }


                    switch (alt18) {
                        case 1 : ;
                            // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:444:6: arg // alt
                            {
                            /* ruleRef */
                            [self pushFollow:FOLLOW_arg_in_args904];
                            [self arg];

                            [self popFollow];


                            retval.n  /* added to returnAttributeRef */++;

                            }
                            break;

                        default :
                            if ( cnt18 >= 1 )
                                goto loop18;
                            ANTLREarlyExitException *eee = 
                                [ANTLREarlyExitException exceptionWithStream:input decisionNumber:18];
                            @throw eee;
                    }
                    cnt18++;
                } while (YES);
                loop18: ;


                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:445:4: ( ^(eq= '=' ID expr ) )+ // alt
                {
                [self emit:((ANTLRCommonTree *)retval.start) opcode:Bytecode.INSTR_ARGS];  retval.namedArgs =true; /* added to returnSetAttributeRef */
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:446:3: ( ^(eq= '=' ID expr ) )+ // positiveClosureBlock
                NSInteger cnt19 = 0;
                do {
                    NSInteger alt19 = 2;
                    NSInteger LA19_0 = [input LA:1];
                    if ( (LA19_0==EQUALS) ) {
                        alt19=1;
                    }


                    switch (alt19) {
                        case 1 : ;
                            // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:446:5: ^(eq= '=' ID expr ) // alt
                            {
                            eq=(ANTLRCommonTree *)[self match:input TokenType:EQUALS Follow:FOLLOW_EQUALS_in_args923]; 

                                [self match:input TokenType:DOWN Follow:nil]; 
                                ID39=(ANTLRCommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_args925]; 
                                /* ruleRef */
                                [self pushFollow:FOLLOW_expr_in_args927];
                                [self expr];

                                [self popFollow];



                                [self match:input TokenType:UP Follow:nil]; 
                            retval.n  /* added to returnAttributeRef */++; [self emit1:eq opcode:Bytecode.INSTR_STORE_ARG s:[self defineString:(ID39!=nil?[ID39 getText]:@"nil")]];

                            }
                            break;

                        default :
                            if ( cnt19 >= 1 )
                                goto loop19;
                            ANTLREarlyExitException *eee = 
                                [ANTLREarlyExitException exceptionWithStream:input decisionNumber:19];
                            @throw eee;
                    }
                    cnt19++;
                } while (YES);
                loop19: ;


                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:450:3:  // alt
                {
                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return retval;
}
/* $ANTLR end args */

/*
 * $ANTLR start list
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:452:1: list : ^( LIST ( listElement )* ) ;
 */
- (void) list
{
    /* ruleScopeSetUp */

    @try {
        CodeGenerator_listElement_return * listElement40 = nil;


        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:452:5: ( ^( LIST ( listElement )* ) ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:452:7: ^( LIST ( listElement )* ) // alt
        {
        [self emit:Bytecode.INSTR_LIST];
        [self match:input TokenType:LIST Follow:FOLLOW_LIST_in_list956]; 

        if ( [input LA:1] == DOWN ) {
            [self match:input TokenType:DOWN Follow:nil]; 
            do {
                NSInteger alt21=2;
                NSInteger LA21_0 = [input LA:1];
                if ( ((LA21_0>=ID && LA21_0<=STRING)||(LA21_0>=PROP && LA21_0<=SUBTEMPLATE)||LA21_0==A_NULL) ) {
                    alt21=1;
                }


                switch (alt21) {
                    case 1 : ;
                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:453:11: listElement // alt
                        {
                        /* ruleRef */
                        [self pushFollow:FOLLOW_listElement_in_list959];
                        listElement40 = [self listElement];

                        [self popFollow];


                        [self emit:(listElement40!=nil?((ANTLRCommonTree *)listElement40.start):nil) opcode:Bytecode.INSTR_ADD];

                        }
                        break;

                    default :
                        goto loop21;
                }
            } while (YES);
            loop21: ;


            [self match:input TokenType:UP Follow:nil]; 
        }

        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end list */

/*
 * $ANTLR start listElement
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:456:1: listElement : ( expr | A_NULL );
 */
- (CodeGenerator_listElement_return *) listElement
{
    /* ruleScopeSetUp */

    CodeGenerator_listElement_return * retval = [CodeGenerator_listElement_return newCodeGenerator_listElement_return];
    [retval setStart:[input LT:1]];

    @try {
        ANTLRCommonTree *A_NULL41 = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:456:13: ( expr | A_NULL ) //ruleblock
        NSInteger alt22=2;
        NSInteger LA22_0 = [input LA:1];

        if ( ((LA22_0>=ID && LA22_0<=STRING)||(LA22_0>=PROP && LA22_0<=SUBTEMPLATE)) ) {
            alt22=1;
        }
        else if ( (LA22_0==A_NULL) ) {
            alt22=2;
        }
        else {
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:22 state:0 stream:input];
            @throw nvae;
        }
        switch (alt22) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:456:15: expr // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_expr_in_listElement976];
                [self expr];

                [self popFollow];



                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:456:22: A_NULL // alt
                {
                A_NULL41=(ANTLRCommonTree *)[self match:input TokenType:A_NULL Follow:FOLLOW_A_NULL_in_listElement980]; 
                [self emit:A_NULL41 opcode:Bytecode.INSTR_NULL];

                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return retval;
}
/* $ANTLR end listElement */
/* ObjC end rules */

@end /* end of CodeGenerator implementation line 692 */
