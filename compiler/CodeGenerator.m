/** \file
 *  This OBJC source file was generated by $ANTLR version 3.3.1-SNAPSHOT Mar 09, 2011 24:00:43
 *
 *     -  From the grammar source file : /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g
 *     -                            On : 2011-03-30 10:45:00
 *     -           for the tree parser : CodeGeneratorTreeParser *
 * Editing it, at least manually, is not wise.
 *
 * ObjC language generator and runtime by Alan Condit, acondit|hereisanat|ipns|dotgoeshere|com.
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2010 Alan Condit
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// $ANTLR 3.3.1-SNAPSHOT Mar 09, 2011 24:00:43 /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g 2011-03-30 10:45:00


/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#import "STErrorListener.h"
#import "CodeGenerator.h"
#import "AMutableArray.h"
/* ----------------------------------------- */

#pragma mark Tokens
#ifdef EOF
#undef EOF
#endif
#define EOF -1
#define ID 4
#define WS 5
#define STRING 6
#define ANONYMOUS_TEMPLATE 7
#define COMMENT 8
#define LINE_COMMENT 9
#define BIGSTRING 10
#define BIGSTRING_NO_NL 11
#define T_FALSE 12
#define T_TRUE 13
#define IF 14
#define ELSE 15
#define ELSEIF 16
#define ENDIF 17
#define SUPER 18
#define SEMI 19
#define BANG 20
#define ELLIPSIS 21
#define EQUALS 22
#define COLON 23
#define LPAREN 24
#define RPAREN 25
#define LBRACK 26
#define RBRACK 27
#define COMMA 28
#define DOT 29
#define LCURLY 30
//#define RCURLY 31
#define TEXT 32
//#define LDELIM 33
#define RDELIM 34
#define PIPE 35
#define OR 36
#define AND 37
#define INDENT 38
#define NEWLINE 39
#define AT 40
#define END 41
#define EXPR 42
#define OPTIONS 43
#define PROP 44
#define PROP_IND 45
#define INCLUDE 46
#define INCLUDE_IND 47
#define EXEC_FUNC 48
#define INCLUDE_SUPER 49
#define INCLUDE_SUPER_REGION 50
#define INCLUDE_REGION 51
#define TO_STR 52
#define LIST 53
#define MAP 54
#define ZIP 55
#define SUBTEMPLATE 56
#define ARGS 57
#define ELEMENTS 58
#define REGION 59
#define TNULL 60
#define INDENTED_EXPR 61
#pragma mark Dynamic Global Scopes
#pragma mark Dynamic Rule Scopes
/* ============================================================================= */
/* =============================================================================
 * Start of recognizer
 */

#pragma mark Bitsets
static ANTLRBitSet *FOLLOW_template_in_templateAndEOF74;
static const unsigned long long FOLLOW_template_in_templateAndEOF74_data[] = { 0x0000000000000000LL};
static ANTLRBitSet *FOLLOW_EOF_in_templateAndEOF77;
static const unsigned long long FOLLOW_EOF_in_templateAndEOF77_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_chunk_in_template101;
static const unsigned long long FOLLOW_chunk_in_template101_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_element_in_chunk116;
static const unsigned long long FOLLOW_element_in_chunk116_data[] = { 0x1400024080002002LL};
static ANTLRBitSet *FOLLOW_INDENTED_EXPR_in_element129;
static const unsigned long long FOLLOW_INDENTED_EXPR_in_element129_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_INDENT_in_element131;
static const unsigned long long FOLLOW_INDENT_in_element131_data[] = { 0x0400000000002000LL};
static ANTLRBitSet *FOLLOW_compoundElement_in_element133;
static const unsigned long long FOLLOW_compoundElement_in_element133_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_compoundElement_in_element141;
static const unsigned long long FOLLOW_compoundElement_in_element141_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_INDENTED_EXPR_in_element151;
static const unsigned long long FOLLOW_INDENTED_EXPR_in_element151_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_INDENT_in_element153;
static const unsigned long long FOLLOW_INDENT_in_element153_data[] = { 0x0000024080000000LL};
static ANTLRBitSet *FOLLOW_singleElement_in_element157;
static const unsigned long long FOLLOW_singleElement_in_element157_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_singleElement_in_element165;
static const unsigned long long FOLLOW_singleElement_in_element165_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_exprElement_in_singleElement183;
static const unsigned long long FOLLOW_exprElement_in_singleElement183_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_TEXT_in_singleElement188;
static const unsigned long long FOLLOW_TEXT_in_singleElement188_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_NEWLINE_in_singleElement197;
static const unsigned long long FOLLOW_NEWLINE_in_singleElement197_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ifstat_in_compoundElement211;
static const unsigned long long FOLLOW_ifstat_in_compoundElement211_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_region_in_compoundElement217;
static const unsigned long long FOLLOW_region_in_compoundElement217_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_EXPR_in_exprElement236;
static const unsigned long long FOLLOW_EXPR_in_exprElement236_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_expr_in_exprElement238;
static const unsigned long long FOLLOW_expr_in_exprElement238_data[] = { 0x0000040000000008LL};
static ANTLRBitSet *FOLLOW_exprOptions_in_exprElement241;
static const unsigned long long FOLLOW_exprOptions_in_exprElement241_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_REGION_in_region279;
static const unsigned long long FOLLOW_REGION_in_region279_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_region281;
static const unsigned long long FOLLOW_ID_in_region281_data[] = { 0x1400024080002000LL};
static ANTLRBitSet *FOLLOW_template_in_region291;
static const unsigned long long FOLLOW_template_in_region291_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_SUBTEMPLATE_in_subtemplate324;
static const unsigned long long FOLLOW_SUBTEMPLATE_in_subtemplate324_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ARGS_in_subtemplate331;
static const unsigned long long FOLLOW_ARGS_in_subtemplate331_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_subtemplate334;
static const unsigned long long FOLLOW_ID_in_subtemplate334_data[] = { 0x0000000000000018LL};
static ANTLRBitSet *FOLLOW_template_in_subtemplate351;
static const unsigned long long FOLLOW_template_in_subtemplate351_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_IF_in_ifstat388;
static const unsigned long long FOLLOW_IF_in_ifstat388_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_conditional_in_ifstat390;
static const unsigned long long FOLLOW_conditional_in_ifstat390_data[] = { 0x140002408000E008LL};
static ANTLRBitSet *FOLLOW_chunk_in_ifstat400;
static const unsigned long long FOLLOW_chunk_in_ifstat400_data[] = { 0x000000000000C008LL};
static ANTLRBitSet *FOLLOW_ELSEIF_in_ifstat410;
static const unsigned long long FOLLOW_ELSEIF_in_ifstat410_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_conditional_in_ifstat424;
static const unsigned long long FOLLOW_conditional_in_ifstat424_data[] = { 0x1400024080002008LL};
static ANTLRBitSet *FOLLOW_chunk_in_ifstat436;
static const unsigned long long FOLLOW_chunk_in_ifstat436_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_ELSE_in_ifstat459;
static const unsigned long long FOLLOW_ELSE_in_ifstat459_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_chunk_in_ifstat473;
static const unsigned long long FOLLOW_chunk_in_ifstat473_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_OR_in_conditional507;
static const unsigned long long FOLLOW_OR_in_conditional507_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_conditional_in_conditional509;
static const unsigned long long FOLLOW_conditional_in_conditional509_data[] = { 0x00FFF81800081850LL};
static ANTLRBitSet *FOLLOW_conditional_in_conditional511;
static const unsigned long long FOLLOW_conditional_in_conditional511_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_AND_in_conditional521;
static const unsigned long long FOLLOW_AND_in_conditional521_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_conditional_in_conditional523;
static const unsigned long long FOLLOW_conditional_in_conditional523_data[] = { 0x00FFF81800081850LL};
static ANTLRBitSet *FOLLOW_conditional_in_conditional525;
static const unsigned long long FOLLOW_conditional_in_conditional525_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_BANG_in_conditional535;
static const unsigned long long FOLLOW_BANG_in_conditional535_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_conditional_in_conditional537;
static const unsigned long long FOLLOW_conditional_in_conditional537_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_expr_in_conditional549;
static const unsigned long long FOLLOW_expr_in_conditional549_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_OPTIONS_in_exprOptions563;
static const unsigned long long FOLLOW_OPTIONS_in_exprOptions563_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_option_in_exprOptions565;
static const unsigned long long FOLLOW_option_in_exprOptions565_data[] = { 0x0000000000200008LL};
static ANTLRBitSet *FOLLOW_EQUALS_in_option577;
static const unsigned long long FOLLOW_EQUALS_in_option577_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_option579;
static const unsigned long long FOLLOW_ID_in_option579_data[] = { 0x00FFF80000001850LL};
static ANTLRBitSet *FOLLOW_expr_in_option581;
static const unsigned long long FOLLOW_expr_in_option581_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_ZIP_in_expr600;
static const unsigned long long FOLLOW_ZIP_in_expr600_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ELEMENTS_in_expr603;
static const unsigned long long FOLLOW_ELEMENTS_in_expr603_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_expr_in_expr606;
static const unsigned long long FOLLOW_expr_in_expr606_data[] = { 0x00FFF80000001858LL};
static ANTLRBitSet *FOLLOW_mapTemplateRef_in_expr613;
static const unsigned long long FOLLOW_mapTemplateRef_in_expr613_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_MAP_in_expr625;
static const unsigned long long FOLLOW_MAP_in_expr625_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_expr_in_expr627;
static const unsigned long long FOLLOW_expr_in_expr627_data[] = { 0x0080600000000000LL};
static ANTLRBitSet *FOLLOW_mapTemplateRef_in_expr630;
static const unsigned long long FOLLOW_mapTemplateRef_in_expr630_data[] = { 0x0080600000000008LL};
static ANTLRBitSet *FOLLOW_prop_in_expr645;
static const unsigned long long FOLLOW_prop_in_expr645_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_includeExpr_in_expr650;
static const unsigned long long FOLLOW_includeExpr_in_expr650_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_PROP_in_prop660;
static const unsigned long long FOLLOW_PROP_in_prop660_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_expr_in_prop662;
static const unsigned long long FOLLOW_expr_in_prop662_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_ID_in_prop664;
static const unsigned long long FOLLOW_ID_in_prop664_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_PROP_IND_in_prop678;
static const unsigned long long FOLLOW_PROP_IND_in_prop678_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_expr_in_prop680;
static const unsigned long long FOLLOW_expr_in_prop680_data[] = { 0x00FFF80000001850LL};
static ANTLRBitSet *FOLLOW_expr_in_prop682;
static const unsigned long long FOLLOW_expr_in_prop682_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_INCLUDE_in_mapTemplateRef702;
static const unsigned long long FOLLOW_INCLUDE_in_mapTemplateRef702_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_mapTemplateRef704;
static const unsigned long long FOLLOW_ID_in_mapTemplateRef704_data[] = { 0x00FFF80000201858LL};
static ANTLRBitSet *FOLLOW_args_in_mapTemplateRef714;
static const unsigned long long FOLLOW_args_in_mapTemplateRef714_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_subtemplate_in_mapTemplateRef728;
static const unsigned long long FOLLOW_subtemplate_in_mapTemplateRef728_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_INCLUDE_IND_in_mapTemplateRef740;
static const unsigned long long FOLLOW_INCLUDE_IND_in_mapTemplateRef740_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_expr_in_mapTemplateRef742;
static const unsigned long long FOLLOW_expr_in_mapTemplateRef742_data[] = { 0x00FFF80000201858LL};
static ANTLRBitSet *FOLLOW_args_in_mapTemplateRef752;
static const unsigned long long FOLLOW_args_in_mapTemplateRef752_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_EXEC_FUNC_in_includeExpr774;
static const unsigned long long FOLLOW_EXEC_FUNC_in_includeExpr774_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_includeExpr776;
static const unsigned long long FOLLOW_ID_in_includeExpr776_data[] = { 0x00FFF80000001858LL};
static ANTLRBitSet *FOLLOW_expr_in_includeExpr778;
static const unsigned long long FOLLOW_expr_in_includeExpr778_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_INCLUDE_in_includeExpr789;
static const unsigned long long FOLLOW_INCLUDE_in_includeExpr789_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_includeExpr791;
static const unsigned long long FOLLOW_ID_in_includeExpr791_data[] = { 0x00FFF80000201858LL};
static ANTLRBitSet *FOLLOW_args_in_includeExpr793;
static const unsigned long long FOLLOW_args_in_includeExpr793_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_INCLUDE_SUPER_in_includeExpr804;
static const unsigned long long FOLLOW_INCLUDE_SUPER_in_includeExpr804_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_includeExpr806;
static const unsigned long long FOLLOW_ID_in_includeExpr806_data[] = { 0x00FFF80000201858LL};
static ANTLRBitSet *FOLLOW_args_in_includeExpr808;
static const unsigned long long FOLLOW_args_in_includeExpr808_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_INCLUDE_REGION_in_includeExpr819;
static const unsigned long long FOLLOW_INCLUDE_REGION_in_includeExpr819_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_includeExpr821;
static const unsigned long long FOLLOW_ID_in_includeExpr821_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_INCLUDE_SUPER_REGION_in_includeExpr831;
static const unsigned long long FOLLOW_INCLUDE_SUPER_REGION_in_includeExpr831_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_includeExpr833;
static const unsigned long long FOLLOW_ID_in_includeExpr833_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_primary_in_includeExpr841;
static const unsigned long long FOLLOW_primary_in_includeExpr841_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ID_in_primary852;
static const unsigned long long FOLLOW_ID_in_primary852_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_STRING_in_primary862;
static const unsigned long long FOLLOW_STRING_in_primary862_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_T_TRUE_in_primary872;
static const unsigned long long FOLLOW_T_TRUE_in_primary872_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_T_FALSE_in_primary881;
static const unsigned long long FOLLOW_T_FALSE_in_primary881_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_subtemplate_in_primary890;
static const unsigned long long FOLLOW_subtemplate_in_primary890_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_list_in_primary917;
static const unsigned long long FOLLOW_list_in_primary917_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_INCLUDE_IND_in_primary924;
static const unsigned long long FOLLOW_INCLUDE_IND_in_primary924_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_expr_in_primary929;
static const unsigned long long FOLLOW_expr_in_primary929_data[] = { 0x00FFF80000201858LL};
static ANTLRBitSet *FOLLOW_args_in_primary938;
static const unsigned long long FOLLOW_args_in_primary938_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_TO_STR_in_primary952;
static const unsigned long long FOLLOW_TO_STR_in_primary952_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_expr_in_primary954;
static const unsigned long long FOLLOW_expr_in_primary954_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_expr_in_arg967;
static const unsigned long long FOLLOW_expr_in_arg967_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_arg_in_args983;
static const unsigned long long FOLLOW_arg_in_args983_data[] = { 0x00FFF80000001852LL};
static ANTLRBitSet *FOLLOW_EQUALS_in_args1002;
static const unsigned long long FOLLOW_EQUALS_in_args1002_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_args1004;
static const unsigned long long FOLLOW_ID_in_args1004_data[] = { 0x00FFF80000001850LL};
static ANTLRBitSet *FOLLOW_expr_in_args1006;
static const unsigned long long FOLLOW_expr_in_args1006_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_LIST_in_list1035;
static const unsigned long long FOLLOW_LIST_in_list1035_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_listElement_in_list1038;
static const unsigned long long FOLLOW_listElement_in_list1038_data[] = { 0x08FFF80000001858LL};
static ANTLRBitSet *FOLLOW_expr_in_listElement1054;
static const unsigned long long FOLLOW_expr_in_listElement1054_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_TNULL_in_listElement1058;
static const unsigned long long FOLLOW_TNULL_in_listElement1058_data[] = { 0x0000000000000002LL};


#pragma mark Dynamic Global Scopes

#pragma mark Dynamic Rule Scopes
/* start of ruleAttributeScopeImplementation */

@implementation template_Scope
@synthesize cstate;


+ (template_Scope *)newtemplate_Scope
{
    return [[[template_Scope alloc] init] retain];
}

- (id) init
{
    self = [super init];
    return self;
}

/* start of template_Scope get and set functions */

- (CompilationState *)getcstate { return( cstate ); }

- (void)setcstate:(CompilationState *)aVal { cstate = aVal; }


/* End of template_Scope get and set functions */

@end /* end of ruleAttributeScopeImplementation */



#pragma mark Rule Return Scopes start
@implementation CodeGenerator_region_return /* returnScope */
 /* start of synthesize -- OBJC-Line 1837 */
@synthesize name;
+ (CodeGenerator_region_return *)newCodeGenerator_region_return
{
    return [[[CodeGenerator_region_return alloc] init] retain];
}

- (id) init
{
    self = [super init];
    return self;
}

/* start of iterate get and set functions */

- (NSString *)getname { return( name ); }

- (void)setname:(NSString *)aVal { name = aVal; }


/* End of iterate get and set functions */



@end /* end of returnScope implementation */
@implementation CodeGenerator_subtemplate_return /* returnScope */
 /* start of synthesize -- OBJC-Line 1837 */
@synthesize name;
@synthesize nargs;

+ (CodeGenerator_subtemplate_return *)newCodeGenerator_subtemplate_return
{
    return [[[CodeGenerator_subtemplate_return alloc] init] retain];
}

- (id) init
{
    self = [super init];
    return self;
}

/* start of iterate get and set functions */

- (NSString *)getname { return( name ); }

- (void)setname:(NSString *)aVal { name = aVal; }


- (NSInteger)getnargs { return( nargs ); }

- (void)setnargs:(NSInteger)aVal { nargs = aVal; }


/* End of iterate get and set functions */



@end /* end of returnScope implementation */
@implementation CodeGenerator_conditional_return /* returnScope */
 /* start of synthesize -- OBJC-Line 1837 */
+ (CodeGenerator_conditional_return *)newCodeGenerator_conditional_return
{
    return [[[CodeGenerator_conditional_return alloc] init] retain];
}

- (id) init
{
    self = [super init];
    return self;
}




@end /* end of returnScope implementation */
@implementation CodeGenerator_primary_return /* returnScope */
 /* start of synthesize -- OBJC-Line 1837 */
+ (CodeGenerator_primary_return *)newCodeGenerator_primary_return
{
    return [[[CodeGenerator_primary_return alloc] init] retain];
}

- (id) init
{
    self = [super init];
    return self;
}




@end /* end of returnScope implementation */
@implementation CodeGenerator_args_return /* returnScope */
 /* start of synthesize -- OBJC-Line 1837 */
@synthesize n;

@synthesize namedArgs;
+ (CodeGenerator_args_return *)newCodeGenerator_args_return
{
    return [[[CodeGenerator_args_return alloc] init] retain];
}

- (id) init
{
    self = [super init];
    return self;
}

/* start of iterate get and set functions */

- (NSInteger)getn { return( n ); }

- (void)setn:(NSInteger)aVal { n = aVal; }


- (BOOL)getnamedArgs { return( namedArgs ); }

- (void)setnamedArgs:(BOOL)aVal { namedArgs = aVal; }


/* End of iterate get and set functions */



@end /* end of returnScope implementation */
@implementation CodeGenerator_listElement_return /* returnScope */
 /* start of synthesize -- OBJC-Line 1837 */
+ (CodeGenerator_listElement_return *)newCodeGenerator_listElement_return
{
    return [[[CodeGenerator_listElement_return alloc] init] retain];
}

- (id) init
{
    self = [super init];
    return self;
}




@end /* end of returnScope implementation */

//#pragma mark Rule return scopes start
//

#pragma mark Rule return scopes start

@implementation CodeGenerator  // line 637

/* ObjC start of ruleAttributeScope */
#pragma mark Dynamic Rule Scopes
/* ruleAttributeScope */
static ANTLRSymbolStack *template_stack;

/* ObjC end of ruleAttributeScope */
#pragma mark global Attribute Scopes
/* ObjC start globalAttributeScope */
/* ObjC end globalAttributeScope */
/* ObjC start actions.(actionScope).synthesize */

	@synthesize outermostTemplateName; // name of overall template
	@synthesize outermostImpl;
	@synthesize templateToken;// overall template token
	@synthesize template; // overall template text
	@synthesize errMgr;

/* ObjC end actions.(actionScope).synthesize */
/* ObjC start synthesize() */
/* ObjC end synthesize() */

+ (void) initialize
{
    #pragma mark Bitsets
    FOLLOW_template_in_templateAndEOF74 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_template_in_templateAndEOF74_data Count:(NSUInteger)1] retain];
    FOLLOW_EOF_in_templateAndEOF77 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_EOF_in_templateAndEOF77_data Count:(NSUInteger)1] retain];
    FOLLOW_chunk_in_template101 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_chunk_in_template101_data Count:(NSUInteger)1] retain];
    FOLLOW_element_in_chunk116 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_element_in_chunk116_data Count:(NSUInteger)1] retain];
    FOLLOW_INDENTED_EXPR_in_element129 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_INDENTED_EXPR_in_element129_data Count:(NSUInteger)1] retain];
    FOLLOW_INDENT_in_element131 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_INDENT_in_element131_data Count:(NSUInteger)1] retain];
    FOLLOW_compoundElement_in_element133 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_compoundElement_in_element133_data Count:(NSUInteger)1] retain];
    FOLLOW_compoundElement_in_element141 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_compoundElement_in_element141_data Count:(NSUInteger)1] retain];
    FOLLOW_INDENTED_EXPR_in_element151 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_INDENTED_EXPR_in_element151_data Count:(NSUInteger)1] retain];
    FOLLOW_INDENT_in_element153 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_INDENT_in_element153_data Count:(NSUInteger)1] retain];
    FOLLOW_singleElement_in_element157 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_singleElement_in_element157_data Count:(NSUInteger)1] retain];
    FOLLOW_singleElement_in_element165 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_singleElement_in_element165_data Count:(NSUInteger)1] retain];
    FOLLOW_exprElement_in_singleElement183 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_exprElement_in_singleElement183_data Count:(NSUInteger)1] retain];
    FOLLOW_TEXT_in_singleElement188 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_TEXT_in_singleElement188_data Count:(NSUInteger)1] retain];
    FOLLOW_NEWLINE_in_singleElement197 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_NEWLINE_in_singleElement197_data Count:(NSUInteger)1] retain];
    FOLLOW_ifstat_in_compoundElement211 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ifstat_in_compoundElement211_data Count:(NSUInteger)1] retain];
    FOLLOW_region_in_compoundElement217 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_region_in_compoundElement217_data Count:(NSUInteger)1] retain];
    FOLLOW_EXPR_in_exprElement236 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_EXPR_in_exprElement236_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_exprElement238 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_exprElement238_data Count:(NSUInteger)1] retain];
    FOLLOW_exprOptions_in_exprElement241 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_exprOptions_in_exprElement241_data Count:(NSUInteger)1] retain];
    FOLLOW_REGION_in_region279 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_REGION_in_region279_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_region281 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_region281_data Count:(NSUInteger)1] retain];
    FOLLOW_template_in_region291 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_template_in_region291_data Count:(NSUInteger)1] retain];
    FOLLOW_SUBTEMPLATE_in_subtemplate324 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_SUBTEMPLATE_in_subtemplate324_data Count:(NSUInteger)1] retain];
    FOLLOW_ARGS_in_subtemplate331 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ARGS_in_subtemplate331_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_subtemplate334 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_subtemplate334_data Count:(NSUInteger)1] retain];
    FOLLOW_template_in_subtemplate351 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_template_in_subtemplate351_data Count:(NSUInteger)1] retain];
    FOLLOW_IF_in_ifstat388 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_IF_in_ifstat388_data Count:(NSUInteger)1] retain];
    FOLLOW_conditional_in_ifstat390 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_conditional_in_ifstat390_data Count:(NSUInteger)1] retain];
    FOLLOW_chunk_in_ifstat400 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_chunk_in_ifstat400_data Count:(NSUInteger)1] retain];
    FOLLOW_ELSEIF_in_ifstat410 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ELSEIF_in_ifstat410_data Count:(NSUInteger)1] retain];
    FOLLOW_conditional_in_ifstat424 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_conditional_in_ifstat424_data Count:(NSUInteger)1] retain];
    FOLLOW_chunk_in_ifstat436 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_chunk_in_ifstat436_data Count:(NSUInteger)1] retain];
    FOLLOW_ELSE_in_ifstat459 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ELSE_in_ifstat459_data Count:(NSUInteger)1] retain];
    FOLLOW_chunk_in_ifstat473 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_chunk_in_ifstat473_data Count:(NSUInteger)1] retain];
    FOLLOW_OR_in_conditional507 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_OR_in_conditional507_data Count:(NSUInteger)1] retain];
    FOLLOW_conditional_in_conditional509 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_conditional_in_conditional509_data Count:(NSUInteger)1] retain];
    FOLLOW_conditional_in_conditional511 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_conditional_in_conditional511_data Count:(NSUInteger)1] retain];
    FOLLOW_AND_in_conditional521 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_AND_in_conditional521_data Count:(NSUInteger)1] retain];
    FOLLOW_conditional_in_conditional523 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_conditional_in_conditional523_data Count:(NSUInteger)1] retain];
    FOLLOW_conditional_in_conditional525 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_conditional_in_conditional525_data Count:(NSUInteger)1] retain];
    FOLLOW_BANG_in_conditional535 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_BANG_in_conditional535_data Count:(NSUInteger)1] retain];
    FOLLOW_conditional_in_conditional537 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_conditional_in_conditional537_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_conditional549 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_conditional549_data Count:(NSUInteger)1] retain];
    FOLLOW_OPTIONS_in_exprOptions563 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_OPTIONS_in_exprOptions563_data Count:(NSUInteger)1] retain];
    FOLLOW_option_in_exprOptions565 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_option_in_exprOptions565_data Count:(NSUInteger)1] retain];
    FOLLOW_EQUALS_in_option577 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_EQUALS_in_option577_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_option579 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_option579_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_option581 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_option581_data Count:(NSUInteger)1] retain];
    FOLLOW_ZIP_in_expr600 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ZIP_in_expr600_data Count:(NSUInteger)1] retain];
    FOLLOW_ELEMENTS_in_expr603 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ELEMENTS_in_expr603_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_expr606 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr606_data Count:(NSUInteger)1] retain];
    FOLLOW_mapTemplateRef_in_expr613 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_mapTemplateRef_in_expr613_data Count:(NSUInteger)1] retain];
    FOLLOW_MAP_in_expr625 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_MAP_in_expr625_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_expr627 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr627_data Count:(NSUInteger)1] retain];
    FOLLOW_mapTemplateRef_in_expr630 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_mapTemplateRef_in_expr630_data Count:(NSUInteger)1] retain];
    FOLLOW_prop_in_expr645 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_prop_in_expr645_data Count:(NSUInteger)1] retain];
    FOLLOW_includeExpr_in_expr650 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_includeExpr_in_expr650_data Count:(NSUInteger)1] retain];
    FOLLOW_PROP_in_prop660 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_PROP_in_prop660_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_prop662 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_prop662_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_prop664 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_prop664_data Count:(NSUInteger)1] retain];
    FOLLOW_PROP_IND_in_prop678 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_PROP_IND_in_prop678_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_prop680 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_prop680_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_prop682 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_prop682_data Count:(NSUInteger)1] retain];
    FOLLOW_INCLUDE_in_mapTemplateRef702 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_INCLUDE_in_mapTemplateRef702_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_mapTemplateRef704 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_mapTemplateRef704_data Count:(NSUInteger)1] retain];
    FOLLOW_args_in_mapTemplateRef714 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_args_in_mapTemplateRef714_data Count:(NSUInteger)1] retain];
    FOLLOW_subtemplate_in_mapTemplateRef728 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_subtemplate_in_mapTemplateRef728_data Count:(NSUInteger)1] retain];
    FOLLOW_INCLUDE_IND_in_mapTemplateRef740 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_INCLUDE_IND_in_mapTemplateRef740_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_mapTemplateRef742 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_mapTemplateRef742_data Count:(NSUInteger)1] retain];
    FOLLOW_args_in_mapTemplateRef752 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_args_in_mapTemplateRef752_data Count:(NSUInteger)1] retain];
    FOLLOW_EXEC_FUNC_in_includeExpr774 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_EXEC_FUNC_in_includeExpr774_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_includeExpr776 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_includeExpr776_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_includeExpr778 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_includeExpr778_data Count:(NSUInteger)1] retain];
    FOLLOW_INCLUDE_in_includeExpr789 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_INCLUDE_in_includeExpr789_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_includeExpr791 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_includeExpr791_data Count:(NSUInteger)1] retain];
    FOLLOW_args_in_includeExpr793 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_args_in_includeExpr793_data Count:(NSUInteger)1] retain];
    FOLLOW_INCLUDE_SUPER_in_includeExpr804 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_INCLUDE_SUPER_in_includeExpr804_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_includeExpr806 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_includeExpr806_data Count:(NSUInteger)1] retain];
    FOLLOW_args_in_includeExpr808 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_args_in_includeExpr808_data Count:(NSUInteger)1] retain];
    FOLLOW_INCLUDE_REGION_in_includeExpr819 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_INCLUDE_REGION_in_includeExpr819_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_includeExpr821 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_includeExpr821_data Count:(NSUInteger)1] retain];
    FOLLOW_INCLUDE_SUPER_REGION_in_includeExpr831 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_INCLUDE_SUPER_REGION_in_includeExpr831_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_includeExpr833 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_includeExpr833_data Count:(NSUInteger)1] retain];
    FOLLOW_primary_in_includeExpr841 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_primary_in_includeExpr841_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_primary852 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_primary852_data Count:(NSUInteger)1] retain];
    FOLLOW_STRING_in_primary862 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_STRING_in_primary862_data Count:(NSUInteger)1] retain];
    FOLLOW_T_TRUE_in_primary872 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_T_TRUE_in_primary872_data Count:(NSUInteger)1] retain];
    FOLLOW_T_FALSE_in_primary881 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_T_FALSE_in_primary881_data Count:(NSUInteger)1] retain];
    FOLLOW_subtemplate_in_primary890 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_subtemplate_in_primary890_data Count:(NSUInteger)1] retain];
    FOLLOW_list_in_primary917 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_list_in_primary917_data Count:(NSUInteger)1] retain];
    FOLLOW_INCLUDE_IND_in_primary924 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_INCLUDE_IND_in_primary924_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_primary929 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_primary929_data Count:(NSUInteger)1] retain];
    FOLLOW_args_in_primary938 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_args_in_primary938_data Count:(NSUInteger)1] retain];
    FOLLOW_TO_STR_in_primary952 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_TO_STR_in_primary952_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_primary954 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_primary954_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_arg967 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_arg967_data Count:(NSUInteger)1] retain];
    FOLLOW_arg_in_args983 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_arg_in_args983_data Count:(NSUInteger)1] retain];
    FOLLOW_EQUALS_in_args1002 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_EQUALS_in_args1002_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_args1004 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_args1004_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_args1006 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_args1006_data Count:(NSUInteger)1] retain];
    FOLLOW_LIST_in_list1035 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_LIST_in_list1035_data Count:(NSUInteger)1] retain];
    FOLLOW_listElement_in_list1038 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_listElement_in_list1038_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_listElement1054 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_listElement1054_data Count:(NSUInteger)1] retain];
    FOLLOW_TNULL_in_listElement1058 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_TNULL_in_listElement1058_data Count:(NSUInteger)1] retain];

    [ANTLRBaseRecognizer setTokenNames:[[AMutableArray arrayWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>", 
 @"ID", @"WS", @"STRING", @"ANONYMOUS_TEMPLATE", @"COMMENT", @"LINE_COMMENT", 
 @"BIGSTRING", @"T_FALSE", @"T_TRUE", @"IF", @"ELSE", @"ELSEIF", @"ENDIF", 
 @"SUPER", @"SEMI", @"BANG", @"ELLIPSIS", @"EQUALS", @"COLON", @"LPAREN", 
 @"RPAREN", @"LBRACK", @"RBRACK", @"COMMA", @"DOT", @"LCURLY", @"RCURLY", 
 @"TEXT", @"LDELIM", @"RDELIM", @"PIPE", @"OR", @"AND", @"INDENT", @"NEWLINE", 
 @"AT", @"END", @"EXPR", @"OPTIONS", @"PROP", @"PROP_IND", @"INCLUDE", @"INCLUDE_IND", 
 @"EXEC_FUNC", @"INCLUDE_SUPER", @"INCLUDE_SUPER_REGION", @"INCLUDE_REGION", 
 @"TO_STR", @"LIST", @"MAP", @"ZIP", @"SUBTEMPLATE", @"ARGS", @"ELEMENTS", 
 @"REGION", @"TNULL", @"INDENTED_EXPR", nil] retain]];
    [ANTLRBaseRecognizer setGrammarFileName:@"/Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g"];
}

+ (CodeGenerator *)newCodeGenerator:(id<ANTLRTreeNodeStream>)aStream
{

    return [[CodeGenerator alloc] initWithStream:aStream];

}


- (id) initWithStream:(id<ANTLRTreeNodeStream>)aStream
{
    self=[super initWithStream:aStream State:[[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:22+1] retain]];
    if ( self != nil ) {
        /* ruleAttributeScopeInit */
        template_scope = [template_Scope newtemplate_Scope];
        template_stack = [ANTLRSymbolStack newANTLRSymbolStackWithLen:30];
        /* start of actions-actionScope-init */
        /* start of init */
    }
    return self;
}

- (void) dealloc
{
    [super dealloc];
}

/* ObjC start members */
/* ObjC end members */
/* ObjC start actions.(actionScope).methods */

+ (id) newCodeGenerator:(id<ANTLRTreeNodeStream>)anInput
                 errMgr:(ErrorManager *)anErrMgr
                   name:(NSString *)aName
               template:(NSString *)aTemplate
                  token:(STToken *)aTemplateToken
{
    return [[[CodeGenerator alloc] init:anInput
                                errMgr:anErrMgr
                                  name:aName
                              template:aTemplate
                                 token:aTemplateToken] retain];
}

- (id) init:(id<ANTLRTreeNodeStream>)anInput
                     errMgr:(ErrorManager *)anErrMgr
                   name:(NSString *)aName
               template:(NSString *)aTemplate
                  token:(STToken *)aTemplateToken
{
    self=[super initWithStream:anInput State:[ANTLRRecognizerSharedState newANTLRRecognizerSharedState]];
    if ( self != nil ) {
        /* ruleAttributeScopeInit */
        template_scope = [template_Scope newtemplate_Scope];
        template_stack = [ANTLRSymbolStack newANTLRSymbolStackWithLen:30];
        errMgr = anErrMgr;
        outermostTemplateName = aName;
        template = aTemplate;
        templateToken = aTemplateToken;
    }
    return self;
}

// convience funcs to hide offensive sending of emit messages to
// CompilationState temp data object.

- (void) emit1:(ANTLRCommonTree *)opAST opcode:(short)anOpcode arg:(NSInteger)arg
{
    [((template_Scope *)[template_stack peek]).cstate emit1:opAST opcode:anOpcode arg:arg];
}

- (void) emit1:(ANTLRCommonTree *)opAST opcode:(short)anOpcode s:(NSString *)arg
{
    [((template_Scope *)[template_stack peek]).cstate emit1:opAST opcode:anOpcode s:arg];
}

- (void) emit2:(ANTLRCommonTree *)opAST opcode:(short)anOpcode arg:(NSInteger)anArg arg2:(NSInteger)anArg2
{
    [((template_Scope *)[template_stack peek]).cstate emit2:opAST opcode:anOpcode arg:anArg arg2:anArg2];
}

- (void) emit2:(ANTLRCommonTree *)opAST opcode:(short)anOpcode s:(NSString *)s arg2:(NSInteger)anArg
{
    [((template_Scope *)[template_stack peek]).cstate emit2:opAST opcode:anOpcode s:s arg2:anArg];
}

- (void) emit:(short)anOpcode
{
    [((template_Scope *)[template_stack peek]).cstate emit:anOpcode];
}

- (void) emit:(ANTLRCommonTree *)opAST opcode:(short)anOpcode
{
    [((template_Scope *)[template_stack peek]).cstate emit:opAST opcode:anOpcode];
}

- (void) insert:(NSInteger)addr opcode:(short)anOpcode s:(NSString *)s
{
    [((template_Scope *)[template_stack peek]).cstate insert:addr opcode:anOpcode s:s];
}

- (void) setOption:(ANTLRCommonTree *)anID
{
    [((template_Scope *)[template_stack peek]).cstate setOption:anID];
}

- (void) write:(NSInteger)addr value:(short)value
{
    [((template_Scope *)[template_stack peek]).cstate write:addr value:value];
}

- (NSInteger) address
{
    return ((template_Scope *)[template_stack peek]).cstate.ip;
}

- (void) func:(ANTLRCommonTree *)aTree
{
    [((template_Scope *)[template_stack peek]).cstate func:templateToken tree:aTree];
}

- (void) refAttr:(ANTLRCommonTree *)aTree
{
    [((template_Scope *)[template_stack peek]).cstate refAttr:templateToken tree:aTree];
}

- (NSInteger) defineString:(NSString *)s
{
    return [((template_Scope *)[template_stack peek]).cstate defineString:s];
}

/* ObjC end actions.(actionScope).methods */
/* ObjC start methods() */
/* ObjC end methods() */
/* ObjC start rules */

/*
 * $ANTLR start templateAndEOF
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:215:1: templateAndEOF : template[nil ,nil] EOF ;
 */
- (void) templateAndEOF
{
    /* ruleScopeSetUp */

    @try {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:215:16: ( template[nil ,nil] EOF ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:215:18: template[nil ,nil] EOF // alt
        {
        /* ruleRef */
        [self pushFollow:FOLLOW_template_in_templateAndEOF74];
        [self template:nil arg1:nil];

        [self popFollow];


        [self match:input TokenType:EOF Follow:FOLLOW_EOF_in_templateAndEOF77]; 

        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end templateAndEOF */

/*
 * $ANTLR start template
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:217:1: template[NSString *name, AMutableArray *args] returns [CompiledST *impl] : chunk ;
 */
- (CompiledST *) template:(NSString *)name arg1:(AMutableArray *)args 
{
    /* ruleScopeSetUp */
    [template_stack push:[[template_Scope newtemplate_Scope] retain]];
    CompiledST * impl = nil;


     	/* scopeSetAttributeRef */
    ((template_Scope *)[template_stack peek]).cstate =  [[CompilationState newCompilationState:errMgr name:name stream:[input getTokenStream]] retain];
    	impl =  ((template_Scope *)[template_stack peek]).cstate.impl;
     	if ( [template_stack count] == 1 ) outermostImpl = impl;
    	[impl defineFormalArgs:args]; // make sure args are defined prior to compilation
    	if ( name != nil && [name hasPrefix:Compiler.SUBTEMPLATE_PREFIX] ) {
    	    [impl addArg:[FormalArgument newFormalArgument:@"i"]];
    	    [impl addArg:[FormalArgument newFormalArgument:@"i0"]];
        }
    	impl.template = template; // always forget the entire template; char indexes are relative to it

    @try {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:232:2: ( chunk ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:232:4: chunk // alt
        {
        /* ruleRef */
        [self pushFollow:FOLLOW_chunk_in_template101];
        [self chunk];

        [self popFollow];


         // finish off the CompiledST result
                if ( ((template_Scope *)[template_stack peek]).cstate.stringtable != nil ) impl.strings = [((template_Scope *)[template_stack peek]).cstate.stringtable toArray];
                impl.codeSize = ((template_Scope *)[template_stack peek]).cstate.ip;
        		

        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
        [template_stack pop];
    }
    return impl;
}
/* $ANTLR end template */

/*
 * $ANTLR start chunk
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:239:1: chunk : ( element )* ;
 */
- (void) chunk
{
    /* ruleScopeSetUp */

    @try {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:240:2: ( ( element )* ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:240:4: ( element )* // alt
        {
        do {
            NSInteger alt1=2;
            NSInteger LA1_0 = [input LA:1];
            if ( (LA1_0==IF||LA1_0==TEXT||LA1_0==NEWLINE||LA1_0==EXPR||LA1_0==REGION||LA1_0==INDENTED_EXPR) ) {
                alt1=1;
            }


            switch (alt1) {
                case 1 : ;
                    // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:240:4: element // alt
                    {
                    /* ruleRef */
                    [self pushFollow:FOLLOW_element_in_chunk116];
                    [self element];

                    [self popFollow];



                    }
                    break;

                default :
                    goto loop1;
            }
        } while (YES);
        loop1: ;


        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end chunk */

/*
 * $ANTLR start element
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:243:1: element : ( ^( INDENTED_EXPR INDENT compoundElement[$INDENT] ) | compoundElement[nil] | ^( INDENTED_EXPR INDENT singleElement ) | singleElement );
 */
- (void) element
{
    /* ruleScopeSetUp */

    @try {
        ANTLRCommonTree *INDENT1 = nil;
        ANTLRCommonTree *INDENT2 = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:244:2: ( ^( INDENTED_EXPR INDENT compoundElement[$INDENT] ) | compoundElement[nil] | ^( INDENTED_EXPR INDENT singleElement ) | singleElement ) //ruleblock
        NSInteger alt2=4;
        switch ([input LA:1]) {
            case INDENTED_EXPR: ;
                {
                NSInteger LA2_1 = [input LA:2];

                if ( (LA2_1==DOWN) ) {
                    NSInteger LA2_4 = [input LA:3];

                    if ( (LA2_4==INDENT) ) {
                        NSInteger LA2_5 = [input LA:4];

                        if ( (LA2_5==IF||LA2_5==REGION) ) {
                            alt2=1;
                        }
                        else if ( (LA2_5==TEXT||LA2_5==NEWLINE||LA2_5==EXPR) ) {
                            alt2=3;
                        }
                        else {
                            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:2 state:5 stream:input];
                            @throw nvae;
                        }
                    }
                    else {
                        ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:2 state:4 stream:input];
                        @throw nvae;
                    }
                }
                else {
                    ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:2 state:1 stream:input];
                    @throw nvae;
                }
                }
                break;
            case IF: ;
            case REGION: ;
                {
                alt2=2;
                }
                break;
            case TEXT: ;
            case NEWLINE: ;
            case EXPR: ;
                {
                alt2=4;
                }
                break;

        default: ;
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:2 state:0 stream:input];
            @throw nvae;
        }

        switch (alt2) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:244:4: ^( INDENTED_EXPR INDENT compoundElement[$INDENT] ) // alt
                {
                [self match:input TokenType:INDENTED_EXPR Follow:FOLLOW_INDENTED_EXPR_in_element129]; 

                    [self match:input TokenType:DOWN Follow:nil]; 
                    INDENT1=(ANTLRCommonTree *)[self match:input TokenType:INDENT Follow:FOLLOW_INDENT_in_element131]; 
                    /* ruleRef */
                    [self pushFollow:FOLLOW_compoundElement_in_element133];
                    [self compoundElement:INDENT1 ];

                    [self popFollow];



                    [self match:input TokenType:UP Follow:nil]; 

                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:245:4: compoundElement[nil] // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_compoundElement_in_element141];
                [self compoundElement:nil];

                [self popFollow];



                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:246:7: ^( INDENTED_EXPR INDENT singleElement ) // alt
                {
                [self match:input TokenType:INDENTED_EXPR Follow:FOLLOW_INDENTED_EXPR_in_element151]; 

                    [self match:input TokenType:DOWN Follow:nil]; 
                    INDENT2=(ANTLRCommonTree *)[self match:input TokenType:INDENT Follow:FOLLOW_INDENT_in_element153]; 
                    //[((template_Scope *)[template_stack peek]).cstate indent:(INDENT2!=nil?[INDENT2 getText]:@"nil")];
                    [((template_Scope *)[template_stack peek]).cstate indent:((INDENT2!=nil)?INDENT2:nil)];
                    /* ruleRef */
                    [self pushFollow:FOLLOW_singleElement_in_element157];
                    [self singleElement];

                    [self popFollow];


                    [((template_Scope *)[template_stack peek]).cstate emit:Bytecode.INSTR_DEDENT];

                    [self match:input TokenType:UP Follow:nil]; 

                }
                break;
            case 4 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:247:4: singleElement // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_singleElement_in_element165];
                [self singleElement];

                [self popFollow];



                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end element */

/*
 * $ANTLR start singleElement
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:250:1: singleElement : ( exprElement | TEXT | NEWLINE );
 */
- (void) singleElement
{
    /* ruleScopeSetUp */

    @try {
        ANTLRCommonTree *TEXT3 = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:251:2: ( exprElement | TEXT | NEWLINE ) //ruleblock
        NSInteger alt3=3;
        switch ([input LA:1]) {
            case EXPR: ;
                {
                alt3=1;
                }
                break;
            case TEXT: ;
                {
                alt3=2;
                }
                break;
            case NEWLINE: ;
                {
                alt3=3;
                }
                break;

        default: ;
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:3 state:0 stream:input];
            @throw nvae;
        }

        switch (alt3) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:251:4: exprElement // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_exprElement_in_singleElement183];
                [self exprElement];

                [self popFollow];



                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:252:4: TEXT // alt
                {
                TEXT3=(ANTLRCommonTree *)[self match:input TokenType:TEXT Follow:FOLLOW_TEXT_in_singleElement188]; 

                		if ( [(TEXT3!=nil?[TEXT3 getText]:@"nil") length]>0 ) {
                            [self emit1:TEXT3 opcode:Bytecode.INSTR_WRITE_STR s:(TEXT3!=nil?[TEXT3 getText]:@"nil")];
                		}
                        

                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:258:4: NEWLINE // alt
                {
                [self match:input TokenType:NEWLINE Follow:FOLLOW_NEWLINE_in_singleElement197]; 
                [self emit:Bytecode.INSTR_NEWLINE];

                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end singleElement */

/*
 * $ANTLR start compoundElement
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:261:1: compoundElement[ANTLRCommonTree *indent] : ( ifstat[indent] | region[indent] );
 */
- (void) compoundElement:(ANTLRCommonTree *)indent 
{
    /* ruleScopeSetUp */

    @try {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:262:2: ( ifstat[indent] | region[indent] ) //ruleblock
        NSInteger alt4=2;
        NSInteger LA4_0 = [input LA:1];

        if ( (LA4_0==IF) ) {
            alt4=1;
        }
        else if ( (LA4_0==REGION) ) {
            alt4=2;
        }
        else {
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:4 state:0 stream:input];
            @throw nvae;
        }
        switch (alt4) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:262:4: ifstat[indent] // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_ifstat_in_compoundElement211];
                [self ifstat:indent ];

                [self popFollow];



                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:263:4: region[indent] // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_region_in_compoundElement217];
                [self region:indent ];

                [self popFollow];



                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end compoundElement */

/*
 * $ANTLR start exprElement
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:266:1: exprElement : ^( EXPR expr ( exprOptions )? ) ;
 */
- (void) exprElement
{
    /* ruleScopeSetUp */

     short op = Bytecode.INSTR_WRITE; 
    @try {
        ANTLRCommonTree *EXPR4 = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:268:2: ( ^( EXPR expr ( exprOptions )? ) ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:268:4: ^( EXPR expr ( exprOptions )? ) // alt
        {
        EXPR4=(ANTLRCommonTree *)[self match:input TokenType:EXPR Follow:FOLLOW_EXPR_in_exprElement236]; 

            [self match:input TokenType:DOWN Follow:nil]; 
            /* ruleRef */
            [self pushFollow:FOLLOW_expr_in_exprElement238];
            [self expr];

            [self popFollow];


            // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:268:17: ( exprOptions )? // block
            NSInteger alt5=2;
            NSInteger LA5_0 = [input LA:1];

            if ( (LA5_0==OPTIONS) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 : ;
                    // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:268:18: exprOptions // alt
                    {
                    /* ruleRef */
                    [self pushFollow:FOLLOW_exprOptions_in_exprElement241];
                    [self exprOptions];

                    [self popFollow];


                    op=Bytecode.INSTR_WRITE_OPT;

                    }
                    break;

            }


            [self match:input TokenType:UP Follow:nil]; 
        [self emit:EXPR4 opcode:op];

        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end exprElement */

/*
 * $ANTLR start region
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:272:1: region[ANTLRCommonTree *indent] returns [NSString *name] : ^( REGION ID template[$name,nil] ) ;
 */
- (CodeGenerator_region_return *) region:(ANTLRCommonTree *)indent 
{
    /* ruleScopeSetUp */

    CodeGenerator_region_return * retval = [CodeGenerator_region_return newCodeGenerator_region_return];
    [retval setStart:[input LT:1]];


        if ( indent != nil ) [((template_Scope *)[template_stack peek]).cstate indent:indent];

    @try {
        ANTLRCommonTree *ID5 = nil;
        CompiledST * template6 = nil;


        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:279:2: ( ^( REGION ID template[$name,nil] ) ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:279:4: ^( REGION ID template[$name,nil] ) // alt
        {
        [self match:input TokenType:REGION Follow:FOLLOW_REGION_in_region279]; 

            [self match:input TokenType:DOWN Follow:nil]; 
            ID5=(ANTLRCommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_region281]; 
             retval.name = [STGroup getMangledRegionName:outermostTemplateName name:(ID5!=nil?[ID5 getText]:@"")]; /* added to returnSetAttributeRef */
            /* ruleRef */
            [self pushFollow:FOLLOW_template_in_region291];
            template6 = [self template:retval.name  /* added to returnAttributeRef */ arg1:nil];

            [self popFollow];



            			CompiledST *sub = template6;
            	        sub.isRegion = YES;
            	        sub.regionDefType = /* ST.RegionType. */ EMBEDDED;
            	        sub.templateDefStartToken = (STToken *)ID5.token;
            			//sub.dump();
            			[outermostImpl addImplicitlyDefinedTemplate:sub];
                        [self emit2:((ANTLRCommonTree *)retval.start) opcode:Bytecode.INSTR_NEW s:retval.name  /* added to returnAttributeRef */ arg2:0];
                        [self emit:((ANTLRCommonTree *)retval.start) opcode:Bytecode.INSTR_WRITE];
            			

            [self match:input TokenType:UP Follow:nil]; 

        }

        // token+rule list labels


            if ( indent != nil ) [((template_Scope *)[template_stack peek]).cstate emit:Bytecode.INSTR_DEDENT];

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return retval;
}
/* $ANTLR end region */

/*
 * $ANTLR start subtemplate
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:295:1: subtemplate returns [NSString *name, NSInteger nargs] : ^( SUBTEMPLATE ( ^( ARGS ( ID )+ ) )* template[$name,args] ) ;
 */
- (CodeGenerator_subtemplate_return *) subtemplate
{
    /* ruleScopeSetUp */

    CodeGenerator_subtemplate_return * retval = [CodeGenerator_subtemplate_return newCodeGenerator_subtemplate_return];
    [retval setStart:[input LT:1]];


         retval.name = [Compiler getNewSubtemplateName]; /* added to returnSetAttributeRef */
    	AMutableArray *args = [AMutableArray arrayWithCapacity:16];

    @try {
        ANTLRCommonTree *ID7 = nil;
        ANTLRCommonTree *SUBTEMPLATE9 = nil;
        CompiledST * template8 = nil;


        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:300:2: ( ^( SUBTEMPLATE ( ^( ARGS ( ID )+ ) )* template[$name,args] ) ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:300:4: ^( SUBTEMPLATE ( ^( ARGS ( ID )+ ) )* template[$name,args] ) // alt
        {
        SUBTEMPLATE9=(ANTLRCommonTree *)[self match:input TokenType:SUBTEMPLATE Follow:FOLLOW_SUBTEMPLATE_in_subtemplate324]; 

        if ( [input LA:1] == DOWN ) {
            [self match:input TokenType:DOWN Follow:nil]; 
            do {
                NSInteger alt7=2;
                NSInteger LA7_0 = [input LA:1];
                if ( (LA7_0==ARGS) ) {
                    alt7=1;
                }


                switch (alt7) {
                    case 1 : ;
                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:301:5: ^( ARGS ( ID )+ ) // alt
                        {
                        [self match:input TokenType:ARGS Follow:FOLLOW_ARGS_in_subtemplate331]; 

                            [self match:input TokenType:DOWN Follow:nil]; 
                            // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:301:12: ( ID )+ // positiveClosureBlock
                            NSInteger cnt6 = 0;
                            do {
                                NSInteger alt6 = 2;
                                NSInteger LA6_0 = [input LA:1];
                                if ( (LA6_0==ID) ) {
                                    alt6=1;
                                }


                                switch (alt6) {
                                    case 1 : ;
                                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:301:13: ID // alt
                                        {
                                        ID7=(ANTLRCommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_subtemplate334]; 
                                        [args addObject:[FormalArgument newFormalArgument:(ID7!=nil?[ID7 getText]:@"nil")]];

                                        }
                                        break;

                                    default :
                                        if ( cnt6 >= 1 )
                                            goto loop6;
                                        ANTLREarlyExitException *eee =
                                            [ANTLREarlyExitException newException:input decisionNumber:6];
                                        @throw eee;
                                }
                                cnt6++;
                            } while (YES);
                            loop6: ;


                            [self match:input TokenType:UP Follow:nil]; 

                        }
                        break;

                    default :
                        goto loop7;
                }
            } while (YES);
            loop7: ;

             retval.nargs = [args count]; /* added to returnSetAttributeRef */
            /* ruleRef */
            [self pushFollow:FOLLOW_template_in_subtemplate351];
            template8 = [self template:retval.name  /* added to returnAttributeRef */ arg1:args];

            [self popFollow];



            			CompiledST *sub = template8;
            			sub.isAnonSubtemplate = YES;
            			if ( STGroup.debug ) {
            				sub.ast = SUBTEMPLATE9;
            				[sub.ast setUnknownTokenBoundaries];
            				sub.tokens = [input getTokenStream];
            			}
            			//sub.dump();
            			[outermostImpl addImplicitlyDefinedTemplate:sub];
            			

            [self match:input TokenType:UP Follow:nil]; 
        }

        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return retval;
}
/* $ANTLR end subtemplate */

/*
 * $ANTLR start ifstat
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:318:1: ifstat[ANTLRCommonTree *indent] : ^(i= 'if' conditional chunk ( ^(eif= 'elseif' ec= conditional chunk ) )* ( ^(el= 'else' chunk ) )? ) ;
 */
- (void) ifstat:(ANTLRCommonTree *)indent 
{
    /* ruleScopeSetUp */


        /** Tracks address of branch operand (in code block).  It's how
         *  we backpatch forward references when generating code for IFs.
         */
        NSInteger prevBranchOperand = -1;
        /** Branch instruction operands that are forward refs to end of IF.
         *  We need to update them once we see the endif.
         */
        ANTLRIntArray *endRefs = [[ANTLRIntArray newArrayWithLen:16] retain];
        if ( indent!=nil ) [((template_Scope *)[template_stack peek]).cstate indent:indent];

    @try {
        ANTLRCommonTree *i = nil;
        ANTLRCommonTree *eif = nil;
        ANTLRCommonTree *el = nil;
        CodeGenerator_conditional_return * ec = nil;


        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:333:2: ( ^(i= 'if' conditional chunk ( ^(eif= 'elseif' ec= conditional chunk ) )* ( ^(el= 'else' chunk ) )? ) ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:333:4: ^(i= 'if' conditional chunk ( ^(eif= 'elseif' ec= conditional chunk ) )* ( ^(el= 'else' chunk ) )? ) // alt
        {
        i=(ANTLRCommonTree *)[self match:input TokenType:IF Follow:FOLLOW_IF_in_ifstat388]; 

            [self match:input TokenType:DOWN Follow:nil]; 
            /* ruleRef */
            [self pushFollow:FOLLOW_conditional_in_ifstat390];
            [self conditional];

            [self popFollow];



            	        prevBranchOperand = [self address]+1;
            	        [self emit1:i opcode:Bytecode.INSTR_BRF arg:-1]; // write placeholder as branch target
            			
            /* ruleRef */
            [self pushFollow:FOLLOW_chunk_in_ifstat400];
            [self chunk];

            [self popFollow];


            do {
                NSInteger alt8=2;
                NSInteger LA8_0 = [input LA:1];
                if ( (LA8_0==ELSEIF) ) {
                    alt8=1;
                }


                switch (alt8) {
                    case 1 : ;
                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:339:6: ^(eif= 'elseif' ec= conditional chunk ) // alt
                        {
                        eif=(ANTLRCommonTree *)[self match:input TokenType:ELSEIF Follow:FOLLOW_ELSEIF_in_ifstat410]; 


                        				[endRefs addInteger:[self address]+1];
                        				[self emit1:eif opcode:Bytecode.INSTR_BR arg:-1]; // br end
                        				// update previous branch instruction
                                        [self write:prevBranchOperand value:(short)[self address]];
                        				prevBranchOperand = -1;
                        				

                            [self match:input TokenType:DOWN Follow:nil]; 
                            /* ruleRef */
                            [self pushFollow:FOLLOW_conditional_in_ifstat424];
                            ec = [self conditional];

                            [self popFollow];



                            		       	prevBranchOperand = [self address]+1;
                            		       	// write placeholder as branch target
                            		       	[self emit1:(ec!=nil?((ANTLRCommonTree *)ec.start):nil) opcode:Bytecode.INSTR_BRF arg:-1];
                            				
                            /* ruleRef */
                            [self pushFollow:FOLLOW_chunk_in_ifstat436];
                            [self chunk];

                            [self popFollow];



                            [self match:input TokenType:UP Follow:nil]; 

                        }
                        break;

                    default :
                        goto loop8;
                }
            } while (YES);
            loop8: ;

            // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:356:4: ( ^(el= 'else' chunk ) )? // block
            NSInteger alt9=2;
            NSInteger LA9_0 = [input LA:1];

            if ( (LA9_0==ELSE) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 : ;
                    // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:356:6: ^(el= 'else' chunk ) // alt
                    {
                    el=(ANTLRCommonTree *)[self match:input TokenType:ELSE Follow:FOLLOW_ELSE_in_ifstat459]; 


                    					[endRefs addInteger:[self address]+1];
                    					[self emit1:el opcode:Bytecode.INSTR_BR arg:-1]; // br end
                    					// update previous branch instruction
                                        [self write:prevBranchOperand value:(short)[self address]];
                    					prevBranchOperand = -1;
                    					

                    if ( [input LA:1] == DOWN ) {
                        [self match:input TokenType:DOWN Follow:nil]; 
                        /* ruleRef */
                        [self pushFollow:FOLLOW_chunk_in_ifstat473];
                        [self chunk];

                        [self popFollow];



                        [self match:input TokenType:UP Follow:nil]; 
                    }

                    }
                    break;

            }


            [self match:input TokenType:UP Follow:nil]; 

        		if ( prevBranchOperand>=0 ) {
                    [self write:prevBranchOperand value:(short)[self address]];
        		}
                for (int i = 0; i < [endRefs count]; i++) {
                    [self write:[endRefs integerAtIndex:i] value:(short)[self address]];
                }
        		

        }

        // token+rule list labels


        	if ( indent!=nil ) [((template_Scope *)[template_stack peek]).cstate emit:Bytecode.INSTR_DEDENT];

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end ifstat */

/*
 * $ANTLR start conditional
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:378:1: conditional : ( ^( '||' conditional conditional ) | ^( '&&' conditional conditional ) | ^( '!' conditional ) | expr );
 */
- (CodeGenerator_conditional_return *) conditional
{
    /* ruleScopeSetUp */

    CodeGenerator_conditional_return * retval = [CodeGenerator_conditional_return newCodeGenerator_conditional_return];
    [retval setStart:[input LT:1]];

    @try {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:379:2: ( ^( '||' conditional conditional ) | ^( '&&' conditional conditional ) | ^( '!' conditional ) | expr ) //ruleblock
        NSInteger alt10=4;
        switch ([input LA:1]) {
            case OR: ;
                {
                alt10=1;
                }
                break;
            case AND: ;
                {
                alt10=2;
                }
                break;
            case BANG: ;
                {
                alt10=3;
                }
                break;
            case ID: ;
            case STRING: ;
            case T_FALSE: ;
            case T_TRUE: ;
            case PROP: ;
            case PROP_IND: ;
            case INCLUDE: ;
            case INCLUDE_IND: ;
            case EXEC_FUNC: ;
            case INCLUDE_SUPER: ;
            case INCLUDE_SUPER_REGION: ;
            case INCLUDE_REGION: ;
            case TO_STR: ;
            case LIST: ;
            case MAP: ;
            case ZIP: ;
            case SUBTEMPLATE: ;
                {
                alt10=4;
                }
                break;

        default: ;
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:10 state:0 stream:input];
            @throw nvae;
        }

        switch (alt10) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:379:4: ^( '||' conditional conditional ) // alt
                {
                [self match:input TokenType:OR Follow:FOLLOW_OR_in_conditional507]; 

                    [self match:input TokenType:DOWN Follow:nil]; 
                    /* ruleRef */
                    [self pushFollow:FOLLOW_conditional_in_conditional509];
                    [self conditional];

                    [self popFollow];


                    /* ruleRef */
                    [self pushFollow:FOLLOW_conditional_in_conditional511];
                    [self conditional];

                    [self popFollow];



                    [self match:input TokenType:UP Follow:nil]; 
                [self emit:Bytecode.INSTR_OR];

                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:380:4: ^( '&&' conditional conditional ) // alt
                {
                [self match:input TokenType:AND Follow:FOLLOW_AND_in_conditional521]; 

                    [self match:input TokenType:DOWN Follow:nil]; 
                    /* ruleRef */
                    [self pushFollow:FOLLOW_conditional_in_conditional523];
                    [self conditional];

                    [self popFollow];


                    /* ruleRef */
                    [self pushFollow:FOLLOW_conditional_in_conditional525];
                    [self conditional];

                    [self popFollow];



                    [self match:input TokenType:UP Follow:nil]; 
                [self emit:Bytecode.INSTR_AND];

                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:381:4: ^( '!' conditional ) // alt
                {
                [self match:input TokenType:BANG Follow:FOLLOW_BANG_in_conditional535]; 

                    [self match:input TokenType:DOWN Follow:nil]; 
                    /* ruleRef */
                    [self pushFollow:FOLLOW_conditional_in_conditional537];
                    [self conditional];

                    [self popFollow];



                    [self match:input TokenType:UP Follow:nil]; 
                [self emit:Bytecode.INSTR_NOT];

                }
                break;
            case 4 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:382:4: expr // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_expr_in_conditional549];
                [self expr];

                [self popFollow];



                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return retval;
}
/* $ANTLR end conditional */

/*
 * $ANTLR start exprOptions
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:385:1: exprOptions : ^( OPTIONS ( option )* ) ;
 */
- (void) exprOptions
{
    /* ruleScopeSetUp */

    @try {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:385:13: ( ^( OPTIONS ( option )* ) ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:385:15: ^( OPTIONS ( option )* ) // alt
        {
        [self emit:Bytecode.INSTR_OPTIONS];
        [self match:input TokenType:OPTIONS Follow:FOLLOW_OPTIONS_in_exprOptions563]; 

        if ( [input LA:1] == DOWN ) {
            [self match:input TokenType:DOWN Follow:nil]; 
            do {
                NSInteger alt11=2;
                NSInteger LA11_0 = [input LA:1];
                if ( (LA11_0==EQUALS) ) {
                    alt11=1;
                }


                switch (alt11) {
                    case 1 : ;
                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:385:63: option // alt
                        {
                        /* ruleRef */
                        [self pushFollow:FOLLOW_option_in_exprOptions565];
                        [self option];

                        [self popFollow];



                        }
                        break;

                    default :
                        goto loop11;
                }
            } while (YES);
            loop11: ;


            [self match:input TokenType:UP Follow:nil]; 
        }

        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end exprOptions */

/*
 * $ANTLR start option
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:387:1: option : ^( '=' ID expr ) ;
 */
- (void) option
{
    /* ruleScopeSetUp */

    @try {
        ANTLRCommonTree *ID10 = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:387:8: ( ^( '=' ID expr ) ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:387:10: ^( '=' ID expr ) // alt
        {
        [self match:input TokenType:EQUALS Follow:FOLLOW_EQUALS_in_option577]; 

            [self match:input TokenType:DOWN Follow:nil]; 
            ID10=(ANTLRCommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_option579]; 
            /* ruleRef */
            [self pushFollow:FOLLOW_expr_in_option581];
            [self expr];

            [self popFollow];



            [self match:input TokenType:UP Follow:nil]; 
        [self setOption:ID10];

        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end option */

/*
 * $ANTLR start expr
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:389:1: expr : ( ^( ZIP ^( ELEMENTS ( expr )+ ) mapTemplateRef[ne] ) | ^( MAP expr ( mapTemplateRef[1] )+ ) | prop | includeExpr );
 */
- (void) expr
{
    /* ruleScopeSetUp */

    NSInteger nt = 0, ne = 0;
    @try {
        ANTLRCommonTree *ZIP11 = nil;
        ANTLRCommonTree *MAP12 = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:391:2: ( ^( ZIP ^( ELEMENTS ( expr )+ ) mapTemplateRef[ne] ) | ^( MAP expr ( mapTemplateRef[1] )+ ) | prop | includeExpr ) //ruleblock
        NSInteger alt14=4;
        switch ([input LA:1]) {
            case ZIP: ;
                {
                alt14=1;
                }
                break;
            case MAP: ;
                {
                alt14=2;
                }
                break;
            case PROP: ;
            case PROP_IND: ;
                {
                alt14=3;
                }
                break;
            case ID: ;
            case STRING: ;
            case T_FALSE: ;
            case T_TRUE: ;
            case INCLUDE: ;
            case INCLUDE_IND: ;
            case EXEC_FUNC: ;
            case INCLUDE_SUPER: ;
            case INCLUDE_SUPER_REGION: ;
            case INCLUDE_REGION: ;
            case TO_STR: ;
            case LIST: ;
            case SUBTEMPLATE: ;
                {
                alt14=4;
                }
                break;

        default: ;
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:14 state:0 stream:input];
            @throw nvae;
        }

        switch (alt14) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:391:4: ^( ZIP ^( ELEMENTS ( expr )+ ) mapTemplateRef[ne] ) // alt
                {
                ZIP11=(ANTLRCommonTree *)[self match:input TokenType:ZIP Follow:FOLLOW_ZIP_in_expr600]; 

                    [self match:input TokenType:DOWN Follow:nil]; 
                    [self match:input TokenType:ELEMENTS Follow:FOLLOW_ELEMENTS_in_expr603]; 

                        [self match:input TokenType:DOWN Follow:nil]; 
                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:391:21: ( expr )+ // positiveClosureBlock
                        NSInteger cnt12 = 0;
                        do {
                            NSInteger alt12 = 2;
                            NSInteger LA12_0 = [input LA:1];
                            if ( (LA12_0==ID||LA12_0==STRING||(LA12_0>=T_FALSE && LA12_0<=T_TRUE)||(LA12_0>=PROP && LA12_0<=SUBTEMPLATE)) ) {
                                alt12=1;
                            }


                            switch (alt12) {
                                case 1 : ;
                                    // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:391:22: expr // alt
                                    {
                                    /* ruleRef */
                                    [self pushFollow:FOLLOW_expr_in_expr606];
                                    [self expr];

                                    [self popFollow];


                                    ne++;

                                    }
                                    break;

                                default :
                                    if ( cnt12 >= 1 )
                                        goto loop12;
                                    ANTLREarlyExitException *eee =
                                        [ANTLREarlyExitException newException:input decisionNumber:12];
                                    @throw eee;
                            }
                            cnt12++;
                        } while (YES);
                        loop12: ;


                        [self match:input TokenType:UP Follow:nil]; 
                    /* ruleRef */
                    [self pushFollow:FOLLOW_mapTemplateRef_in_expr613];
                    [self mapTemplateRef:ne ];

                    [self popFollow];



                    [self match:input TokenType:UP Follow:nil]; 
                [self emit1:ZIP11 opcode:Bytecode.INSTR_ZIP_MAP arg:ne];

                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:393:4: ^( MAP expr ( mapTemplateRef[1] )+ ) // alt
                {
                MAP12=(ANTLRCommonTree *)[self match:input TokenType:MAP Follow:FOLLOW_MAP_in_expr625]; 

                    [self match:input TokenType:DOWN Follow:nil]; 
                    /* ruleRef */
                    [self pushFollow:FOLLOW_expr_in_expr627];
                    [self expr];

                    [self popFollow];


                    // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:393:15: ( mapTemplateRef[1] )+ // positiveClosureBlock
                    NSInteger cnt13 = 0;
                    do {
                        NSInteger alt13 = 2;
                        NSInteger LA13_0 = [input LA:1];
                        if ( ((LA13_0>=INCLUDE && LA13_0<=INCLUDE_IND)||LA13_0==SUBTEMPLATE) ) {
                            alt13=1;
                        }


                        switch (alt13) {
                            case 1 : ;
                                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:393:16: mapTemplateRef[1] // alt
                                {
                                /* ruleRef */
                                [self pushFollow:FOLLOW_mapTemplateRef_in_expr630];
                                [self mapTemplateRef:1 ];

                                [self popFollow];


                                nt++;

                                }
                                break;

                            default :
                                if ( cnt13 >= 1 )
                                    goto loop13;
                                ANTLREarlyExitException *eee =
                                    [ANTLREarlyExitException newException:input decisionNumber:13];
                                @throw eee;
                        }
                        cnt13++;
                    } while (YES);
                    loop13: ;


                    [self match:input TokenType:UP Follow:nil]; 

                		if ( nt>1 )
                            [self emit1:MAP12 opcode:Bytecode.INSTR_ROT_MAP arg:nt];
                		else
                            [self emit:MAP12 opcode:Bytecode.INSTR_MAP];
                		

                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:400:4: prop // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_prop_in_expr645];
                [self prop];

                [self popFollow];



                }
                break;
            case 4 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:401:4: includeExpr // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_includeExpr_in_expr650];
                [self includeExpr];

                [self popFollow];



                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end expr */

/*
 * $ANTLR start prop
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:404:1: prop : ( ^( PROP expr ID ) | ^( PROP_IND expr expr ) );
 */
- (void) prop
{
    /* ruleScopeSetUp */

    @try {
        ANTLRCommonTree *PROP13 = nil;
        ANTLRCommonTree *ID14 = nil;
        ANTLRCommonTree *PROP_IND15 = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:404:5: ( ^( PROP expr ID ) | ^( PROP_IND expr expr ) ) //ruleblock
        NSInteger alt15=2;
        NSInteger LA15_0 = [input LA:1];

        if ( (LA15_0==PROP) ) {
            alt15=1;
        }
        else if ( (LA15_0==PROP_IND) ) {
            alt15=2;
        }
        else {
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:15 state:0 stream:input];
            @throw nvae;
        }
        switch (alt15) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:404:7: ^( PROP expr ID ) // alt
                {
                PROP13=(ANTLRCommonTree *)[self match:input TokenType:PROP Follow:FOLLOW_PROP_in_prop660]; 

                    [self match:input TokenType:DOWN Follow:nil]; 
                    /* ruleRef */
                    [self pushFollow:FOLLOW_expr_in_prop662];
                    [self expr];

                    [self popFollow];


                    ID14=(ANTLRCommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_prop664]; 

                    [self match:input TokenType:UP Follow:nil]; 
                [self emit1:PROP13 opcode:Bytecode.INSTR_LOAD_PROP s:(ID14!=nil?[ID14 getText]:@"nil")];

                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:405:4: ^( PROP_IND expr expr ) // alt
                {
                PROP_IND15=(ANTLRCommonTree *)[self match:input TokenType:PROP_IND Follow:FOLLOW_PROP_IND_in_prop678]; 

                    [self match:input TokenType:DOWN Follow:nil]; 
                    /* ruleRef */
                    [self pushFollow:FOLLOW_expr_in_prop680];
                    [self expr];

                    [self popFollow];


                    /* ruleRef */
                    [self pushFollow:FOLLOW_expr_in_prop682];
                    [self expr];

                    [self popFollow];



                    [self match:input TokenType:UP Follow:nil]; 
                [self emit:PROP_IND15 opcode:Bytecode.INSTR_LOAD_PROP_IND];

                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end prop */

/*
 * $ANTLR start mapTemplateRef
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:408:1: mapTemplateRef[NSInteger num_exprs] : ( ^( INCLUDE ID args ) | subtemplate | ^( INCLUDE_IND expr args ) );
 */
- (void) mapTemplateRef:(NSInteger)num_exprs 
{
    /* ruleScopeSetUp */

    @try {
        ANTLRCommonTree *INCLUDE16 = nil;
        ANTLRCommonTree *ID18 = nil;
        ANTLRCommonTree *INCLUDE_IND20 = nil;
        CodeGenerator_args_return * args17 = nil;

        CodeGenerator_subtemplate_return * subtemplate19 = nil;

        CodeGenerator_args_return * args21 = nil;


        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:409:2: ( ^( INCLUDE ID args ) | subtemplate | ^( INCLUDE_IND expr args ) ) //ruleblock
        NSInteger alt16=3;
        switch ([input LA:1]) {
            case INCLUDE: ;
                {
                alt16=1;
                }
                break;
            case SUBTEMPLATE: ;
                {
                alt16=2;
                }
                break;
            case INCLUDE_IND: ;
                {
                alt16=3;
                }
                break;

        default: ;
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:16 state:0 stream:input];
            @throw nvae;
        }

        switch (alt16) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:409:4: ^( INCLUDE ID args ) // alt
                {
                INCLUDE16=(ANTLRCommonTree *)[self match:input TokenType:INCLUDE Follow:FOLLOW_INCLUDE_in_mapTemplateRef702]; 

                    [self match:input TokenType:DOWN Follow:nil]; 
                    ID18=(ANTLRCommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_mapTemplateRef704]; 
                    for (NSInteger i=1; i<=num_exprs; i++) [self emit:INCLUDE16 opcode:Bytecode.INSTR_NULL];
                    /* ruleRef */
                    [self pushFollow:FOLLOW_args_in_mapTemplateRef714];
                    args17 = [self args];

                    [self popFollow];



                    [self match:input TokenType:UP Follow:nil]; 

                		if ( (args17!=nil?args17.namedArgs:NO) )
                			[self emit1:INCLUDE16 opcode:Bytecode.INSTR_NEW_BOX_ARGS s:(ID18!=nil?[ID18 getText]:@"nil")];
                		else
                			[self emit2:INCLUDE16 opcode:Bytecode.INSTR_NEW s:((ID18!=nil)?[ID18 getText]:@"nil") arg2:(((args17!=nil)?args17.n:0)+num_exprs)];
                		

                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:419:4: subtemplate // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_subtemplate_in_mapTemplateRef728];
                subtemplate19 = [self subtemplate];

                [self popFollow];



                		if ( (subtemplate19!=nil?subtemplate19.nargs:0) != num_exprs ) {
                            [errMgr compileTimeError:ANON_ARGUMENT_MISMATCH
                                       templateToken:templateToken
                                                   t:((subtemplate19!=nil)?((ANTLRCommonTree *)subtemplate19.start):nil).token
                                                 arg:((subtemplate19!=nil)?subtemplate19.nargs:0)
                                                arg2:num_exprs];
                		}
                		for (NSInteger i=1; i<=num_exprs; i++) [self emit:((subtemplate19!=nil)?((ANTLRCommonTree *)subtemplate19.start):nil) opcode:Bytecode.INSTR_NULL];
                        [self emit2:(subtemplate19!=nil?((ANTLRCommonTree *)subtemplate19.start):nil) opcode:Bytecode.INSTR_NEW s:(subtemplate19!=nil?subtemplate19.name:nil) arg2:num_exprs];
                		

                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:432:4: ^( INCLUDE_IND expr args ) // alt
                {
                INCLUDE_IND20=(ANTLRCommonTree *)[self match:input TokenType:INCLUDE_IND Follow:FOLLOW_INCLUDE_IND_in_mapTemplateRef740]; 

                    [self match:input TokenType:DOWN Follow:nil]; 
                    /* ruleRef */
                    [self pushFollow:FOLLOW_expr_in_mapTemplateRef742];
                    [self expr];

                    [self popFollow];



                    			[self emit:INCLUDE_IND20 opcode:Bytecode.INSTR_TOSTR];
                    			for (NSInteger i=1; i<=num_exprs; i++) [self emit:INCLUDE_IND20 opcode:Bytecode.INSTR_NULL];
                    			
                    /* ruleRef */
                    [self pushFollow:FOLLOW_args_in_mapTemplateRef752];
                    args21 = [self args];

                    [self popFollow];


                    [self emit1:INCLUDE_IND20 opcode:Bytecode.INSTR_NEW_IND arg:((args21!=nil?args21.n:0)+num_exprs)];

                    [self match:input TokenType:UP Follow:nil]; 

                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end mapTemplateRef */

/*
 * $ANTLR start includeExpr
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:442:1: includeExpr : ( ^( EXEC_FUNC ID ( expr )? ) | ^( INCLUDE ID args ) | ^( INCLUDE_SUPER ID args ) | ^( INCLUDE_REGION ID ) | ^( INCLUDE_SUPER_REGION ID ) | primary );
 */
- (void) includeExpr
{
    /* ruleScopeSetUp */

    @try {
        ANTLRCommonTree *ID22 = nil;
        ANTLRCommonTree *INCLUDE24 = nil;
        ANTLRCommonTree *ID25 = nil;
        ANTLRCommonTree *INCLUDE_SUPER27 = nil;
        ANTLRCommonTree *ID28 = nil;
        ANTLRCommonTree *ID29 = nil;
        ANTLRCommonTree *INCLUDE_REGION30 = nil;
        ANTLRCommonTree *ID31 = nil;
        ANTLRCommonTree *INCLUDE_SUPER_REGION32 = nil;
        CodeGenerator_args_return * args23 = nil;

        CodeGenerator_args_return * args26 = nil;


        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:443:2: ( ^( EXEC_FUNC ID ( expr )? ) | ^( INCLUDE ID args ) | ^( INCLUDE_SUPER ID args ) | ^( INCLUDE_REGION ID ) | ^( INCLUDE_SUPER_REGION ID ) | primary ) //ruleblock
        NSInteger alt18=6;
        switch ([input LA:1]) {
            case EXEC_FUNC: ;
                {
                alt18=1;
                }
                break;
            case INCLUDE: ;
                {
                alt18=2;
                }
                break;
            case INCLUDE_SUPER: ;
                {
                alt18=3;
                }
                break;
            case INCLUDE_REGION: ;
                {
                alt18=4;
                }
                break;
            case INCLUDE_SUPER_REGION: ;
                {
                alt18=5;
                }
                break;
            case ID: ;
            case STRING: ;
            case T_FALSE: ;
            case T_TRUE: ;
            case INCLUDE_IND: ;
            case TO_STR: ;
            case LIST: ;
            case SUBTEMPLATE: ;
                {
                alt18=6;
                }
                break;

        default: ;
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:18 state:0 stream:input];
            @throw nvae;
        }

        switch (alt18) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:443:4: ^( EXEC_FUNC ID ( expr )? ) // alt
                {
                [self match:input TokenType:EXEC_FUNC Follow:FOLLOW_EXEC_FUNC_in_includeExpr774]; 

                    [self match:input TokenType:DOWN Follow:nil]; 
                    ID22=(ANTLRCommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_includeExpr776]; 
                    // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:443:19: ( expr )? // block
                    NSInteger alt17=2;
                    NSInteger LA17_0 = [input LA:1];

                    if ( (LA17_0==ID||LA17_0==STRING||(LA17_0>=T_FALSE && LA17_0<=T_TRUE)||(LA17_0>=PROP && LA17_0<=SUBTEMPLATE)) ) {
                        alt17=1;
                    }
                    switch (alt17) {
                        case 1 : ;
                            // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:443:19: expr // alt
                            {
                            /* ruleRef */
                            [self pushFollow:FOLLOW_expr_in_includeExpr778];
                            [self expr];

                            [self popFollow];



                            }
                            break;

                    }


                    [self match:input TokenType:UP Follow:nil]; 
                [self func:ID22];

                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:444:4: ^( INCLUDE ID args ) // alt
                {
                INCLUDE24=(ANTLRCommonTree *)[self match:input TokenType:INCLUDE Follow:FOLLOW_INCLUDE_in_includeExpr789]; 

                    [self match:input TokenType:DOWN Follow:nil]; 
                    ID25=(ANTLRCommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_includeExpr791]; 
                    /* ruleRef */
                    [self pushFollow:FOLLOW_args_in_includeExpr793];
                    args23 = [self args];

                    [self popFollow];



                    [self match:input TokenType:UP Follow:nil]; 

                		if ( (args23!=nil?args23.namedArgs:NO) ) [self emit1:INCLUDE24 opcode:Bytecode.INSTR_NEW_BOX_ARGS s:(ID25!=nil?[ID25 getText]:@"nil")];
                		else [self emit2:INCLUDE24 opcode:Bytecode.INSTR_NEW s:(ID25!=nil?[ID25 getText]:@"nil") arg2:(args23!=nil?args23.n:0)];
                		

                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:449:4: ^( INCLUDE_SUPER ID args ) // alt
                {
                INCLUDE_SUPER27=(ANTLRCommonTree *)[self match:input TokenType:INCLUDE_SUPER Follow:FOLLOW_INCLUDE_SUPER_in_includeExpr804]; 

                    [self match:input TokenType:DOWN Follow:nil]; 
                    ID28=(ANTLRCommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_includeExpr806]; 
                    /* ruleRef */
                    [self pushFollow:FOLLOW_args_in_includeExpr808];
                    args26 = [self args];

                    [self popFollow];



                    [self match:input TokenType:UP Follow:nil]; 

                		if ( (args26!=nil?args26.namedArgs:NO) ) [self emit1:INCLUDE_SUPER27 opcode:Bytecode.INSTR_SUPER_NEW_BOX_ARGS s:(ID28!=nil?[ID28 getText]:@"nil")];
                		else [self emit2:INCLUDE_SUPER27 opcode:Bytecode.INSTR_SUPER_NEW s:(ID28!=nil?[ID28 getText]:@"nil") arg2:(args26!=nil?args26.n:0)];
                		

                }
                break;
            case 4 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:454:4: ^( INCLUDE_REGION ID ) // alt
                {
                INCLUDE_REGION30=(ANTLRCommonTree *)[self match:input TokenType:INCLUDE_REGION Follow:FOLLOW_INCLUDE_REGION_in_includeExpr819]; 

                    [self match:input TokenType:DOWN Follow:nil]; 
                    ID29=(ANTLRCommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_includeExpr821]; 

                    [self match:input TokenType:UP Follow:nil]; 

                									CompiledST *impl =
                										[Compiler defineBlankRegion:outermostImpl name:ID29.token.text];
                									//impl.dump();
                									[self emit2:INCLUDE_REGION30 opcode:Bytecode.INSTR_NEW s:impl.name arg2:0];
                									

                }
                break;
            case 5 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:460:4: ^( INCLUDE_SUPER_REGION ID ) // alt
                {
                INCLUDE_SUPER_REGION32=(ANTLRCommonTree *)[self match:input TokenType:INCLUDE_SUPER_REGION Follow:FOLLOW_INCLUDE_SUPER_REGION_in_includeExpr831]; 

                    [self match:input TokenType:DOWN Follow:nil]; 
                    ID31=(ANTLRCommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_includeExpr833]; 

                    [self match:input TokenType:UP Follow:nil]; 

                									CompiledST *impl =
                										[Compiler defineBlankRegion:outermostImpl name:[ID31.token getText]];
                									//impl.dump();
                									[self emit2:INCLUDE_SUPER_REGION32 opcode:Bytecode.INSTR_SUPER_NEW s:impl.name arg2:0];
                									

                }
                break;
            case 6 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:466:4: primary // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_primary_in_includeExpr841];
                [self primary];

                [self popFollow];



                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end includeExpr */

/*
 * $ANTLR start primary
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:469:1: primary : ( ID | STRING | T_TRUE | T_FALSE | subtemplate | list | ^( INCLUDE_IND expr args ) | ^( TO_STR expr ) );
 */
- (CodeGenerator_primary_return *) primary
{
    /* ruleScopeSetUp */

    CodeGenerator_primary_return * retval = [CodeGenerator_primary_return newCodeGenerator_primary_return];
    [retval setStart:[input LT:1]];

    @try {
        ANTLRCommonTree *ID33 = nil;
        ANTLRCommonTree *STRING34 = nil;
        ANTLRCommonTree *T_TRUE35 = nil;
        ANTLRCommonTree *T_FALSE36 = nil;
        ANTLRCommonTree *INCLUDE_IND38 = nil;
        ANTLRCommonTree *TO_STR40 = nil;
        CodeGenerator_subtemplate_return * subtemplate37 = nil;

        CodeGenerator_args_return * args39 = nil;


        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:470:2: ( ID | STRING | T_TRUE | T_FALSE | subtemplate | list | ^( INCLUDE_IND expr args ) | ^( TO_STR expr ) ) //ruleblock
        NSInteger alt19=8;
        switch ([input LA:1]) {
            case ID: ;
                {
                alt19=1;
                }
                break;
            case STRING: ;
                {
                alt19=2;
                }
                break;
            case T_TRUE: ;
                {
                alt19=3;
                }
                break;
            case T_FALSE: ;
                {
                alt19=4;
                }
                break;
            case SUBTEMPLATE: ;
                {
                alt19=5;
                }
                break;
            case LIST: ;
                {
                alt19=6;
                }
                break;
            case INCLUDE_IND: ;
                {
                alt19=7;
                }
                break;
            case TO_STR: ;
                {
                alt19=8;
                }
                break;

        default: ;
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:19 state:0 stream:input];
            @throw nvae;
        }

        switch (alt19) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:470:4: ID // alt
                {
                ID33=(ANTLRCommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_primary852]; 
                [self refAttr:ID33];

                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:471:4: STRING // alt
                {
                STRING34=(ANTLRCommonTree *)[self match:input TokenType:STRING Follow:FOLLOW_STRING_in_primary862]; 
                [self emit1:STRING34 opcode:Bytecode.INSTR_LOAD_STR s:[Misc strip:(STRING34!=nil?[STRING34 getText]:@"nil") n:1]];

                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:472:4: T_TRUE // alt
                {
                T_TRUE35=(ANTLRCommonTree *)[self match:input TokenType:T_TRUE Follow:FOLLOW_T_TRUE_in_primary872]; 
                [self emit:T_TRUE35 opcode:Bytecode.INSTR_TRUE];

                }
                break;
            case 4 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:473:4: T_FALSE // alt
                {
                T_FALSE36=(ANTLRCommonTree *)[self match:input TokenType:T_FALSE Follow:FOLLOW_T_FALSE_in_primary881]; 
                [self emit:T_FALSE36 opcode:Bytecode.INSTR_FALSE];

                }
                break;
            case 5 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:474:4: subtemplate // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_subtemplate_in_primary890];
                subtemplate37 = [self subtemplate];

                [self popFollow];


                [self emit2:((ANTLRCommonTree *)retval.start) opcode:Bytecode.INSTR_NEW s:(subtemplate37!=nil?subtemplate37.name:nil) arg2:0];

                }
                break;
            case 6 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:476:4: list // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_list_in_primary917];
                [self list];

                [self popFollow];



                }
                break;
            case 7 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:477:4: ^( INCLUDE_IND expr args ) // alt
                {
                INCLUDE_IND38=(ANTLRCommonTree *)[self match:input TokenType:INCLUDE_IND Follow:FOLLOW_INCLUDE_IND_in_primary924]; 

                    [self match:input TokenType:DOWN Follow:nil]; 
                    /* ruleRef */
                    [self pushFollow:FOLLOW_expr_in_primary929];
                    [self expr];

                    [self popFollow];


                    [self emit:INCLUDE_IND38 opcode:Bytecode.INSTR_TOSTR];
                    /* ruleRef */
                    [self pushFollow:FOLLOW_args_in_primary938];
                    args39 = [self args];

                    [self popFollow];


                    [self emit1:INCLUDE_IND38 opcode:Bytecode.INSTR_NEW_IND arg:((args39!=nil)?args39.n:0)];

                    [self match:input TokenType:UP Follow:nil]; 

                }
                break;
            case 8 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:481:4: ^( TO_STR expr ) // alt
                {
                TO_STR40=(ANTLRCommonTree *)[self match:input TokenType:TO_STR Follow:FOLLOW_TO_STR_in_primary952]; 

                    [self match:input TokenType:DOWN Follow:nil]; 
                    /* ruleRef */
                    [self pushFollow:FOLLOW_expr_in_primary954];
                    [self expr];

                    [self popFollow];



                    [self match:input TokenType:UP Follow:nil]; 
                [self emit:TO_STR40 opcode:Bytecode.INSTR_TOSTR];

                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return retval;
}
/* $ANTLR end primary */

/*
 * $ANTLR start arg
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:484:1: arg : expr ;
 */
- (void) arg
{
    /* ruleScopeSetUp */

    @try {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:484:5: ( expr ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:484:7: expr // alt
        {
        /* ruleRef */
        [self pushFollow:FOLLOW_expr_in_arg967];
        [self expr];

        [self popFollow];



        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end arg */

/*
 * $ANTLR start args
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:486:1: args returns [NSInteger n=0, BOOL namedArgs=NO] : ( ( arg )+ | ( ^(eq= '=' ID expr ) )+ | );
 */
- (CodeGenerator_args_return *) args
{
    /* ruleScopeSetUp */

    CodeGenerator_args_return * retval = [CodeGenerator_args_return newCodeGenerator_args_return];
    [retval setStart:[input LT:1]];

    @try {
        ANTLRCommonTree *eq = nil;
        ANTLRCommonTree *ID41 = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:487:2: ( ( arg )+ | ( ^(eq= '=' ID expr ) )+ | ) //ruleblock
        NSInteger alt22=3;
        switch ([input LA:1]) {
            case ID: ;
            case STRING: ;
            case T_FALSE: ;
            case T_TRUE: ;
            case PROP: ;
            case PROP_IND: ;
            case INCLUDE: ;
            case INCLUDE_IND: ;
            case EXEC_FUNC: ;
            case INCLUDE_SUPER: ;
            case INCLUDE_SUPER_REGION: ;
            case INCLUDE_REGION: ;
            case TO_STR: ;
            case LIST: ;
            case MAP: ;
            case ZIP: ;
            case SUBTEMPLATE: ;
                {
                alt22=1;
                }
                break;
            case EQUALS: ;
                {
                alt22=2;
                }
                break;
            case UP: ;
                {
                alt22=3;
                }
                break;

        default: ;
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:22 state:0 stream:input];
            @throw nvae;
        }

        switch (alt22) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:487:4: ( arg )+ // alt
                {
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:487:4: ( arg )+ // positiveClosureBlock
                NSInteger cnt20 = 0;
                do {
                    NSInteger alt20 = 2;
                    NSInteger LA20_0 = [input LA:1];
                    if ( (LA20_0==ID||LA20_0==STRING||(LA20_0>=T_FALSE && LA20_0<=T_TRUE)||(LA20_0>=PROP && LA20_0<=SUBTEMPLATE)) ) {
                        alt20=1;
                    }


                    switch (alt20) {
                        case 1 : ;
                            // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:487:6: arg // alt
                            {
                            /* ruleRef */
                            [self pushFollow:FOLLOW_arg_in_args983];
                            [self arg];

                            [self popFollow];


                            retval.n  /* added to returnAttributeRef */++;

                            }
                            break;

                        default :
                            if ( cnt20 >= 1 )
                                goto loop20;
                            ANTLREarlyExitException *eee =
                                [ANTLREarlyExitException newException:input decisionNumber:20];
                            @throw eee;
                    }
                    cnt20++;
                } while (YES);
                loop20: ;


                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:488:4: ( ^(eq= '=' ID expr ) )+ // alt
                {
                [self emit:((ANTLRCommonTree *)retval.start) opcode:Bytecode.INSTR_ARGS];  retval.namedArgs =YES; /* added to returnSetAttributeRef */
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:489:3: ( ^(eq= '=' ID expr ) )+ // positiveClosureBlock
                NSInteger cnt21 = 0;
                do {
                    NSInteger alt21 = 2;
                    NSInteger LA21_0 = [input LA:1];
                    if ( (LA21_0==EQUALS) ) {
                        alt21=1;
                    }


                    switch (alt21) {
                        case 1 : ;
                            // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:489:5: ^(eq= '=' ID expr ) // alt
                            {
                            eq=(ANTLRCommonTree *)[self match:input TokenType:EQUALS Follow:FOLLOW_EQUALS_in_args1002]; 

                                [self match:input TokenType:DOWN Follow:nil]; 
                                ID41=(ANTLRCommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_args1004]; 
                                /* ruleRef */
                                [self pushFollow:FOLLOW_expr_in_args1006];
                                [self expr];

                                [self popFollow];



                                [self match:input TokenType:UP Follow:nil]; 
                            retval.n  /* added to returnAttributeRef */++; [self emit1:eq opcode:Bytecode.INSTR_STORE_ARG arg:[self defineString:(ID41!=nil?[ID41 getText]:@"nil")]];

                            }
                            break;

                        default :
                            if ( cnt21 >= 1 )
                                goto loop21;
                            ANTLREarlyExitException *eee =
                                [ANTLREarlyExitException newException:input decisionNumber:21];
                            @throw eee;
                    }
                    cnt21++;
                } while (YES);
                loop21: ;


                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:493:3:  // alt
                {
                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return retval;
}
/* $ANTLR end args */

/*
 * $ANTLR start list
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:495:1: list : ^( LIST ( listElement )* ) ;
 */
- (void) list
{
    /* ruleScopeSetUp */

    @try {
        CodeGenerator_listElement_return * listElement42 = nil;


        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:495:5: ( ^( LIST ( listElement )* ) ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:495:7: ^( LIST ( listElement )* ) // alt
        {
        [self emit:Bytecode.INSTR_LIST];
        [self match:input TokenType:LIST Follow:FOLLOW_LIST_in_list1035]; 

        if ( [input LA:1] == DOWN ) {
            [self match:input TokenType:DOWN Follow:nil]; 
            do {
                NSInteger alt23=2;
                NSInteger LA23_0 = [input LA:1];
                if ( (LA23_0==ID||LA23_0==STRING||(LA23_0>=T_FALSE && LA23_0<=T_TRUE)||(LA23_0>=PROP && LA23_0<=SUBTEMPLATE)||LA23_0==TNULL) ) {
                    alt23=1;
                }


                switch (alt23) {
                    case 1 : ;
                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:496:11: listElement // alt
                        {
                        /* ruleRef */
                        [self pushFollow:FOLLOW_listElement_in_list1038];
                        listElement42 = [self listElement];

                        [self popFollow];


                        [self emit:(listElement42!=nil?((ANTLRCommonTree *)listElement42.start):nil) opcode:Bytecode.INSTR_ADD];

                        }
                        break;

                    default :
                        goto loop23;
                }
            } while (YES);
            loop23: ;


            [self match:input TokenType:UP Follow:nil]; 
        }

        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end list */

/*
 * $ANTLR start listElement
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:499:1: listElement : ( expr | TNULL );
 */
- (CodeGenerator_listElement_return *) listElement
{
    /* ruleScopeSetUp */

    CodeGenerator_listElement_return * retval = [CodeGenerator_listElement_return newCodeGenerator_listElement_return];
    [retval setStart:[input LT:1]];

    @try {
        ANTLRCommonTree *TNULL43 = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:499:13: ( expr | TNULL ) //ruleblock
        NSInteger alt24=2;
        NSInteger LA24_0 = [input LA:1];

        if ( (LA24_0==ID||LA24_0==STRING||(LA24_0>=T_FALSE && LA24_0<=T_TRUE)||(LA24_0>=PROP && LA24_0<=SUBTEMPLATE)) ) {
            alt24=1;
        }
        else if ( (LA24_0==TNULL) ) {
            alt24=2;
        }
        else {
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:24 state:0 stream:input];
            @throw nvae;
        }
        switch (alt24) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:499:15: expr // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_expr_in_listElement1054];
                [self expr];

                [self popFollow];



                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:499:22: TNULL // alt
                {
                TNULL43=(ANTLRCommonTree *)[self match:input TokenType:TNULL Follow:FOLLOW_TNULL_in_listElement1058]; 
                [self emit:TNULL43 opcode:Bytecode.INSTR_NULL];

                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return retval;
}
/* $ANTLR end listElement */
/* ObjC end rules */

@end /* end of CodeGenerator implementation line 692 */
