/** \file
 *  This OBJC source file was generated by $ANTLR version 3.3.1-SNAPSHOT Feb 24, 2011 11:25:29
 *
 *     -  From the grammar source file : /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g
 *     -                            On : 2011-02-24 11:32:43
 *     -                for the parser : GroupParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * ObjC language generator and runtime by Alan Condit, acondit|hereisanat|ipns|dotgoeshere|com.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2010 Alan Condit
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// $ANTLR 3.3.1-SNAPSHOT Feb 24, 2011 11:25:29 /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g 2011-02-24 11:32:43


/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#import "GroupParser.h"
/* ----------------------------------------- */


/* ============================================================================= */
/* =============================================================================
 * Start of recognizer
 */

#pragma mark Bitsets
static ANTLRBitSet *FOLLOW_38_in_group113;
static const unsigned long long FOLLOW_38_in_group113_data[] = { 0x0000000004000000LL};
static ANTLRBitSet *FOLLOW_STRING_in_group115;
static const unsigned long long FOLLOW_STRING_in_group115_data[] = { 0x0000004202000000LL};
static ANTLRBitSet *FOLLOW_38_in_group122;
static const unsigned long long FOLLOW_38_in_group122_data[] = { 0x0000000002000000LL};
static ANTLRBitSet *FOLLOW_ID_in_group133;
static const unsigned long long FOLLOW_ID_in_group133_data[] = { 0x0000004202080000LL};
static ANTLRBitSet *FOLLOW_DOT_in_group136;
static const unsigned long long FOLLOW_DOT_in_group136_data[] = { 0x0000000002000000LL};
static ANTLRBitSet *FOLLOW_ID_in_group138;
static const unsigned long long FOLLOW_ID_in_group138_data[] = { 0x0000004202080000LL};
static ANTLRBitSet *FOLLOW_def_in_group156;
static const unsigned long long FOLLOW_def_in_group156_data[] = { 0x0000000202000002LL};
static ANTLRBitSet *FOLLOW_ID_in_groupName187;
static const unsigned long long FOLLOW_ID_in_groupName187_data[] = { 0x0000000000080002LL};
static ANTLRBitSet *FOLLOW_DOT_in_groupName192;
static const unsigned long long FOLLOW_DOT_in_groupName192_data[] = { 0x0000000002000000LL};
static ANTLRBitSet *FOLLOW_ID_in_groupName196;
static const unsigned long long FOLLOW_ID_in_groupName196_data[] = { 0x0000000000080002LL};
static ANTLRBitSet *FOLLOW_templateDef_in_def213;
static const unsigned long long FOLLOW_templateDef_in_def213_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_dictDef_in_def218;
static const unsigned long long FOLLOW_dictDef_in_def218_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_AT_in_templateDef242;
static const unsigned long long FOLLOW_AT_in_templateDef242_data[] = { 0x0000000002000000LL};
static ANTLRBitSet *FOLLOW_ID_in_templateDef246;
static const unsigned long long FOLLOW_ID_in_templateDef246_data[] = { 0x0000000000080000LL};
static ANTLRBitSet *FOLLOW_DOT_in_templateDef248;
static const unsigned long long FOLLOW_DOT_in_templateDef248_data[] = { 0x0000000002000000LL};
static ANTLRBitSet *FOLLOW_ID_in_templateDef252;
static const unsigned long long FOLLOW_ID_in_templateDef252_data[] = { 0x0000000000004000LL};
static ANTLRBitSet *FOLLOW_LPAREN_in_templateDef254;
static const unsigned long long FOLLOW_LPAREN_in_templateDef254_data[] = { 0x0000000000008000LL};
static ANTLRBitSet *FOLLOW_RPAREN_in_templateDef256;
static const unsigned long long FOLLOW_RPAREN_in_templateDef256_data[] = { 0x0000008000000000LL};
static ANTLRBitSet *FOLLOW_ID_in_templateDef264;
static const unsigned long long FOLLOW_ID_in_templateDef264_data[] = { 0x0000000000004000LL};
static ANTLRBitSet *FOLLOW_LPAREN_in_templateDef266;
static const unsigned long long FOLLOW_LPAREN_in_templateDef266_data[] = { 0x0000000002008000LL};
static ANTLRBitSet *FOLLOW_formalArgs_in_templateDef268;
static const unsigned long long FOLLOW_formalArgs_in_templateDef268_data[] = { 0x0000000000008000LL};
static ANTLRBitSet *FOLLOW_RPAREN_in_templateDef270;
static const unsigned long long FOLLOW_RPAREN_in_templateDef270_data[] = { 0x0000008000000000LL};
static ANTLRBitSet *FOLLOW_39_in_templateDef281;
static const unsigned long long FOLLOW_39_in_templateDef281_data[] = { 0x0000000804000002LL};
static ANTLRBitSet *FOLLOW_STRING_in_templateDef297;
static const unsigned long long FOLLOW_STRING_in_templateDef297_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_BIGSTRING_in_templateDef312;
static const unsigned long long FOLLOW_BIGSTRING_in_templateDef312_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ID_in_templateDef347;
static const unsigned long long FOLLOW_ID_in_templateDef347_data[] = { 0x0000008000000000LL};
static ANTLRBitSet *FOLLOW_39_in_templateDef349;
static const unsigned long long FOLLOW_39_in_templateDef349_data[] = { 0x0000000002000000LL};
static ANTLRBitSet *FOLLOW_ID_in_templateDef353;
static const unsigned long long FOLLOW_ID_in_templateDef353_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_formalArg_in_formalArgs378;
static const unsigned long long FOLLOW_formalArg_in_formalArgs378_data[] = { 0x0000000000040002LL};
static ANTLRBitSet *FOLLOW_COMMA_in_formalArgs388;
static const unsigned long long FOLLOW_COMMA_in_formalArgs388_data[] = { 0x0000000002000000LL};
static ANTLRBitSet *FOLLOW_formalArg_in_formalArgs390;
static const unsigned long long FOLLOW_formalArg_in_formalArgs390_data[] = { 0x0000000000040002LL};
static ANTLRBitSet *FOLLOW_COMMA_in_formalArgs403;
static const unsigned long long FOLLOW_COMMA_in_formalArgs403_data[] = { 0x0000000002000000LL};
static ANTLRBitSet *FOLLOW_formalArgWithDefaultValue_in_formalArgs405;
static const unsigned long long FOLLOW_formalArgWithDefaultValue_in_formalArgs405_data[] = { 0x0000000000040002LL};
static ANTLRBitSet *FOLLOW_formalArgWithDefaultValue_in_formalArgs417;
static const unsigned long long FOLLOW_formalArgWithDefaultValue_in_formalArgs417_data[] = { 0x0000000000040002LL};
static ANTLRBitSet *FOLLOW_COMMA_in_formalArgs422;
static const unsigned long long FOLLOW_COMMA_in_formalArgs422_data[] = { 0x0000000002000000LL};
static ANTLRBitSet *FOLLOW_formalArgWithDefaultValue_in_formalArgs424;
static const unsigned long long FOLLOW_formalArgWithDefaultValue_in_formalArgs424_data[] = { 0x0000000000040002LL};
static ANTLRBitSet *FOLLOW_ID_in_formalArg446;
static const unsigned long long FOLLOW_ID_in_formalArg446_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ID_in_formalArgWithDefaultValue465;
static const unsigned long long FOLLOW_ID_in_formalArgWithDefaultValue465_data[] = { 0x0000000000001000LL};
static ANTLRBitSet *FOLLOW_EQUALS_in_formalArgWithDefaultValue471;
static const unsigned long long FOLLOW_EQUALS_in_formalArgWithDefaultValue471_data[] = { 0x0000000004000000LL};
static ANTLRBitSet *FOLLOW_STRING_in_formalArgWithDefaultValue475;
static const unsigned long long FOLLOW_STRING_in_formalArgWithDefaultValue475_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_EQUALS_in_formalArgWithDefaultValue481;
static const unsigned long long FOLLOW_EQUALS_in_formalArgWithDefaultValue481_data[] = { 0x0000000000100000LL};
static ANTLRBitSet *FOLLOW_LCURLY_in_formalArgWithDefaultValue485;
static const unsigned long long FOLLOW_LCURLY_in_formalArgWithDefaultValue485_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ID_in_dictDef510;
static const unsigned long long FOLLOW_ID_in_dictDef510_data[] = { 0x0000008000000000LL};
static ANTLRBitSet *FOLLOW_39_in_dictDef512;
static const unsigned long long FOLLOW_39_in_dictDef512_data[] = { 0x0000000000010000LL};
static ANTLRBitSet *FOLLOW_dict_in_dictDef514;
static const unsigned long long FOLLOW_dict_in_dictDef514_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_LBRACK_in_dict546;
static const unsigned long long FOLLOW_LBRACK_in_dict546_data[] = { 0x0000010004000000LL};
static ANTLRBitSet *FOLLOW_dictPairs_in_dict548;
static const unsigned long long FOLLOW_dictPairs_in_dict548_data[] = { 0x0000000000020000LL};
static ANTLRBitSet *FOLLOW_RBRACK_in_dict551;
static const unsigned long long FOLLOW_RBRACK_in_dict551_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_keyValuePair_in_dictPairs566;
static const unsigned long long FOLLOW_keyValuePair_in_dictPairs566_data[] = { 0x0000000000040002LL};
static ANTLRBitSet *FOLLOW_COMMA_in_dictPairs575;
static const unsigned long long FOLLOW_COMMA_in_dictPairs575_data[] = { 0x0000000004000000LL};
static ANTLRBitSet *FOLLOW_keyValuePair_in_dictPairs577;
static const unsigned long long FOLLOW_keyValuePair_in_dictPairs577_data[] = { 0x0000000000040002LL};
static ANTLRBitSet *FOLLOW_COMMA_in_dictPairs583;
static const unsigned long long FOLLOW_COMMA_in_dictPairs583_data[] = { 0x0000010004000000LL};
static ANTLRBitSet *FOLLOW_defaultValuePair_in_dictPairs585;
static const unsigned long long FOLLOW_defaultValuePair_in_dictPairs585_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_defaultValuePair_in_dictPairs596;
static const unsigned long long FOLLOW_defaultValuePair_in_dictPairs596_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_40_in_defaultValuePair619;
static const unsigned long long FOLLOW_40_in_defaultValuePair619_data[] = { 0x0000000000002000LL};
static ANTLRBitSet *FOLLOW_COLON_in_defaultValuePair621;
static const unsigned long long FOLLOW_COLON_in_defaultValuePair621_data[] = { 0x0000000806100000LL};
static ANTLRBitSet *FOLLOW_keyValue_in_defaultValuePair623;
static const unsigned long long FOLLOW_keyValue_in_defaultValuePair623_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_STRING_in_keyValuePair637;
static const unsigned long long FOLLOW_STRING_in_keyValuePair637_data[] = { 0x0000000000002000LL};
static ANTLRBitSet *FOLLOW_COLON_in_keyValuePair639;
static const unsigned long long FOLLOW_COLON_in_keyValuePair639_data[] = { 0x0000000806100000LL};
static ANTLRBitSet *FOLLOW_keyValue_in_keyValuePair641;
static const unsigned long long FOLLOW_keyValue_in_keyValuePair641_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_BIGSTRING_in_keyValue658;
static const unsigned long long FOLLOW_BIGSTRING_in_keyValue658_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_LCURLY_in_keyValue667;
static const unsigned long long FOLLOW_LCURLY_in_keyValue667_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_STRING_in_keyValue674;
static const unsigned long long FOLLOW_STRING_in_keyValue674_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ID_in_keyValue687;
static const unsigned long long FOLLOW_ID_in_keyValue687_data[] = { 0x0000000000000002LL};


#pragma mark Dynamic Global Scopes

#pragma mark Dynamic Rule Scopes

#pragma mark Rule Return Scopes start
//#pragma mark Rule return scopes start
//

#pragma mark Rule return scopes start

@implementation GroupParser  // line 637

/* ObjC start of ruleAttributeScope */
#pragma mark Dynamic Rule Scopes
/* ObjC end of ruleAttributeScope */
#pragma mark global Attribute Scopes
/* ObjC start globalAttributeScope */
/* ObjC end globalAttributeScope */
/* ObjC start actions.(actionScope).synthesize */

@synthesize group;

/* ObjC end actions.(actionScope).synthesize */
/* ObjC start synthesize() */
/* ObjC end synthesize() */

+ (void) initialize
{
    #pragma mark Bitsets
    FOLLOW_38_in_group113 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_38_in_group113_data Count:(NSUInteger)1] retain];
    FOLLOW_STRING_in_group115 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_STRING_in_group115_data Count:(NSUInteger)1] retain];
    FOLLOW_38_in_group122 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_38_in_group122_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_group133 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_group133_data Count:(NSUInteger)1] retain];
    FOLLOW_DOT_in_group136 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_DOT_in_group136_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_group138 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_group138_data Count:(NSUInteger)1] retain];
    FOLLOW_def_in_group156 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_def_in_group156_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_groupName187 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_groupName187_data Count:(NSUInteger)1] retain];
    FOLLOW_DOT_in_groupName192 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_DOT_in_groupName192_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_groupName196 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_groupName196_data Count:(NSUInteger)1] retain];
    FOLLOW_templateDef_in_def213 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_templateDef_in_def213_data Count:(NSUInteger)1] retain];
    FOLLOW_dictDef_in_def218 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_dictDef_in_def218_data Count:(NSUInteger)1] retain];
    FOLLOW_AT_in_templateDef242 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_AT_in_templateDef242_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_templateDef246 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_templateDef246_data Count:(NSUInteger)1] retain];
    FOLLOW_DOT_in_templateDef248 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_DOT_in_templateDef248_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_templateDef252 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_templateDef252_data Count:(NSUInteger)1] retain];
    FOLLOW_LPAREN_in_templateDef254 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_LPAREN_in_templateDef254_data Count:(NSUInteger)1] retain];
    FOLLOW_RPAREN_in_templateDef256 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_RPAREN_in_templateDef256_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_templateDef264 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_templateDef264_data Count:(NSUInteger)1] retain];
    FOLLOW_LPAREN_in_templateDef266 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_LPAREN_in_templateDef266_data Count:(NSUInteger)1] retain];
    FOLLOW_formalArgs_in_templateDef268 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_formalArgs_in_templateDef268_data Count:(NSUInteger)1] retain];
    FOLLOW_RPAREN_in_templateDef270 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_RPAREN_in_templateDef270_data Count:(NSUInteger)1] retain];
    FOLLOW_39_in_templateDef281 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_39_in_templateDef281_data Count:(NSUInteger)1] retain];
    FOLLOW_STRING_in_templateDef297 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_STRING_in_templateDef297_data Count:(NSUInteger)1] retain];
    FOLLOW_BIGSTRING_in_templateDef312 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_BIGSTRING_in_templateDef312_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_templateDef347 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_templateDef347_data Count:(NSUInteger)1] retain];
    FOLLOW_39_in_templateDef349 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_39_in_templateDef349_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_templateDef353 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_templateDef353_data Count:(NSUInteger)1] retain];
    FOLLOW_formalArg_in_formalArgs378 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_formalArg_in_formalArgs378_data Count:(NSUInteger)1] retain];
    FOLLOW_COMMA_in_formalArgs388 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_COMMA_in_formalArgs388_data Count:(NSUInteger)1] retain];
    FOLLOW_formalArg_in_formalArgs390 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_formalArg_in_formalArgs390_data Count:(NSUInteger)1] retain];
    FOLLOW_COMMA_in_formalArgs403 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_COMMA_in_formalArgs403_data Count:(NSUInteger)1] retain];
    FOLLOW_formalArgWithDefaultValue_in_formalArgs405 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_formalArgWithDefaultValue_in_formalArgs405_data Count:(NSUInteger)1] retain];
    FOLLOW_formalArgWithDefaultValue_in_formalArgs417 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_formalArgWithDefaultValue_in_formalArgs417_data Count:(NSUInteger)1] retain];
    FOLLOW_COMMA_in_formalArgs422 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_COMMA_in_formalArgs422_data Count:(NSUInteger)1] retain];
    FOLLOW_formalArgWithDefaultValue_in_formalArgs424 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_formalArgWithDefaultValue_in_formalArgs424_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_formalArg446 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_formalArg446_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_formalArgWithDefaultValue465 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_formalArgWithDefaultValue465_data Count:(NSUInteger)1] retain];
    FOLLOW_EQUALS_in_formalArgWithDefaultValue471 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_EQUALS_in_formalArgWithDefaultValue471_data Count:(NSUInteger)1] retain];
    FOLLOW_STRING_in_formalArgWithDefaultValue475 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_STRING_in_formalArgWithDefaultValue475_data Count:(NSUInteger)1] retain];
    FOLLOW_EQUALS_in_formalArgWithDefaultValue481 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_EQUALS_in_formalArgWithDefaultValue481_data Count:(NSUInteger)1] retain];
    FOLLOW_LCURLY_in_formalArgWithDefaultValue485 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_LCURLY_in_formalArgWithDefaultValue485_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_dictDef510 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_dictDef510_data Count:(NSUInteger)1] retain];
    FOLLOW_39_in_dictDef512 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_39_in_dictDef512_data Count:(NSUInteger)1] retain];
    FOLLOW_dict_in_dictDef514 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_dict_in_dictDef514_data Count:(NSUInteger)1] retain];
    FOLLOW_LBRACK_in_dict546 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_LBRACK_in_dict546_data Count:(NSUInteger)1] retain];
    FOLLOW_dictPairs_in_dict548 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_dictPairs_in_dict548_data Count:(NSUInteger)1] retain];
    FOLLOW_RBRACK_in_dict551 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_RBRACK_in_dict551_data Count:(NSUInteger)1] retain];
    FOLLOW_keyValuePair_in_dictPairs566 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_keyValuePair_in_dictPairs566_data Count:(NSUInteger)1] retain];
    FOLLOW_COMMA_in_dictPairs575 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_COMMA_in_dictPairs575_data Count:(NSUInteger)1] retain];
    FOLLOW_keyValuePair_in_dictPairs577 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_keyValuePair_in_dictPairs577_data Count:(NSUInteger)1] retain];
    FOLLOW_COMMA_in_dictPairs583 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_COMMA_in_dictPairs583_data Count:(NSUInteger)1] retain];
    FOLLOW_defaultValuePair_in_dictPairs585 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_defaultValuePair_in_dictPairs585_data Count:(NSUInteger)1] retain];
    FOLLOW_defaultValuePair_in_dictPairs596 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_defaultValuePair_in_dictPairs596_data Count:(NSUInteger)1] retain];
    FOLLOW_40_in_defaultValuePair619 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_40_in_defaultValuePair619_data Count:(NSUInteger)1] retain];
    FOLLOW_COLON_in_defaultValuePair621 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_COLON_in_defaultValuePair621_data Count:(NSUInteger)1] retain];
    FOLLOW_keyValue_in_defaultValuePair623 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_keyValue_in_defaultValuePair623_data Count:(NSUInteger)1] retain];
    FOLLOW_STRING_in_keyValuePair637 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_STRING_in_keyValuePair637_data Count:(NSUInteger)1] retain];
    FOLLOW_COLON_in_keyValuePair639 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_COLON_in_keyValuePair639_data Count:(NSUInteger)1] retain];
    FOLLOW_keyValue_in_keyValuePair641 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_keyValue_in_keyValuePair641_data Count:(NSUInteger)1] retain];
    FOLLOW_BIGSTRING_in_keyValue658 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_BIGSTRING_in_keyValue658_data Count:(NSUInteger)1] retain];
    FOLLOW_LCURLY_in_keyValue667 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_LCURLY_in_keyValue667_data Count:(NSUInteger)1] retain];
    FOLLOW_STRING_in_keyValue674 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_STRING_in_keyValue674_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_keyValue687 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_keyValue687_data Count:(NSUInteger)1] retain];

    [ANTLRBaseRecognizer setTokenNames:[[NSArray arrayWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>", 
 @"IF", @"ELSE", @"ELSEIF", @"ENDIF", @"SUPER", @"SEMI", @"BANG", @"ELLIPSIS", 
 @"EQUALS", @"COLON", @"LPAREN", @"RPAREN", @"LBRACK", @"RBRACK", @"COMMA", 
 @"DOT", @"LCURLY", @"RCURLY", @"TEXT", @"LDELIM", @"RDELIM", @"ID", @"STRING", 
 @"WS", @"PIPE", @"OR", @"AND", @"INDENT", @"NEWLINE", @"AT", @"REGION_END", 
 @"BIGSTRING", @"COMMENT", @"LINE_COMMENT", @"'import'", @"'::='", @"'default'", nil] retain]];
    [ANTLRBaseRecognizer setGrammarFileName:@"/Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g"];
}

+ (GroupParser *)newGroupParser:(id<ANTLRTokenStream>)aStream
{
    return [[GroupParser alloc] initWithTokenStream:aStream];

}

- (id) initWithTokenStream:(id<ANTLRTokenStream>)aStream
{
    if ((self = [super initWithTokenStream:aStream State:[[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:13+1] retain]]) != nil) {


        /* start of actions-actionScope-init */
        /* start of init */
    }
    return self;
}

- (void) dealloc
{
    [super dealloc];
}

/* ObjC start members */
/* ObjC end members */
/* ObjC start actions.(actionScope).methods */

- (void) displayRecognitionError:(NSMutableArray *) tokenNames e:(ANTLRRecognitionException *)e
{
    NSString *msg = [self getErrorMessage:e TokenNames:[self getTokenNames]];
    [group.errMgr groupSyntaxError:SYNTAX_ERROR srcName:[self getSourceName] e:e msg:msg];
}

- (NSString *) getSourceName
{
#ifdef DONTUSENOMO
    NSError **outError;
    NSString *fullFileName = [super getSourceName];
    NSFileWrapper *f = [[NSFileWrapper alloc] initWithURL:fullFileName options:NSFileWrapperReadingImmediate error:outError]; // strip to simple name
    return [f filename];
#endif
    return [super getSourceName];
}

- (void) error:(NSString *)msg
{
    ANTLRNoViableAltException *e = [ANTLRNoViableAltException newANTLRNoViableAltException:0 state:0 stream:input];
    [group.errMgr groupSyntaxError:SYNTAX_ERROR srcName:[self getSourceName] e:e msg:msg];
    [self recover:input exception:nil];
}

- (NSString *) getErrorMessage:(NSException *)e TokenNames:(NSArray *)TokenNames
{
    return [NSString stringWithFormat:@"%@--%@", [e name], [e reason]];
}


/* ObjC end actions.(actionScope).methods */
/* ObjC start methods() */
/* ObjC end methods() */
/* ObjC start rules */

/*
 * $ANTLR start group
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:138:1: group[STGroup *aGroup, NSString *prefix] : ( 'import' STRING | 'import' ID ( '.' ID )* )* ( def[prefix] )+ ;
 */
- (void) group:(STGroup *)aGroup arg1:(NSString *)prefix 
{
    /* ruleScopeSetUp */


    GroupLexer *lexer = (GroupLexer *)[input getTokenSource];
    self.group = lexer.group = aGroup;

    @try {
        ANTLRCommonToken *STRING1 = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:143:2: ( ( 'import' STRING | 'import' ID ( '.' ID )* )* ( def[prefix] )+ ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:143:4: ( 'import' STRING | 'import' ID ( '.' ID )* )* ( def[prefix] )+ // alt
        {
        do {
            NSInteger alt2=3;
            NSInteger LA2_0 = [input LA:1];
            if ( (LA2_0==38) ) {
                NSInteger LA2_2 = [input LA:2];
                if ( (LA2_2==STRING) ) {
                    alt2=1;
                }
                else if ( (LA2_2==ID) ) {
                    alt2=2;
                }


            }


            switch (alt2) {
                case 1 : ;
                    // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:143:6: 'import' STRING // alt
                    {
                    [self match:input TokenType:38 Follow:FOLLOW_38_in_group113]; 
                    STRING1=(ANTLRCommonToken *)[self match:input TokenType:STRING Follow:FOLLOW_STRING_in_group115]; 
                    [aGroup importTemplates:STRING1];

                    }
                    break;
                case 2 : ;
                    // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:144:4: 'import' ID ( '.' ID )* // alt
                    {
                    [self match:input TokenType:38 Follow:FOLLOW_38_in_group122]; 

                    			ANTLRMismatchedTokenException *e = [ANTLRMismatchedTokenException newANTLRMismatchedTokenException:STRING Stream:input];
                    			[self reportError:e];
                    			
                    [self match:input TokenType:ID Follow:FOLLOW_ID_in_group133]; 
                    do {
                        NSInteger alt1=2;
                        NSInteger LA1_0 = [input LA:1];
                        if ( (LA1_0==DOT) ) {
                            alt1=1;
                        }


                        switch (alt1) {
                            case 1 : ;
                                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:149:8: '.' ID // alt
                                {
                                [self match:input TokenType:DOT Follow:FOLLOW_DOT_in_group136]; 
                                [self match:input TokenType:ID Follow:FOLLOW_ID_in_group138]; 

                                }
                                break;

                            default :
                                goto loop1;
                        }
                    } while (YES);
                    loop1: ;


                    }
                    break;

                default :
                    goto loop2;
            }
        } while (YES);
        loop2: ;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:151:9: ( def[prefix] )+ // positiveClosureBlock
        NSInteger cnt3 = 0;
        do {
            NSInteger alt3 = 2;
            NSInteger LA3_0 = [input LA:1];
            if ( (LA3_0==ID||LA3_0==AT) ) {
                alt3=1;
            }


            switch (alt3) {
                case 1 : ;
                    // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:151:9: def[prefix] // alt
                    {
                    /* ruleRef */
                    [self pushFollow:FOLLOW_def_in_group156];
                    [self def:prefix ];

                    [self popFollow];



                    }
                    break;

                default :
                    if ( cnt3 >= 1 )
                        goto loop3;
                    ANTLREarlyExitException *eee = 
                        [ANTLREarlyExitException exceptionWithStream:input decisionNumber:3];
                    @throw eee;
            }
            cnt3++;
        } while (YES);
        loop3: ;


        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end group */

/*
 * $ANTLR start groupName
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:154:1: groupName returns [NSString *name] : a= ID ( '.' a= ID )* ;
 */
- (NSString *) groupName
{
    /* ruleScopeSetUp */

    NSString * name = nil;

    NSMutableString *buf = [NSMutableString stringWithCapacity:16];
    @try {
        ANTLRCommonToken *a = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:156:2: (a= ID ( '.' a= ID )* ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:156:4: a= ID ( '.' a= ID )* // alt
        {
        a=(ANTLRCommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_groupName187]; 
        [buf appendString:(a!=nil?[a getText]:@"nil")];
        do {
            NSInteger alt4=2;
            NSInteger LA4_0 = [input LA:1];
            if ( (LA4_0==DOT) ) {
                alt4=1;
            }


            switch (alt4) {
                case 1 : ;
                    // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:156:40: '.' a= ID // alt
                    {
                    [self match:input TokenType:DOT Follow:FOLLOW_DOT_in_groupName192]; 
                    a=(ANTLRCommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_groupName196]; 
                    [buf appendString:(a!=nil?[a getText]:@"nil")];

                    }
                    break;

                default :
                    goto loop4;
            }
        } while (YES);
        loop4: ;


        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return name;
}
/* $ANTLR end groupName */

/*
 * $ANTLR start def
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:159:1: def[NSString *prefix] : ( templateDef[prefix] | dictDef );
 */
- (void) def:(NSString *)prefix 
{
    /* ruleScopeSetUp */

    @try {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:163:23: ( templateDef[prefix] | dictDef ) //ruleblock
        NSInteger alt5=2;
        NSInteger LA5_0 = [input LA:1];

        if ( (LA5_0==AT) ) {
            alt5=1;
        }
        else if ( (LA5_0==ID) ) {
            NSInteger LA5_2 = [input LA:2];

            if ( (LA5_2==LPAREN) ) {
                alt5=1;
            }
            else if ( (LA5_2==39) ) {
                NSInteger LA5_3 = [input LA:3];

                if ( (LA5_3==ID) ) {
                    alt5=1;
                }
                else if ( (LA5_3==LBRACK) ) {
                    alt5=2;
                }
                else {
                    ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:5 state:3 stream:input];
                    @throw nvae;
                }
            }
            else {
                ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:5 state:2 stream:input];
                @throw nvae;
            }
        }
        else {
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:5 state:0 stream:input];
            @throw nvae;
        }
        switch (alt5) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:163:25: templateDef[prefix] // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_templateDef_in_def213];
                [self templateDef:prefix ];

                [self popFollow];



                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:163:47: dictDef // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_dictDef_in_def218];
                [self dictDef];

                [self popFollow];



                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {

        		// pretend we already saw an error here
        		state.lastErrorIndex = [input getIndex];
        		[self error:[NSString stringWithFormat:@"garbled template definition starting at '%@'", [[input LT:1] getText]]];
        	
    }
    @finally {
    }
    return ;
}
/* $ANTLR end def */

/*
 * $ANTLR start templateDef
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:170:1: templateDef[NSString *prefix] : ( ( '@' enclosing= ID '.' name= ID '(' ')' | name= ID '(' formalArgs ')' ) '::=' ( STRING | BIGSTRING | ) | alias= ID '::=' target= ID );
 */
- (void) templateDef:(NSString *)prefix 
{
    /* ruleScopeSetUp */


        NSString *template=nil;
        NSInteger n=0; // num char to strip from left, right of template def

    @try {
        ANTLRCommonToken *enclosing = nil;
        ANTLRCommonToken *name = nil;
        ANTLRCommonToken *alias = nil;
        ANTLRCommonToken *target = nil;
        ANTLRCommonToken *STRING2 = nil;
        ANTLRCommonToken *BIGSTRING3 = nil;
        NSMutableArray * formalArgs4 = nil;


        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:175:2: ( ( '@' enclosing= ID '.' name= ID '(' ')' | name= ID '(' formalArgs ')' ) '::=' ( STRING | BIGSTRING | ) | alias= ID '::=' target= ID ) //ruleblock
        NSInteger alt8=2;
        NSInteger LA8_0 = [input LA:1];

        if ( (LA8_0==AT) ) {
            alt8=1;
        }
        else if ( (LA8_0==ID) ) {
            NSInteger LA8_2 = [input LA:2];

            if ( (LA8_2==LPAREN) ) {
                alt8=1;
            }
            else if ( (LA8_2==39) ) {
                alt8=2;
            }
            else {
                ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:8 state:2 stream:input];
                @throw nvae;
            }
        }
        else {
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:8 state:0 stream:input];
            @throw nvae;
        }
        switch (alt8) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:175:4: ( '@' enclosing= ID '.' name= ID '(' ')' | name= ID '(' formalArgs ')' ) '::=' ( STRING | BIGSTRING | ) // alt
                {
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:175:4: ( '@' enclosing= ID '.' name= ID '(' ')' | name= ID '(' formalArgs ')' ) // block
                NSInteger alt6=2;
                NSInteger LA6_0 = [input LA:1];

                if ( (LA6_0==AT) ) {
                    alt6=1;
                }
                else if ( (LA6_0==ID) ) {
                    alt6=2;
                }
                else {
                    ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:6 state:0 stream:input];
                    @throw nvae;
                }
                switch (alt6) {
                    case 1 : ;
                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:175:6: '@' enclosing= ID '.' name= ID '(' ')' // alt
                        {
                        [self match:input TokenType:AT Follow:FOLLOW_AT_in_templateDef242]; 
                        enclosing=(ANTLRCommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_templateDef246]; 
                        [self match:input TokenType:DOT Follow:FOLLOW_DOT_in_templateDef248]; 
                        name=(ANTLRCommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_templateDef252]; 
                        [self match:input TokenType:LPAREN Follow:FOLLOW_LPAREN_in_templateDef254]; 
                        [self match:input TokenType:RPAREN Follow:FOLLOW_RPAREN_in_templateDef256]; 

                        }
                        break;
                    case 2 : ;
                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:176:5: name= ID '(' formalArgs ')' // alt
                        {
                        name=(ANTLRCommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_templateDef264]; 
                        [self match:input TokenType:LPAREN Follow:FOLLOW_LPAREN_in_templateDef266]; 
                        /* ruleRef */
                        [self pushFollow:FOLLOW_formalArgs_in_templateDef268];
                        formalArgs4 = [self formalArgs];

                        [self popFollow];


                        [self match:input TokenType:RPAREN Follow:FOLLOW_RPAREN_in_templateDef270]; 

                        }
                        break;

                }

                [self match:input TokenType:39 Follow:FOLLOW_39_in_templateDef281]; 
                ANTLRCommonToken *templateToken = [input LT:1];
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:180:6: ( STRING | BIGSTRING | ) // block
                NSInteger alt7=3;
                switch ([input LA:1]) {
                    case STRING: ;
                        {
                        alt7=1;
                        }
                        break;
                    case BIGSTRING: ;
                        {
                        alt7=2;
                        }
                        break;
                    case EOF: ;
                    case ID: ;
                    case AT: ;
                        {
                        alt7=3;
                        }
                        break;

                default: ;
                    ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:7 state:0 stream:input];
                    @throw nvae;
                }

                switch (alt7) {
                    case 1 : ;
                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:180:8: STRING // alt
                        {
                        STRING2=(ANTLRCommonToken *)[self match:input TokenType:STRING Follow:FOLLOW_STRING_in_templateDef297]; 
                        template=(STRING2!=nil?[STRING2 getText]:@"nil"); n=1;

                        }
                        break;
                    case 2 : ;
                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:181:8: BIGSTRING // alt
                        {
                        BIGSTRING3=(ANTLRCommonToken *)[self match:input TokenType:BIGSTRING Follow:FOLLOW_BIGSTRING_in_templateDef312]; 
                        template=(BIGSTRING3!=nil?[BIGSTRING3 getText]:@"nil"); n=2;

                        }
                        break;
                    case 3 : ;
                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:182:8:  // alt
                        {

                        	    	template = @"";
                        	    	NSString *msg = [NSString stringWithFormat:@"missing template at '%@'", [[input LT:1] getText]];
                                    ANTLRNoViableAltException *e = [ANTLRNoViableAltException newANTLRNoViableAltException:0 state:0 stream:input];
                            	    [group.errMgr groupSyntaxError:SYNTAX_ERROR srcName:[self getSourceName] e:e msg:msg];
                            	    

                        }
                        break;

                }


                        template = [Misc strip:template n:n];
                        NSString *templateName = (name!=nil?[name getText]:@"nil");
                        if ( [prefix length] > 0 ) templateName = [NSString stringWithFormat: @"%@/%@", prefix, (name!=nil?[name getText]:@"nil")];
                	    [group defineTemplateOrRegion:templateName
                        regionSurroundingTemplateName:(enclosing!=nil?[enclosing getText]:@"nil")
                                        templateToken:templateToken
                                             template:template
                                            nameToken:name
                                                 args:formalArgs4];
                	    

                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:200:6: alias= ID '::=' target= ID // alt
                {
                alias=(ANTLRCommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_templateDef347]; 
                [self match:input TokenType:39 Follow:FOLLOW_39_in_templateDef349]; 
                target=(ANTLRCommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_templateDef353]; 
                [group defineTemplateAlias:alias targetT:target];

                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end templateDef */

/*
 * $ANTLR start formalArgs
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:203:1: formalArgs returns [NSMutableArray *args] : ( formalArg[$args] ( ',' formalArg[$args] )* ( ',' formalArgWithDefaultValue[$args] )* | formalArgWithDefaultValue[$args] ( ',' formalArgWithDefaultValue[$args] )* | );
 */
- (NSMutableArray *) formalArgs
{
    /* ruleScopeSetUp */

    NSMutableArray * args = nil;

    args =  [NSMutableArray arrayWithCapacity:16];
    @try {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:205:5: ( formalArg[$args] ( ',' formalArg[$args] )* ( ',' formalArgWithDefaultValue[$args] )* | formalArgWithDefaultValue[$args] ( ',' formalArgWithDefaultValue[$args] )* | ) //ruleblock
        NSInteger alt12=3;
        NSInteger LA12_0 = [input LA:1];

        if ( (LA12_0==ID) ) {
            NSInteger LA12_1 = [input LA:2];

            if ( (LA12_1==RPAREN||LA12_1==COMMA) ) {
                alt12=1;
            }
            else if ( (LA12_1==EQUALS) ) {
                alt12=2;
            }
            else {
                ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:12 state:1 stream:input];
                @throw nvae;
            }
        }
        else if ( (LA12_0==RPAREN) ) {
            alt12=3;
        }
        else {
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:12 state:0 stream:input];
            @throw nvae;
        }
        switch (alt12) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:205:7: formalArg[$args] ( ',' formalArg[$args] )* ( ',' formalArgWithDefaultValue[$args] )* // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_formalArg_in_formalArgs378];
                [self formalArg:args ];

                [self popFollow];


                do {
                    NSInteger alt9=2;
                    NSInteger LA9_0 = [input LA:1];
                    if ( (LA9_0==COMMA) ) {
                        NSInteger LA9_1 = [input LA:2];
                        if ( (LA9_1==ID) ) {
                            NSInteger LA9_3 = [input LA:3];
                            if ( (LA9_3==RPAREN||LA9_3==COMMA) ) {
                                alt9=1;
                            }


                        }


                    }


                    switch (alt9) {
                        case 1 : ;
                            // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:206:8: ',' formalArg[$args] // alt
                            {
                            [self match:input TokenType:COMMA Follow:FOLLOW_COMMA_in_formalArgs388]; 
                            /* ruleRef */
                            [self pushFollow:FOLLOW_formalArg_in_formalArgs390];
                            [self formalArg:args ];

                            [self popFollow];



                            }
                            break;

                        default :
                            goto loop9;
                    }
                } while (YES);
                loop9: ;

                do {
                    NSInteger alt10=2;
                    NSInteger LA10_0 = [input LA:1];
                    if ( (LA10_0==COMMA) ) {
                        alt10=1;
                    }


                    switch (alt10) {
                        case 1 : ;
                            // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:207:8: ',' formalArgWithDefaultValue[$args] // alt
                            {
                            [self match:input TokenType:COMMA Follow:FOLLOW_COMMA_in_formalArgs403]; 
                            /* ruleRef */
                            [self pushFollow:FOLLOW_formalArgWithDefaultValue_in_formalArgs405];
                            [self formalArgWithDefaultValue:args ];

                            [self popFollow];



                            }
                            break;

                        default :
                            goto loop10;
                    }
                } while (YES);
                loop10: ;


                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:208:7: formalArgWithDefaultValue[$args] ( ',' formalArgWithDefaultValue[$args] )* // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_formalArgWithDefaultValue_in_formalArgs417];
                [self formalArgWithDefaultValue:args ];

                [self popFollow];


                do {
                    NSInteger alt11=2;
                    NSInteger LA11_0 = [input LA:1];
                    if ( (LA11_0==COMMA) ) {
                        alt11=1;
                    }


                    switch (alt11) {
                        case 1 : ;
                            // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:208:42: ',' formalArgWithDefaultValue[$args] // alt
                            {
                            [self match:input TokenType:COMMA Follow:FOLLOW_COMMA_in_formalArgs422]; 
                            /* ruleRef */
                            [self pushFollow:FOLLOW_formalArgWithDefaultValue_in_formalArgs424];
                            [self formalArgWithDefaultValue:args ];

                            [self popFollow];



                            }
                            break;

                        default :
                            goto loop11;
                    }
                } while (YES);
                loop11: ;


                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:210:2:  // alt
                {
                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return args;
}
/* $ANTLR end formalArgs */

/*
 * $ANTLR start formalArg
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:212:1: formalArg[NSMutableArray *args] : ID ;
 */
- (void) formalArg:(NSMutableArray *)args 
{
    /* ruleScopeSetUp */

    @try {
        ANTLRCommonToken *ID5 = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:213:2: ( ID ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:213:4: ID // alt
        {
        ID5=(ANTLRCommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_formalArg446]; 
        [args addObject:[FormalArgument newFormalArgument:(ID5!=nil?[ID5 getText]:@"nil")]];

        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end formalArg */

/*
 * $ANTLR start formalArgWithDefaultValue
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:217:1: formalArgWithDefaultValue[NSMutableArray *args] : ID ( '=' a= STRING | '=' a= ANONYMOUS_TEMPLATE ) ;
 */
- (void) formalArgWithDefaultValue:(NSMutableArray *)args 
{
    /* ruleScopeSetUp */

    @try {
        ANTLRCommonToken *a = nil;
        ANTLRCommonToken *ID6 = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:218:2: ( ID ( '=' a= STRING | '=' a= ANONYMOUS_TEMPLATE ) ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:218:4: ID ( '=' a= STRING | '=' a= ANONYMOUS_TEMPLATE ) // alt
        {
        ID6=(ANTLRCommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_formalArgWithDefaultValue465]; 
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:219:3: ( '=' a= STRING | '=' a= ANONYMOUS_TEMPLATE ) // block
        NSInteger alt13=2;
        NSInteger LA13_0 = [input LA:1];

        if ( (LA13_0==EQUALS) ) {
            NSInteger LA13_1 = [input LA:2];

            if ( (LA13_1==STRING) ) {
                alt13=1;
            }
            else if ( (LA13_1==LCURLY) ) {
                alt13=2;
            }
            else {
                ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:13 state:1 stream:input];
                @throw nvae;
            }
        }
        else {
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:13 state:0 stream:input];
            @throw nvae;
        }
        switch (alt13) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:219:5: '=' a= STRING // alt
                {
                [self match:input TokenType:EQUALS Follow:FOLLOW_EQUALS_in_formalArgWithDefaultValue471]; 
                a=(ANTLRCommonToken *)[self match:input TokenType:STRING Follow:FOLLOW_STRING_in_formalArgWithDefaultValue475]; 

                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:220:5: '=' a= ANONYMOUS_TEMPLATE // alt
                {
                [self match:input TokenType:EQUALS Follow:FOLLOW_EQUALS_in_formalArgWithDefaultValue481]; 
                a=(ANTLRCommonToken *)[self match:input TokenType:LCURLY Follow:FOLLOW_LCURLY_in_formalArgWithDefaultValue485]; 

                }
                break;

        }

        [args addObject:[FormalArgument newFormalArgument:(ID6!=nil?[ID6 getText]:@"nil") token:a]];

        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end formalArgWithDefaultValue */

/*
 * $ANTLR start dictDef
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:234:1: dictDef : ID '::=' dict ;
 */
- (void) dictDef
{
    /* ruleScopeSetUp */

    @try {
        ANTLRCommonToken *ID7 = nil;
        NSMutableDictionary * dict8 = nil;


        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:235:2: ( ID '::=' dict ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:235:4: ID '::=' dict // alt
        {
        ID7=(ANTLRCommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_dictDef510]; 
        [self match:input TokenType:39 Follow:FOLLOW_39_in_dictDef512]; 
        /* ruleRef */
        [self pushFollow:FOLLOW_dict_in_dictDef514];
        dict8 = [self dict];

        [self popFollow];



                if ( [group rawGetDictionary:(ID7!=nil?[ID7 getText]:@"nil")] != nil ) {
        			[group.errMgr compileTimeError:MAP_REDEFINITION templateToken:nil t:ID7];
                }
                else if ( [group rawGetTemplate:(ID7!=nil?[ID7 getText]:@"nil")] != nil ) {
        			[group.errMgr compileTimeError:TEMPLATE_REDEFINITION_AS_MAP templateToken:nil t:ID7];
                }
                else {
                    [group defineDictionary:(ID7!=nil?[ID7 getText]:@"nil") mapping:dict8];
                }
                

        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end dictDef */

/*
 * $ANTLR start dict
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:249:1: dict returns [NSMutableDictionary *mapping] : '[' dictPairs[mapping] ']' ;
 */
- (NSMutableDictionary *) dict
{
    /* ruleScopeSetUp */

    NSMutableDictionary * mapping = nil;

    mapping=[NSMutableDictionary dictionaryWithCapacity:16];
    @try {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:251:2: ( '[' dictPairs[mapping] ']' ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:251:6: '[' dictPairs[mapping] ']' // alt
        {
        [self match:input TokenType:LBRACK Follow:FOLLOW_LBRACK_in_dict546]; 
        /* ruleRef */
        [self pushFollow:FOLLOW_dictPairs_in_dict548];
        [self dictPairs:mapping ];

        [self popFollow];


        [self match:input TokenType:RBRACK Follow:FOLLOW_RBRACK_in_dict551]; 

        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return mapping;
}
/* $ANTLR end dict */

/*
 * $ANTLR start dictPairs
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:254:1: dictPairs[NSMutableDictionary *mapping] : ( keyValuePair[mapping] ( ',' keyValuePair[mapping] )* ( ',' defaultValuePair[mapping] )? | defaultValuePair[mapping] );
 */
- (void) dictPairs:(NSMutableDictionary *)mapping 
{
    /* ruleScopeSetUp */

    @try {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:255:5: ( keyValuePair[mapping] ( ',' keyValuePair[mapping] )* ( ',' defaultValuePair[mapping] )? | defaultValuePair[mapping] ) //ruleblock
        NSInteger alt16=2;
        NSInteger LA16_0 = [input LA:1];

        if ( (LA16_0==STRING) ) {
            alt16=1;
        }
        else if ( (LA16_0==40) ) {
            alt16=2;
        }
        else {
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:16 state:0 stream:input];
            @throw nvae;
        }
        switch (alt16) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:255:7: keyValuePair[mapping] ( ',' keyValuePair[mapping] )* ( ',' defaultValuePair[mapping] )? // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_keyValuePair_in_dictPairs566];
                [self keyValuePair:mapping ];

                [self popFollow];


                do {
                    NSInteger alt14=2;
                    NSInteger LA14_0 = [input LA:1];
                    if ( (LA14_0==COMMA) ) {
                        NSInteger LA14_1 = [input LA:2];
                        if ( (LA14_1==STRING) ) {
                            alt14=1;
                        }


                    }


                    switch (alt14) {
                        case 1 : ;
                            // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:256:7: ',' keyValuePair[mapping] // alt
                            {
                            [self match:input TokenType:COMMA Follow:FOLLOW_COMMA_in_dictPairs575]; 
                            /* ruleRef */
                            [self pushFollow:FOLLOW_keyValuePair_in_dictPairs577];
                            [self keyValuePair:mapping ];

                            [self popFollow];



                            }
                            break;

                        default :
                            goto loop14;
                    }
                } while (YES);
                loop14: ;

                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:256:35: ( ',' defaultValuePair[mapping] )? // block
                NSInteger alt15=2;
                NSInteger LA15_0 = [input LA:1];

                if ( (LA15_0==COMMA) ) {
                    alt15=1;
                }
                switch (alt15) {
                    case 1 : ;
                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:256:36: ',' defaultValuePair[mapping] // alt
                        {
                        [self match:input TokenType:COMMA Follow:FOLLOW_COMMA_in_dictPairs583]; 
                        /* ruleRef */
                        [self pushFollow:FOLLOW_defaultValuePair_in_dictPairs585];
                        [self defaultValuePair:mapping ];

                        [self popFollow];



                        }
                        break;

                }


                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:257:7: defaultValuePair[mapping] // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_defaultValuePair_in_dictPairs596];
                [self defaultValuePair:mapping ];

                [self popFollow];



                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {

        		[self error:[NSString stringWithFormat:@"missing dictionary entry at '%@'", [[input LT:1] getText]]];
        	
    }
    @finally {
    }
    return ;
}
/* $ANTLR end dictPairs */

/*
 * $ANTLR start defaultValuePair
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:263:1: defaultValuePair[NSMutableDictionary *mapping] : 'default' ':' keyValue ;
 */
- (void) defaultValuePair:(NSMutableDictionary *)mapping 
{
    /* ruleScopeSetUp */

    @try {
        id keyValue9 = nil;


        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:264:2: ( 'default' ':' keyValue ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:264:4: 'default' ':' keyValue // alt
        {
        [self match:input TokenType:40 Follow:FOLLOW_40_in_defaultValuePair619]; 
        [self match:input TokenType:COLON Follow:FOLLOW_COLON_in_defaultValuePair621]; 
        /* ruleRef */
        [self pushFollow:FOLLOW_keyValue_in_defaultValuePair623];
        keyValue9 = [self keyValue];

        [self popFollow];


        [mapping setObject:keyValue9 forKey:STGroup.DEFAULT_KEY];

        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end defaultValuePair */

/*
 * $ANTLR start keyValuePair
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:267:1: keyValuePair[NSMutableDictionary *mapping] : STRING ':' keyValue ;
 */
- (void) keyValuePair:(NSMutableDictionary *)mapping 
{
    /* ruleScopeSetUp */

    @try {
        ANTLRCommonToken *STRING11 = nil;
        id keyValue10 = nil;


        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:268:2: ( STRING ':' keyValue ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:268:4: STRING ':' keyValue // alt
        {
        STRING11=(ANTLRCommonToken *)[self match:input TokenType:STRING Follow:FOLLOW_STRING_in_keyValuePair637]; 
        [self match:input TokenType:COLON Follow:FOLLOW_COLON_in_keyValuePair639]; 
        /* ruleRef */
        [self pushFollow:FOLLOW_keyValue_in_keyValuePair641];
        keyValue10 = [self keyValue];

        [self popFollow];


        [mapping setObject:keyValue10 forKey:[Misc replaceEscapes:[Misc strip:(STRING11!=nil?[STRING11 getText]:@"nil") n:0]]];

        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end keyValuePair */

/*
 * $ANTLR start keyValue
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:271:1: keyValue returns [id value] : ( BIGSTRING | ANONYMOUS_TEMPLATE | STRING | {...}? => ID );
 */
- (id) keyValue
{
    /* ruleScopeSetUp */

    id value = nil;

    @try {
        ANTLRCommonToken *BIGSTRING12 = nil;
        ANTLRCommonToken *ANONYMOUS_TEMPLATE13 = nil;
        ANTLRCommonToken *STRING14 = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:272:2: ( BIGSTRING | ANONYMOUS_TEMPLATE | STRING | {...}? => ID ) //ruleblock
        NSInteger alt17=4;
        NSInteger LA17_0 = [input LA:1];

        if ( (LA17_0==BIGSTRING) ) {
            alt17=1;
        }
        else if ( (LA17_0==LCURLY) ) {
            alt17=2;
        }
        else if ( (LA17_0==STRING) ) {
            alt17=3;
        }
        else if ( (LA17_0==ID) && (([[[input LT:1] getText] isEqualToString:@"key"]))) {
            alt17=4;
        }
        else {
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:17 state:0 stream:input];
            @throw nvae;
        }
        switch (alt17) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:272:4: BIGSTRING // alt
                {
                BIGSTRING12=(ANTLRCommonToken *)[self match:input TokenType:BIGSTRING Follow:FOLLOW_BIGSTRING_in_keyValue658]; 
                value =  [group createSingleton:BIGSTRING12];

                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:273:4: ANONYMOUS_TEMPLATE // alt
                {
                ANONYMOUS_TEMPLATE13=(ANTLRCommonToken *)[self match:input TokenType:LCURLY Follow:FOLLOW_LCURLY_in_keyValue667]; 
                value =  [group createSingleton:ANONYMOUS_TEMPLATE13];

                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:274:4: STRING // alt
                {
                STRING14=(ANTLRCommonToken *)[self match:input TokenType:STRING Follow:FOLLOW_STRING_in_keyValue674]; 
                value =  [Misc replaceEscapes:[Misc strip:(STRING14!=nil?[STRING14 getText]:@"nil") n:1]];

                }
                break;
            case 4 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:275:4: {...}? => ID // alt
                {
                if ( !(([[[input LT:1] getText] isEqualToString:@"key"])) ) {
                    @throw [ANTLRFailedPredicateException exceptionWithRuleName:@"keyValue" predicate:@"[[[input LT:1] getText] isEqualToString:@\"key\"]" stream:input];
                }
                [self match:input TokenType:ID Follow:FOLLOW_ID_in_keyValue687]; 
                value =  STGroup.DICT_KEY;

                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {

        		[self error:[NSString stringWithFormat:@"missing value for key at '%@'", [[input LT:1] getText]]];
        	
    }
    @finally {
    }
    return value;
}
/* $ANTLR end keyValue */
/* ObjC end rules */

@end /* end of GroupParser implementation line 692 */
