/** \file
 *  This OBJC source file was generated by $ANTLR version 3.3.1-SNAPSHOT Mar 09, 2011 24:00:43
 *
 *     -  From the grammar source file : /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g
 *     -                            On : 2011-04-06 18:27:38
 *     -                for the parser : GroupParserParser *
 * Editing it, at least manually, is not wise.
 *
 * ObjC language generator and runtime by Alan Condit, acondit|hereisanat|ipns|dotgoeshere|com.
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2010 Alan Condit
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// $ANTLR 3.3.1-SNAPSHOT Mar 09, 2011 24:00:43 /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g 2011-04-06 18:27:38


/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#import "GroupParser.h"
/* ----------------------------------------- */


/* ============================================================================= */
/* =============================================================================
 * Start of recognizer
 */

#pragma mark Bitsets
static ANTLRBitSet *FOLLOW_oldStyleHeader_in_group164;
static const unsigned long long FOLLOW_oldStyleHeader_in_group164_data[] = { 0x0000000000204010LL};
static ANTLRBitSet *FOLLOW_14_in_group173;
static const unsigned long long FOLLOW_14_in_group173_data[] = { 0x0000000000000040LL};
static ANTLRBitSet *FOLLOW_STRING_in_group175;
static const unsigned long long FOLLOW_STRING_in_group175_data[] = { 0x0000000000204010LL};
static ANTLRBitSet *FOLLOW_14_in_group182;
static const unsigned long long FOLLOW_14_in_group182_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_ID_in_group193;
static const unsigned long long FOLLOW_ID_in_group193_data[] = { 0x000000000020C010LL};
static ANTLRBitSet *FOLLOW_15_in_group196;
static const unsigned long long FOLLOW_15_in_group196_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_ID_in_group198;
static const unsigned long long FOLLOW_ID_in_group198_data[] = { 0x000000000020C010LL};
static ANTLRBitSet *FOLLOW_def_in_group216;
static const unsigned long long FOLLOW_def_in_group216_data[] = { 0x0000000000200012LL};
static ANTLRBitSet *FOLLOW_16_in_oldStyleHeader238;
static const unsigned long long FOLLOW_16_in_oldStyleHeader238_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_ID_in_oldStyleHeader240;
static const unsigned long long FOLLOW_ID_in_oldStyleHeader240_data[] = { 0x0000000000160000LL};
static ANTLRBitSet *FOLLOW_17_in_oldStyleHeader244;
static const unsigned long long FOLLOW_17_in_oldStyleHeader244_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_ID_in_oldStyleHeader246;
static const unsigned long long FOLLOW_ID_in_oldStyleHeader246_data[] = { 0x0000000000140000LL};
static ANTLRBitSet *FOLLOW_18_in_oldStyleHeader258;
static const unsigned long long FOLLOW_18_in_oldStyleHeader258_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_ID_in_oldStyleHeader260;
static const unsigned long long FOLLOW_ID_in_oldStyleHeader260_data[] = { 0x0000000000180000LL};
static ANTLRBitSet *FOLLOW_19_in_oldStyleHeader263;
static const unsigned long long FOLLOW_19_in_oldStyleHeader263_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_ID_in_oldStyleHeader265;
static const unsigned long long FOLLOW_ID_in_oldStyleHeader265_data[] = { 0x0000000000180000LL};
static ANTLRBitSet *FOLLOW_20_in_oldStyleHeader277;
static const unsigned long long FOLLOW_20_in_oldStyleHeader277_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ID_in_groupName299;
static const unsigned long long FOLLOW_ID_in_groupName299_data[] = { 0x0000000000008002LL};
static ANTLRBitSet *FOLLOW_15_in_groupName304;
static const unsigned long long FOLLOW_15_in_groupName304_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_ID_in_groupName308;
static const unsigned long long FOLLOW_ID_in_groupName308_data[] = { 0x0000000000008002LL};
static ANTLRBitSet *FOLLOW_templateDef_in_def325;
static const unsigned long long FOLLOW_templateDef_in_def325_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_dictDef_in_def330;
static const unsigned long long FOLLOW_dictDef_in_def330_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_21_in_templateDef354;
static const unsigned long long FOLLOW_21_in_templateDef354_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_ID_in_templateDef358;
static const unsigned long long FOLLOW_ID_in_templateDef358_data[] = { 0x0000000000008000LL};
static ANTLRBitSet *FOLLOW_15_in_templateDef360;
static const unsigned long long FOLLOW_15_in_templateDef360_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_ID_in_templateDef364;
static const unsigned long long FOLLOW_ID_in_templateDef364_data[] = { 0x0000000000400000LL};
static ANTLRBitSet *FOLLOW_22_in_templateDef366;
static const unsigned long long FOLLOW_22_in_templateDef366_data[] = { 0x0000000000800000LL};
static ANTLRBitSet *FOLLOW_23_in_templateDef368;
static const unsigned long long FOLLOW_23_in_templateDef368_data[] = { 0x0000000001000000LL};
static ANTLRBitSet *FOLLOW_ID_in_templateDef376;
static const unsigned long long FOLLOW_ID_in_templateDef376_data[] = { 0x0000000000400000LL};
static ANTLRBitSet *FOLLOW_22_in_templateDef378;
static const unsigned long long FOLLOW_22_in_templateDef378_data[] = { 0x0000000000800010LL};
static ANTLRBitSet *FOLLOW_formalArgs_in_templateDef380;
static const unsigned long long FOLLOW_formalArgs_in_templateDef380_data[] = { 0x0000000000800000LL};
static ANTLRBitSet *FOLLOW_23_in_templateDef382;
static const unsigned long long FOLLOW_23_in_templateDef382_data[] = { 0x0000000001000000LL};
static ANTLRBitSet *FOLLOW_24_in_templateDef393;
static const unsigned long long FOLLOW_24_in_templateDef393_data[] = { 0x0000000000002442LL};
static ANTLRBitSet *FOLLOW_STRING_in_templateDef409;
static const unsigned long long FOLLOW_STRING_in_templateDef409_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_BIGSTRING_in_templateDef424;
static const unsigned long long FOLLOW_BIGSTRING_in_templateDef424_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_BIGSTRING_NO_NL_in_templateDef436;
static const unsigned long long FOLLOW_BIGSTRING_NO_NL_in_templateDef436_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ID_in_templateDef471;
static const unsigned long long FOLLOW_ID_in_templateDef471_data[] = { 0x0000000001000000LL};
static ANTLRBitSet *FOLLOW_24_in_templateDef473;
static const unsigned long long FOLLOW_24_in_templateDef473_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_ID_in_templateDef477;
static const unsigned long long FOLLOW_ID_in_templateDef477_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_formalArg_in_formalArgs502;
static const unsigned long long FOLLOW_formalArg_in_formalArgs502_data[] = { 0x0000000000080002LL};
static ANTLRBitSet *FOLLOW_19_in_formalArgs512;
static const unsigned long long FOLLOW_19_in_formalArgs512_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_formalArg_in_formalArgs514;
static const unsigned long long FOLLOW_formalArg_in_formalArgs514_data[] = { 0x0000000000080002LL};
static ANTLRBitSet *FOLLOW_19_in_formalArgs527;
static const unsigned long long FOLLOW_19_in_formalArgs527_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_formalArgWithDefaultValue_in_formalArgs529;
static const unsigned long long FOLLOW_formalArgWithDefaultValue_in_formalArgs529_data[] = { 0x0000000000080002LL};
static ANTLRBitSet *FOLLOW_formalArgWithDefaultValue_in_formalArgs541;
static const unsigned long long FOLLOW_formalArgWithDefaultValue_in_formalArgs541_data[] = { 0x0000000000080002LL};
static ANTLRBitSet *FOLLOW_19_in_formalArgs546;
static const unsigned long long FOLLOW_19_in_formalArgs546_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_formalArgWithDefaultValue_in_formalArgs548;
static const unsigned long long FOLLOW_formalArgWithDefaultValue_in_formalArgs548_data[] = { 0x0000000000080002LL};
static ANTLRBitSet *FOLLOW_ID_in_formalArg570;
static const unsigned long long FOLLOW_ID_in_formalArg570_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ID_in_formalArgWithDefaultValue589;
static const unsigned long long FOLLOW_ID_in_formalArgWithDefaultValue589_data[] = { 0x0000000002000000LL};
static ANTLRBitSet *FOLLOW_25_in_formalArgWithDefaultValue595;
static const unsigned long long FOLLOW_25_in_formalArgWithDefaultValue595_data[] = { 0x0000000000000040LL};
static ANTLRBitSet *FOLLOW_STRING_in_formalArgWithDefaultValue599;
static const unsigned long long FOLLOW_STRING_in_formalArgWithDefaultValue599_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_25_in_formalArgWithDefaultValue605;
static const unsigned long long FOLLOW_25_in_formalArgWithDefaultValue605_data[] = { 0x0000000000000080LL};
static ANTLRBitSet *FOLLOW_ANONYMOUS_TEMPLATE_in_formalArgWithDefaultValue609;
static const unsigned long long FOLLOW_ANONYMOUS_TEMPLATE_in_formalArgWithDefaultValue609_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_25_in_formalArgWithDefaultValue615;
static const unsigned long long FOLLOW_25_in_formalArgWithDefaultValue615_data[] = { 0x0000000000000800LL};
static ANTLRBitSet *FOLLOW_T_TRUE_in_formalArgWithDefaultValue619;
static const unsigned long long FOLLOW_T_TRUE_in_formalArgWithDefaultValue619_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_25_in_formalArgWithDefaultValue625;
static const unsigned long long FOLLOW_25_in_formalArgWithDefaultValue625_data[] = { 0x0000000000001000LL};
static ANTLRBitSet *FOLLOW_T_FALSE_in_formalArgWithDefaultValue629;
static const unsigned long long FOLLOW_T_FALSE_in_formalArgWithDefaultValue629_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ID_in_dictDef654;
static const unsigned long long FOLLOW_ID_in_dictDef654_data[] = { 0x0000000001000000LL};
static ANTLRBitSet *FOLLOW_24_in_dictDef656;
static const unsigned long long FOLLOW_24_in_dictDef656_data[] = { 0x0000000004000000LL};
static ANTLRBitSet *FOLLOW_dict_in_dictDef658;
static const unsigned long long FOLLOW_dict_in_dictDef658_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_26_in_dict690;
static const unsigned long long FOLLOW_26_in_dict690_data[] = { 0x0000000010000040LL};
static ANTLRBitSet *FOLLOW_dictPairs_in_dict692;
static const unsigned long long FOLLOW_dictPairs_in_dict692_data[] = { 0x0000000008000000LL};
static ANTLRBitSet *FOLLOW_27_in_dict695;
static const unsigned long long FOLLOW_27_in_dict695_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_keyValuePair_in_dictPairs710;
static const unsigned long long FOLLOW_keyValuePair_in_dictPairs710_data[] = { 0x0000000000080002LL};
static ANTLRBitSet *FOLLOW_19_in_dictPairs719;
static const unsigned long long FOLLOW_19_in_dictPairs719_data[] = { 0x0000000000000040LL};
static ANTLRBitSet *FOLLOW_keyValuePair_in_dictPairs721;
static const unsigned long long FOLLOW_keyValuePair_in_dictPairs721_data[] = { 0x0000000000080002LL};
static ANTLRBitSet *FOLLOW_19_in_dictPairs727;
static const unsigned long long FOLLOW_19_in_dictPairs727_data[] = { 0x0000000010000000LL};
static ANTLRBitSet *FOLLOW_defaultValuePair_in_dictPairs729;
static const unsigned long long FOLLOW_defaultValuePair_in_dictPairs729_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_defaultValuePair_in_dictPairs740;
static const unsigned long long FOLLOW_defaultValuePair_in_dictPairs740_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_28_in_defaultValuePair763;
static const unsigned long long FOLLOW_28_in_defaultValuePair763_data[] = { 0x0000000000020000LL};
static ANTLRBitSet *FOLLOW_17_in_defaultValuePair765;
static const unsigned long long FOLLOW_17_in_defaultValuePair765_data[] = { 0x0000000000003CD0LL};
static ANTLRBitSet *FOLLOW_keyValue_in_defaultValuePair767;
static const unsigned long long FOLLOW_keyValue_in_defaultValuePair767_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_STRING_in_keyValuePair781;
static const unsigned long long FOLLOW_STRING_in_keyValuePair781_data[] = { 0x0000000000020000LL};
static ANTLRBitSet *FOLLOW_17_in_keyValuePair783;
static const unsigned long long FOLLOW_17_in_keyValuePair783_data[] = { 0x0000000000003CD0LL};
static ANTLRBitSet *FOLLOW_keyValue_in_keyValuePair785;
static const unsigned long long FOLLOW_keyValue_in_keyValuePair785_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_BIGSTRING_in_keyValue802;
static const unsigned long long FOLLOW_BIGSTRING_in_keyValue802_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_BIGSTRING_NO_NL_in_keyValue811;
static const unsigned long long FOLLOW_BIGSTRING_NO_NL_in_keyValue811_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ANONYMOUS_TEMPLATE_in_keyValue819;
static const unsigned long long FOLLOW_ANONYMOUS_TEMPLATE_in_keyValue819_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_STRING_in_keyValue826;
static const unsigned long long FOLLOW_STRING_in_keyValue826_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_T_TRUE_in_keyValue836;
static const unsigned long long FOLLOW_T_TRUE_in_keyValue836_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_T_FALSE_in_keyValue846;
static const unsigned long long FOLLOW_T_FALSE_in_keyValue846_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ID_in_keyValue859;
static const unsigned long long FOLLOW_ID_in_keyValue859_data[] = { 0x0000000000000002LL};


#pragma mark Dynamic Global Scopes

#pragma mark Dynamic Rule Scopes

#pragma mark Rule Return Scopes start
//#pragma mark Rule return scopes start
//

#pragma mark Rule return scopes start

@implementation GroupParser  // line 637

/* ObjC start of ruleAttributeScope */
#pragma mark Dynamic Rule Scopes
/* ObjC end of ruleAttributeScope */
#pragma mark global Attribute Scopes
/* ObjC start globalAttributeScope */
/* ObjC end globalAttributeScope */
/* ObjC start actions.(actionScope).synthesize */

@synthesize group;

/* ObjC end actions.(actionScope).synthesize */
/* ObjC start synthesize() */
/* ObjC end synthesize() */

+ (void) initialize
{
    #pragma mark Bitsets
    FOLLOW_oldStyleHeader_in_group164 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_oldStyleHeader_in_group164_data Count:(NSUInteger)1] retain];
    FOLLOW_14_in_group173 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_14_in_group173_data Count:(NSUInteger)1] retain];
    FOLLOW_STRING_in_group175 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_STRING_in_group175_data Count:(NSUInteger)1] retain];
    FOLLOW_14_in_group182 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_14_in_group182_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_group193 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_group193_data Count:(NSUInteger)1] retain];
    FOLLOW_15_in_group196 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_15_in_group196_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_group198 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_group198_data Count:(NSUInteger)1] retain];
    FOLLOW_def_in_group216 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_def_in_group216_data Count:(NSUInteger)1] retain];
    FOLLOW_16_in_oldStyleHeader238 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_16_in_oldStyleHeader238_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_oldStyleHeader240 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_oldStyleHeader240_data Count:(NSUInteger)1] retain];
    FOLLOW_17_in_oldStyleHeader244 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_17_in_oldStyleHeader244_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_oldStyleHeader246 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_oldStyleHeader246_data Count:(NSUInteger)1] retain];
    FOLLOW_18_in_oldStyleHeader258 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_18_in_oldStyleHeader258_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_oldStyleHeader260 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_oldStyleHeader260_data Count:(NSUInteger)1] retain];
    FOLLOW_19_in_oldStyleHeader263 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_19_in_oldStyleHeader263_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_oldStyleHeader265 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_oldStyleHeader265_data Count:(NSUInteger)1] retain];
    FOLLOW_20_in_oldStyleHeader277 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_20_in_oldStyleHeader277_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_groupName299 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_groupName299_data Count:(NSUInteger)1] retain];
    FOLLOW_15_in_groupName304 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_15_in_groupName304_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_groupName308 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_groupName308_data Count:(NSUInteger)1] retain];
    FOLLOW_templateDef_in_def325 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_templateDef_in_def325_data Count:(NSUInteger)1] retain];
    FOLLOW_dictDef_in_def330 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_dictDef_in_def330_data Count:(NSUInteger)1] retain];
    FOLLOW_21_in_templateDef354 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_21_in_templateDef354_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_templateDef358 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_templateDef358_data Count:(NSUInteger)1] retain];
    FOLLOW_15_in_templateDef360 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_15_in_templateDef360_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_templateDef364 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_templateDef364_data Count:(NSUInteger)1] retain];
    FOLLOW_22_in_templateDef366 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_22_in_templateDef366_data Count:(NSUInteger)1] retain];
    FOLLOW_23_in_templateDef368 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_23_in_templateDef368_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_templateDef376 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_templateDef376_data Count:(NSUInteger)1] retain];
    FOLLOW_22_in_templateDef378 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_22_in_templateDef378_data Count:(NSUInteger)1] retain];
    FOLLOW_formalArgs_in_templateDef380 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_formalArgs_in_templateDef380_data Count:(NSUInteger)1] retain];
    FOLLOW_23_in_templateDef382 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_23_in_templateDef382_data Count:(NSUInteger)1] retain];
    FOLLOW_24_in_templateDef393 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_24_in_templateDef393_data Count:(NSUInteger)1] retain];
    FOLLOW_STRING_in_templateDef409 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_STRING_in_templateDef409_data Count:(NSUInteger)1] retain];
    FOLLOW_BIGSTRING_in_templateDef424 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_BIGSTRING_in_templateDef424_data Count:(NSUInteger)1] retain];
    FOLLOW_BIGSTRING_NO_NL_in_templateDef436 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_BIGSTRING_NO_NL_in_templateDef436_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_templateDef471 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_templateDef471_data Count:(NSUInteger)1] retain];
    FOLLOW_24_in_templateDef473 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_24_in_templateDef473_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_templateDef477 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_templateDef477_data Count:(NSUInteger)1] retain];
    FOLLOW_formalArg_in_formalArgs502 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_formalArg_in_formalArgs502_data Count:(NSUInteger)1] retain];
    FOLLOW_19_in_formalArgs512 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_19_in_formalArgs512_data Count:(NSUInteger)1] retain];
    FOLLOW_formalArg_in_formalArgs514 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_formalArg_in_formalArgs514_data Count:(NSUInteger)1] retain];
    FOLLOW_19_in_formalArgs527 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_19_in_formalArgs527_data Count:(NSUInteger)1] retain];
    FOLLOW_formalArgWithDefaultValue_in_formalArgs529 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_formalArgWithDefaultValue_in_formalArgs529_data Count:(NSUInteger)1] retain];
    FOLLOW_formalArgWithDefaultValue_in_formalArgs541 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_formalArgWithDefaultValue_in_formalArgs541_data Count:(NSUInteger)1] retain];
    FOLLOW_19_in_formalArgs546 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_19_in_formalArgs546_data Count:(NSUInteger)1] retain];
    FOLLOW_formalArgWithDefaultValue_in_formalArgs548 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_formalArgWithDefaultValue_in_formalArgs548_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_formalArg570 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_formalArg570_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_formalArgWithDefaultValue589 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_formalArgWithDefaultValue589_data Count:(NSUInteger)1] retain];
    FOLLOW_25_in_formalArgWithDefaultValue595 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_25_in_formalArgWithDefaultValue595_data Count:(NSUInteger)1] retain];
    FOLLOW_STRING_in_formalArgWithDefaultValue599 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_STRING_in_formalArgWithDefaultValue599_data Count:(NSUInteger)1] retain];
    FOLLOW_25_in_formalArgWithDefaultValue605 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_25_in_formalArgWithDefaultValue605_data Count:(NSUInteger)1] retain];
    FOLLOW_ANONYMOUS_TEMPLATE_in_formalArgWithDefaultValue609 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ANONYMOUS_TEMPLATE_in_formalArgWithDefaultValue609_data Count:(NSUInteger)1] retain];
    FOLLOW_25_in_formalArgWithDefaultValue615 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_25_in_formalArgWithDefaultValue615_data Count:(NSUInteger)1] retain];
    FOLLOW_T_TRUE_in_formalArgWithDefaultValue619 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_T_TRUE_in_formalArgWithDefaultValue619_data Count:(NSUInteger)1] retain];
    FOLLOW_25_in_formalArgWithDefaultValue625 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_25_in_formalArgWithDefaultValue625_data Count:(NSUInteger)1] retain];
    FOLLOW_T_FALSE_in_formalArgWithDefaultValue629 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_T_FALSE_in_formalArgWithDefaultValue629_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_dictDef654 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_dictDef654_data Count:(NSUInteger)1] retain];
    FOLLOW_24_in_dictDef656 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_24_in_dictDef656_data Count:(NSUInteger)1] retain];
    FOLLOW_dict_in_dictDef658 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_dict_in_dictDef658_data Count:(NSUInteger)1] retain];
    FOLLOW_26_in_dict690 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_26_in_dict690_data Count:(NSUInteger)1] retain];
    FOLLOW_dictPairs_in_dict692 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_dictPairs_in_dict692_data Count:(NSUInteger)1] retain];
    FOLLOW_27_in_dict695 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_27_in_dict695_data Count:(NSUInteger)1] retain];
    FOLLOW_keyValuePair_in_dictPairs710 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_keyValuePair_in_dictPairs710_data Count:(NSUInteger)1] retain];
    FOLLOW_19_in_dictPairs719 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_19_in_dictPairs719_data Count:(NSUInteger)1] retain];
    FOLLOW_keyValuePair_in_dictPairs721 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_keyValuePair_in_dictPairs721_data Count:(NSUInteger)1] retain];
    FOLLOW_19_in_dictPairs727 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_19_in_dictPairs727_data Count:(NSUInteger)1] retain];
    FOLLOW_defaultValuePair_in_dictPairs729 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_defaultValuePair_in_dictPairs729_data Count:(NSUInteger)1] retain];
    FOLLOW_defaultValuePair_in_dictPairs740 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_defaultValuePair_in_dictPairs740_data Count:(NSUInteger)1] retain];
    FOLLOW_28_in_defaultValuePair763 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_28_in_defaultValuePair763_data Count:(NSUInteger)1] retain];
    FOLLOW_17_in_defaultValuePair765 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_17_in_defaultValuePair765_data Count:(NSUInteger)1] retain];
    FOLLOW_keyValue_in_defaultValuePair767 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_keyValue_in_defaultValuePair767_data Count:(NSUInteger)1] retain];
    FOLLOW_STRING_in_keyValuePair781 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_STRING_in_keyValuePair781_data Count:(NSUInteger)1] retain];
    FOLLOW_17_in_keyValuePair783 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_17_in_keyValuePair783_data Count:(NSUInteger)1] retain];
    FOLLOW_keyValue_in_keyValuePair785 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_keyValue_in_keyValuePair785_data Count:(NSUInteger)1] retain];
    FOLLOW_BIGSTRING_in_keyValue802 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_BIGSTRING_in_keyValue802_data Count:(NSUInteger)1] retain];
    FOLLOW_BIGSTRING_NO_NL_in_keyValue811 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_BIGSTRING_NO_NL_in_keyValue811_data Count:(NSUInteger)1] retain];
    FOLLOW_ANONYMOUS_TEMPLATE_in_keyValue819 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ANONYMOUS_TEMPLATE_in_keyValue819_data Count:(NSUInteger)1] retain];
    FOLLOW_STRING_in_keyValue826 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_STRING_in_keyValue826_data Count:(NSUInteger)1] retain];
    FOLLOW_T_TRUE_in_keyValue836 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_T_TRUE_in_keyValue836_data Count:(NSUInteger)1] retain];
    FOLLOW_T_FALSE_in_keyValue846 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_T_FALSE_in_keyValue846_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_keyValue859 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_keyValue859_data Count:(NSUInteger)1] retain];

    [ANTLRBaseRecognizer setTokenNames:[[NSMutableArray arrayWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>", 
 @"ID", @"WS", @"STRING", @"ANONYMOUS_TEMPLATE", @"COMMENT", @"LINE_COMMENT", 
 @"BIGSTRING", @"T_TRUE", @"T_FALSE", @"BIGSTRING_NO_NL", @"'import'", @"'.'", 
 @"'group'", @"':'", @"'implements'", @"','", @"';'", @"'@'", @"'('", @"')'", 
 @"'::='", @"'='", @"'['", @"']'", @"'default'", nil] retain]];
    [ANTLRBaseRecognizer setGrammarFileName:@"/Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g"];
}

+ (GroupParser *)newGroupParser:(id<ANTLRTokenStream>)aStream
{
    return [[GroupParser alloc] initWithTokenStream:aStream];

}

- (id) initWithTokenStream:(id<ANTLRTokenStream>)aStream
{
    self = [super initWithTokenStream:aStream State:[[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:14+1] retain]];
    if ( self != nil) {
        /* start of actions-actionScope-init */
        /* start of init */
    }
    return self;
}

- (void) dealloc
{
    [super dealloc];
}

/* ObjC start members */
/* ObjC end members */
/* ObjC start actions.(actionScope).methods */

+ (NSInteger) TBIGSTRING { return BIGSTRING; }
+ (NSInteger) TBIGSTRING_NO_NL { return BIGSTRING_NO_NL; }
+ (NSInteger) TTRUE { return T_TRUE; }
- (void) displayRecognitionError:(AMutableArray *) tokenNames e:(ANTLRRecognitionException *)e
{
    NSString *msg = [self getErrorMessage:e TokenNames:[self getTokenNames]];
    [group.errMgr groupSyntaxError:SYNTAX_ERROR srcName:[self getSourceName] e:e msg:msg];
}

- (NSString *) getSourceName
{
#ifdef DONTUSENOMO
    NSError **outError;
    NSString *fullFileName = [super getSourceName];
    NSFileWrapper *f = [[NSFileWrapper alloc] initWithURL:fullFileName options:NSFileWrapperReadingImmediate error:outError]; // strip to simple name
    return [f filename];
#endif
    return [super getSourceName];
}

- (void) error:(NSString *)msg
{
    ANTLRNoViableAltException *e = [ANTLRNoViableAltException newException:0 state:0 stream:input];
    [group.errMgr groupSyntaxError:SYNTAX_ERROR srcName:[self getSourceName] e:e msg:msg];
    [self recover:input Exception:nil];
}

- (NSString *) getErrorMessage:(NSException *)e TokenNames:(AMutableArray *)TokenNames
{
    return [NSString stringWithFormat:@"%@--%@", e.name, e.reason];
}


/* ObjC end actions.(actionScope).methods */
/* ObjC start methods() */
/* ObjC end methods() */
/* ObjC start rules */

/*
 * $ANTLR start group
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:204:1: group[STGroup *aGroup, NSString *prefix] : ( oldStyleHeader )? ( 'import' STRING | 'import' ID ( '.' ID )* )* ( def[prefix] )+ ;
 */
- (void) group:(STGroup *)aGroup arg1:(NSString *)prefix 
{
    /* ruleScopeSetUp */


    GroupLexer *lexer = (GroupLexer *)[input getTokenSource];
    self.group = lexer.group = aGroup;

    @try {
        STToken *STRING1 = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:209:2: ( ( oldStyleHeader )? ( 'import' STRING | 'import' ID ( '.' ID )* )* ( def[prefix] )+ ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:209:4: ( oldStyleHeader )? ( 'import' STRING | 'import' ID ( '.' ID )* )* ( def[prefix] )+ // alt
        {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:209:4: ( oldStyleHeader )? // block
        NSInteger alt1=2;
        NSInteger LA1_0 = [input LA:1];

        if ( (LA1_0==16) ) {
            alt1=1;
        }
        switch (alt1) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:209:4: oldStyleHeader // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_oldStyleHeader_in_group164];
                [self oldStyleHeader];

                [self popFollow];



                }
                break;

        }

        do {
            NSInteger alt3=3;
            NSInteger LA3_0 = [input LA:1];
            if ( (LA3_0==14) ) {
                NSInteger LA3_2 = [input LA:2];
                if ( (LA3_2==STRING) ) {
                    alt3=1;
                }
                else if ( (LA3_2==ID) ) {
                    alt3=2;
                }


            }


            switch (alt3) {
                case 1 : ;
                    // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:210:7: 'import' STRING // alt
                    {
                    [self match:input TokenType:14 Follow:FOLLOW_14_in_group173]; 
                    STRING1=(STToken *)[self match:input TokenType:STRING Follow:FOLLOW_STRING_in_group175]; 
                    [aGroup importTemplatesWithFileName:STRING1];

                    }
                    break;
                case 2 : ;
                    // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:211:4: 'import' ID ( '.' ID )* // alt
                    {
                    [self match:input TokenType:14 Follow:FOLLOW_14_in_group182]; 

                    			ANTLRMismatchedTokenException *e = [ANTLRMismatchedTokenException newException:STRING Stream:input];
                    			[self reportError:e];
                    			
                    [self match:input TokenType:ID Follow:FOLLOW_ID_in_group193]; 
                    do {
                        NSInteger alt2=2;
                        NSInteger LA2_0 = [input LA:1];
                        if ( (LA2_0==15) ) {
                            alt2=1;
                        }


                        switch (alt2) {
                            case 1 : ;
                                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:216:8: '.' ID // alt
                                {
                                [self match:input TokenType:15 Follow:FOLLOW_15_in_group196]; 
                                [self match:input TokenType:ID Follow:FOLLOW_ID_in_group198]; 

                                }
                                break;

                            default :
                                goto loop2;
                        }
                    } while (YES);
                    loop2: ;


                    }
                    break;

                default :
                    goto loop3;
            }
        } while (YES);
        loop3: ;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:218:9: ( def[prefix] )+ // positiveClosureBlock
        NSInteger cnt4 = 0;
        do {
            NSInteger alt4 = 2;
            NSInteger LA4_0 = [input LA:1];
            if ( (LA4_0==ID||LA4_0==21) ) {
                alt4=1;
            }


            switch (alt4) {
                case 1 : ;
                    // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:218:9: def[prefix] // alt
                    {
                    /* ruleRef */
                    [self pushFollow:FOLLOW_def_in_group216];
                    [self def:prefix ];

                    [self popFollow];



                    }
                    break;

                default :
                    if ( cnt4 >= 1 )
                        goto loop4;
                    ANTLREarlyExitException *eee =
                        [ANTLREarlyExitException newException:input decisionNumber:4];
                    @throw eee;
            }
            cnt4++;
        } while (YES);
        loop4: ;


        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end group */

/*
 * $ANTLR start oldStyleHeader
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:221:1: oldStyleHeader : 'group' ID ( ':' ID )? ( 'implements' ID ( ',' ID )* )? ';' ;
 */
- (void) oldStyleHeader
{
    /* ruleScopeSetUp */

    @try {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:222:5: ( 'group' ID ( ':' ID )? ( 'implements' ID ( ',' ID )* )? ';' ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:222:9: 'group' ID ( ':' ID )? ( 'implements' ID ( ',' ID )* )? ';' // alt
        {
        [self match:input TokenType:16 Follow:FOLLOW_16_in_oldStyleHeader238]; 
        [self match:input TokenType:ID Follow:FOLLOW_ID_in_oldStyleHeader240]; 
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:222:20: ( ':' ID )? // block
        NSInteger alt5=2;
        NSInteger LA5_0 = [input LA:1];

        if ( (LA5_0==17) ) {
            alt5=1;
        }
        switch (alt5) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:222:22: ':' ID // alt
                {
                [self match:input TokenType:17 Follow:FOLLOW_17_in_oldStyleHeader244]; 
                [self match:input TokenType:ID Follow:FOLLOW_ID_in_oldStyleHeader246]; 

                }
                break;

        }

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:223:6: ( 'implements' ID ( ',' ID )* )? // block
        NSInteger alt7=2;
        NSInteger LA7_0 = [input LA:1];

        if ( (LA7_0==18) ) {
            alt7=1;
        }
        switch (alt7) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:223:8: 'implements' ID ( ',' ID )* // alt
                {
                [self match:input TokenType:18 Follow:FOLLOW_18_in_oldStyleHeader258]; 
                [self match:input TokenType:ID Follow:FOLLOW_ID_in_oldStyleHeader260]; 
                do {
                    NSInteger alt6=2;
                    NSInteger LA6_0 = [input LA:1];
                    if ( (LA6_0==19) ) {
                        alt6=1;
                    }


                    switch (alt6) {
                        case 1 : ;
                            // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:223:25: ',' ID // alt
                            {
                            [self match:input TokenType:19 Follow:FOLLOW_19_in_oldStyleHeader263]; 
                            [self match:input TokenType:ID Follow:FOLLOW_ID_in_oldStyleHeader265]; 

                            }
                            break;

                        default :
                            goto loop6;
                    }
                } while (YES);
                loop6: ;


                }
                break;

        }

        [self match:input TokenType:20 Follow:FOLLOW_20_in_oldStyleHeader277]; 

        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end oldStyleHeader */

/*
 * $ANTLR start groupName
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:227:1: groupName returns [NSString *name] : a= ID ( '.' a= ID )* ;
 */
- (NSString *) groupName
{
    /* ruleScopeSetUp */

    NSString * name = nil;

    NSMutableString *buf = [NSMutableString stringWithCapacity:16];
    @try {
        STToken *a = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:229:2: (a= ID ( '.' a= ID )* ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:229:4: a= ID ( '.' a= ID )* // alt
        {
        a=(STToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_groupName299]; 
        [buf appendString:(a!=nil?[a getText]:nil)];
        do {
            NSInteger alt8=2;
            NSInteger LA8_0 = [input LA:1];
            if ( (LA8_0==15) ) {
                alt8=1;
            }


            switch (alt8) {
                case 1 : ;
                    // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:229:40: '.' a= ID // alt
                    {
                    [self match:input TokenType:15 Follow:FOLLOW_15_in_groupName304]; 
                    a=(STToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_groupName308]; 
                    [buf appendString:(a!=nil?[a getText]:nil)];

                    }
                    break;

                default :
                    goto loop8;
            }
        } while (YES);
        loop8: ;


        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return name;
}
/* $ANTLR end groupName */

/*
 * $ANTLR start def
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:232:1: def[NSString *prefix] : ( templateDef[prefix] | dictDef );
 */
- (void) def:(NSString *)prefix 
{
    /* ruleScopeSetUp */

    @try {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:236:23: ( templateDef[prefix] | dictDef ) //ruleblock
        NSInteger alt9=2;
        NSInteger LA9_0 = [input LA:1];

        if ( (LA9_0==21) ) {
            alt9=1;
        }
        else if ( (LA9_0==ID) ) {
            NSInteger LA9_2 = [input LA:2];

            if ( (LA9_2==22) ) {
                alt9=1;
            }
            else if ( (LA9_2==24) ) {
                NSInteger LA9_3 = [input LA:3];

                if ( (LA9_3==ID) ) {
                    alt9=1;
                }
                else if ( (LA9_3==26) ) {
                    alt9=2;
                }
                else {
                    ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:9 state:3 stream:input];
                    @throw nvae;
                }
            }
            else {
                ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:9 state:2 stream:input];
                @throw nvae;
            }
        }
        else {
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:9 state:0 stream:input];
            @throw nvae;
        }
        switch (alt9) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:236:25: templateDef[prefix] // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_templateDef_in_def325];
                [self templateDef:prefix ];

                [self popFollow];



                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:236:47: dictDef // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_dictDef_in_def330];
                [self dictDef];

                [self popFollow];



                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {

        		// pretend we already saw an error here
        		state.lastErrorIndex = [input getIndex];
        		[self error:[NSString stringWithFormat:@"garbled template definition starting at '%@'", [[input LT:1] getText]]];
        	
    }
    @finally {
    }
    return ;
}
/* $ANTLR end def */

/*
 * $ANTLR start templateDef
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:243:1: templateDef[NSString *prefix] : ( ( '@' enclosing= ID '.' name= ID '(' ')' | name= ID '(' formalArgs ')' ) '::=' ( STRING | BIGSTRING | BIGSTRING_NO_NL | ) | alias= ID '::=' target= ID );
 */
- (void) templateDef:(NSString *)prefix 
{
    /* ruleScopeSetUp */


        NSString *template=nil;
        NSInteger n=0; // num char to strip from left, right of template def

    @try {
        STToken *enclosing = nil;
        STToken *name = nil;
        STToken *alias = nil;
        STToken *target = nil;
        STToken *STRING2 = nil;
        STToken *BIGSTRING3 = nil;
        STToken *BIGSTRING_NO_NL4 = nil;
        AMutableArray * formalArgs5 = nil;


        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:248:2: ( ( '@' enclosing= ID '.' name= ID '(' ')' | name= ID '(' formalArgs ')' ) '::=' ( STRING | BIGSTRING | BIGSTRING_NO_NL | ) | alias= ID '::=' target= ID ) //ruleblock
        NSInteger alt12=2;
        NSInteger LA12_0 = [input LA:1];

        if ( (LA12_0==21) ) {
            alt12=1;
        }
        else if ( (LA12_0==ID) ) {
            NSInteger LA12_2 = [input LA:2];

            if ( (LA12_2==22) ) {
                alt12=1;
            }
            else if ( (LA12_2==24) ) {
                alt12=2;
            }
            else {
                ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:12 state:2 stream:input];
                @throw nvae;
            }
        }
        else {
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:12 state:0 stream:input];
            @throw nvae;
        }
        switch (alt12) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:248:4: ( '@' enclosing= ID '.' name= ID '(' ')' | name= ID '(' formalArgs ')' ) '::=' ( STRING | BIGSTRING | BIGSTRING_NO_NL | ) // alt
                {
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:248:4: ( '@' enclosing= ID '.' name= ID '(' ')' | name= ID '(' formalArgs ')' ) // block
                NSInteger alt10=2;
                NSInteger LA10_0 = [input LA:1];

                if ( (LA10_0==21) ) {
                    alt10=1;
                }
                else if ( (LA10_0==ID) ) {
                    alt10=2;
                }
                else {
                    ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:10 state:0 stream:input];
                    @throw nvae;
                }
                switch (alt10) {
                    case 1 : ;
                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:248:6: '@' enclosing= ID '.' name= ID '(' ')' // alt
                        {
                        [self match:input TokenType:21 Follow:FOLLOW_21_in_templateDef354]; 
                        enclosing=(STToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_templateDef358]; 
                        [self match:input TokenType:15 Follow:FOLLOW_15_in_templateDef360]; 
                        name=(STToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_templateDef364]; 
                        [self match:input TokenType:22 Follow:FOLLOW_22_in_templateDef366]; 
                        [self match:input TokenType:23 Follow:FOLLOW_23_in_templateDef368]; 

                        }
                        break;
                    case 2 : ;
                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:249:5: name= ID '(' formalArgs ')' // alt
                        {
                        name=(STToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_templateDef376]; 
                        [self match:input TokenType:22 Follow:FOLLOW_22_in_templateDef378]; 
                        /* ruleRef */
                        [self pushFollow:FOLLOW_formalArgs_in_templateDef380];
                        formalArgs5 = [self formalArgs];

                        [self popFollow];


                        [self match:input TokenType:23 Follow:FOLLOW_23_in_templateDef382]; 

                        }
                        break;

                }

                [self match:input TokenType:24 Follow:FOLLOW_24_in_templateDef393]; 
                STToken *templateToken = [input LT:1];
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:253:6: ( STRING | BIGSTRING | BIGSTRING_NO_NL | ) // block
                NSInteger alt11=4;
                switch ([input LA:1]) {
                    case STRING: ;
                        {
                        alt11=1;
                        }
                        break;
                    case BIGSTRING: ;
                        {
                        alt11=2;
                        }
                        break;
                    case BIGSTRING_NO_NL: ;
                        {
                        alt11=3;
                        }
                        break;
                    case EOF: ;
                    case ID: ;
                    case 21: ;
                        {
                        alt11=4;
                        }
                        break;

                default: ;
                    ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:11 state:0 stream:input];
                    @throw nvae;
                }

                switch (alt11) {
                    case 1 : ;
                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:253:8: STRING // alt
                        {
                        STRING2=(STToken *)[self match:input TokenType:STRING Follow:FOLLOW_STRING_in_templateDef409]; 
                        template=(STRING2!=nil?[STRING2 getText]:nil); n=1;

                        }
                        break;
                    case 2 : ;
                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:254:8: BIGSTRING // alt
                        {
                        BIGSTRING3=(STToken *)[self match:input TokenType:BIGSTRING Follow:FOLLOW_BIGSTRING_in_templateDef424]; 
                        template=(BIGSTRING3!=nil?[BIGSTRING3 getText]:nil); n=2;

                        }
                        break;
                    case 3 : ;
                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:255:8: BIGSTRING_NO_NL // alt
                        {
                        BIGSTRING_NO_NL4=(STToken *)[self match:input TokenType:BIGSTRING_NO_NL Follow:FOLLOW_BIGSTRING_NO_NL_in_templateDef436]; 
                        template=(BIGSTRING_NO_NL4!=nil?[BIGSTRING_NO_NL4 getText]:nil); n=2;

                        }
                        break;
                    case 4 : ;
                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:256:8:  // alt
                        {

                        	    	template = @"";
                        	    	NSString *msg = [NSString stringWithFormat:@"missing template at '%@'", [[input LT:1] getText]];
                                    ANTLRNoViableAltException *e = [ANTLRNoViableAltException newException:0 state:0 stream:input];
                            	    [group.errMgr groupSyntaxError:SYNTAX_ERROR srcName:[self getSourceName] e:e msg:msg];
                            	    

                        }
                        break;

                }


                        if ( (name!=nil?[name getTokenIndex]:0) >= 0 ) { // if ID missing
                            template = [Misc strip:template n:n];
                            NSString *templateName = (name!=nil?[name getText]:nil);
                            if ( [prefix length] > 0 ) templateName = [NSString stringWithFormat: @"%@/%@", prefix, (name!=nil?[name getText]:nil)];
                            [group defineTemplateOrRegion:templateName
                            regionSurroundingTemplateName:(enclosing!=nil?[enclosing getText]:nil)
                                            templateToken:templateToken
                                                 template:template
                                                nameToken:name
                                                     args:formalArgs5];
                        }
                	    

                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:276:6: alias= ID '::=' target= ID // alt
                {
                alias=(STToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_templateDef471]; 
                [self match:input TokenType:24 Follow:FOLLOW_24_in_templateDef473]; 
                target=(STToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_templateDef477]; 
                [group defineTemplateAlias:alias targetT:target];

                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end templateDef */

/*
 * $ANTLR start formalArgs
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:279:1: formalArgs returns [AMutableArray *args] : ( formalArg[$args] ( ',' formalArg[$args] )* ( ',' formalArgWithDefaultValue[$args] )* | formalArgWithDefaultValue[$args] ( ',' formalArgWithDefaultValue[$args] )* | );
 */
- (AMutableArray *) formalArgs
{
    /* ruleScopeSetUp */

    AMutableArray * args = nil;

    args =  [AMutableArray arrayWithCapacity:5];
    @try {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:281:5: ( formalArg[$args] ( ',' formalArg[$args] )* ( ',' formalArgWithDefaultValue[$args] )* | formalArgWithDefaultValue[$args] ( ',' formalArgWithDefaultValue[$args] )* | ) //ruleblock
        NSInteger alt16=3;
        NSInteger LA16_0 = [input LA:1];

        if ( (LA16_0==ID) ) {
            NSInteger LA16_1 = [input LA:2];

            if ( (LA16_1==19||LA16_1==23) ) {
                alt16=1;
            }
            else if ( (LA16_1==25) ) {
                alt16=2;
            }
            else {
                ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:16 state:1 stream:input];
                @throw nvae;
            }
        }
        else if ( (LA16_0==23) ) {
            alt16=3;
        }
        else {
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:16 state:0 stream:input];
            @throw nvae;
        }
        switch (alt16) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:281:7: formalArg[$args] ( ',' formalArg[$args] )* ( ',' formalArgWithDefaultValue[$args] )* // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_formalArg_in_formalArgs502];
                [self formalArg:args ];

                [self popFollow];


                do {
                    NSInteger alt13=2;
                    NSInteger LA13_0 = [input LA:1];
                    if ( (LA13_0==19) ) {
                        NSInteger LA13_1 = [input LA:2];
                        if ( (LA13_1==ID) ) {
                            NSInteger LA13_3 = [input LA:3];
                            if ( (LA13_3==19||LA13_3==23) ) {
                                alt13=1;
                            }


                        }


                    }


                    switch (alt13) {
                        case 1 : ;
                            // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:282:8: ',' formalArg[$args] // alt
                            {
                            [self match:input TokenType:19 Follow:FOLLOW_19_in_formalArgs512]; 
                            /* ruleRef */
                            [self pushFollow:FOLLOW_formalArg_in_formalArgs514];
                            [self formalArg:args ];

                            [self popFollow];



                            }
                            break;

                        default :
                            goto loop13;
                    }
                } while (YES);
                loop13: ;

                do {
                    NSInteger alt14=2;
                    NSInteger LA14_0 = [input LA:1];
                    if ( (LA14_0==19) ) {
                        alt14=1;
                    }


                    switch (alt14) {
                        case 1 : ;
                            // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:283:8: ',' formalArgWithDefaultValue[$args] // alt
                            {
                            [self match:input TokenType:19 Follow:FOLLOW_19_in_formalArgs527]; 
                            /* ruleRef */
                            [self pushFollow:FOLLOW_formalArgWithDefaultValue_in_formalArgs529];
                            [self formalArgWithDefaultValue:args ];

                            [self popFollow];



                            }
                            break;

                        default :
                            goto loop14;
                    }
                } while (YES);
                loop14: ;


                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:284:7: formalArgWithDefaultValue[$args] ( ',' formalArgWithDefaultValue[$args] )* // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_formalArgWithDefaultValue_in_formalArgs541];
                [self formalArgWithDefaultValue:args ];

                [self popFollow];


                do {
                    NSInteger alt15=2;
                    NSInteger LA15_0 = [input LA:1];
                    if ( (LA15_0==19) ) {
                        alt15=1;
                    }


                    switch (alt15) {
                        case 1 : ;
                            // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:284:42: ',' formalArgWithDefaultValue[$args] // alt
                            {
                            [self match:input TokenType:19 Follow:FOLLOW_19_in_formalArgs546]; 
                            /* ruleRef */
                            [self pushFollow:FOLLOW_formalArgWithDefaultValue_in_formalArgs548];
                            [self formalArgWithDefaultValue:args ];

                            [self popFollow];



                            }
                            break;

                        default :
                            goto loop15;
                    }
                } while (YES);
                loop15: ;


                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:286:2:  // alt
                {
                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return args;
}
/* $ANTLR end formalArgs */

/*
 * $ANTLR start formalArg
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:288:1: formalArg[AMutableArray *args] : ID ;
 */
- (void) formalArg:(AMutableArray *)args 
{
    /* ruleScopeSetUp */

    @try {
        STToken *ID6 = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:289:2: ( ID ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:289:4: ID // alt
        {
        ID6=(STToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_formalArg570]; 
        [args addObject:[FormalArgument newFormalArgument:(ID6!=nil?[ID6 getText]:nil)]];

        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end formalArg */

/*
 * $ANTLR start formalArgWithDefaultValue
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:293:1: formalArgWithDefaultValue[AMutableArray *args] : ID ( '=' a= STRING | '=' a= ANONYMOUS_TEMPLATE | '=' a= 'true' | '=' a= 'false' ) ;
 */
- (void) formalArgWithDefaultValue:(AMutableArray *)args 
{
    /* ruleScopeSetUp */

    @try {
        STToken *a = nil;
        STToken *ID7 = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:294:2: ( ID ( '=' a= STRING | '=' a= ANONYMOUS_TEMPLATE | '=' a= 'true' | '=' a= 'false' ) ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:294:4: ID ( '=' a= STRING | '=' a= ANONYMOUS_TEMPLATE | '=' a= 'true' | '=' a= 'false' ) // alt
        {
        ID7=(STToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_formalArgWithDefaultValue589]; 
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:295:3: ( '=' a= STRING | '=' a= ANONYMOUS_TEMPLATE | '=' a= 'true' | '=' a= 'false' ) // block
        NSInteger alt17=4;
        NSInteger LA17_0 = [input LA:1];

        if ( (LA17_0==25) ) {
            switch ([input LA:2]) {
                case STRING: ;
                    {
                    alt17=1;
                    }
                    break;
                case ANONYMOUS_TEMPLATE: ;
                    {
                    alt17=2;
                    }
                    break;
                case T_TRUE: ;
                    {
                    alt17=3;
                    }
                    break;
                case T_FALSE: ;
                    {
                    alt17=4;
                    }
                    break;

            default: ;
                ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:17 state:1 stream:input];
                @throw nvae;
            }

        }
        else {
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:17 state:0 stream:input];
            @throw nvae;
        }
        switch (alt17) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:295:5: '=' a= STRING // alt
                {
                [self match:input TokenType:25 Follow:FOLLOW_25_in_formalArgWithDefaultValue595]; 
                a=(STToken *)[self match:input TokenType:STRING Follow:FOLLOW_STRING_in_formalArgWithDefaultValue599]; 

                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:296:5: '=' a= ANONYMOUS_TEMPLATE // alt
                {
                [self match:input TokenType:25 Follow:FOLLOW_25_in_formalArgWithDefaultValue605]; 
                a=(STToken *)[self match:input TokenType:ANONYMOUS_TEMPLATE Follow:FOLLOW_ANONYMOUS_TEMPLATE_in_formalArgWithDefaultValue609]; 

                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:297:5: '=' a= 'true' // alt
                {
                [self match:input TokenType:25 Follow:FOLLOW_25_in_formalArgWithDefaultValue615]; 
                a=(STToken *)[self match:input TokenType:T_TRUE Follow:FOLLOW_T_TRUE_in_formalArgWithDefaultValue619]; 

                }
                break;
            case 4 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:298:5: '=' a= 'false' // alt
                {
                [self match:input TokenType:25 Follow:FOLLOW_25_in_formalArgWithDefaultValue625]; 
                a=(STToken *)[self match:input TokenType:T_FALSE Follow:FOLLOW_T_FALSE_in_formalArgWithDefaultValue629]; 

                }
                break;

        }

        [args addObject:[FormalArgument newFormalArgument:(ID7!=nil?[ID7 getText]:nil) token:a]];

        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end formalArgWithDefaultValue */

/*
 * $ANTLR start dictDef
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:312:1: dictDef : ID '::=' dict ;
 */
- (void) dictDef
{
    /* ruleScopeSetUp */

    @try {
        STToken *ID8 = nil;
        NSMutableDictionary * dict9 = nil;


        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:313:2: ( ID '::=' dict ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:313:4: ID '::=' dict // alt
        {
        ID8=(STToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_dictDef654]; 
        [self match:input TokenType:24 Follow:FOLLOW_24_in_dictDef656]; 
        /* ruleRef */
        [self pushFollow:FOLLOW_dict_in_dictDef658];
        dict9 = [self dict];

        [self popFollow];



                if ( [group rawGetDictionary:(ID8!=nil?[ID8 getText]:nil)] != nil ) {
        			[group.errMgr compileTimeError:MAP_REDEFINITION templateToken:nil t:ID8];
                }
                else if ( [group rawGetTemplate:(ID8!=nil?[ID8 getText]:nil)] != nil ) {
        			[group.errMgr compileTimeError:TEMPLATE_REDEFINITION_AS_MAP templateToken:nil t:ID8];
                }
                else {
                    [group defineDictionary:(ID8!=nil?[ID8 getText]:nil) mapping:dict9];
                }
                

        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end dictDef */

/*
 * $ANTLR start dict
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:327:1: dict returns [NSMutableDictionary *mapping] : '[' dictPairs[mapping] ']' ;
 */
- (NSMutableDictionary *) dict
{
    /* ruleScopeSetUp */

    NSMutableDictionary * mapping = nil;

    mapping=[NSMutableDictionary dictionaryWithCapacity:16];
    @try {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:329:2: ( '[' dictPairs[mapping] ']' ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:329:6: '[' dictPairs[mapping] ']' // alt
        {
        [self match:input TokenType:26 Follow:FOLLOW_26_in_dict690]; 
        /* ruleRef */
        [self pushFollow:FOLLOW_dictPairs_in_dict692];
        [self dictPairs:mapping ];

        [self popFollow];


        [self match:input TokenType:27 Follow:FOLLOW_27_in_dict695]; 

        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return mapping;
}
/* $ANTLR end dict */

/*
 * $ANTLR start dictPairs
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:332:1: dictPairs[NSMutableDictionary *mapping] : ( keyValuePair[mapping] ( ',' keyValuePair[mapping] )* ( ',' defaultValuePair[mapping] )? | defaultValuePair[mapping] );
 */
- (void) dictPairs:(NSMutableDictionary *)mapping 
{
    /* ruleScopeSetUp */

    @try {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:333:5: ( keyValuePair[mapping] ( ',' keyValuePair[mapping] )* ( ',' defaultValuePair[mapping] )? | defaultValuePair[mapping] ) //ruleblock
        NSInteger alt20=2;
        NSInteger LA20_0 = [input LA:1];

        if ( (LA20_0==STRING) ) {
            alt20=1;
        }
        else if ( (LA20_0==28) ) {
            alt20=2;
        }
        else {
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:20 state:0 stream:input];
            @throw nvae;
        }
        switch (alt20) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:333:7: keyValuePair[mapping] ( ',' keyValuePair[mapping] )* ( ',' defaultValuePair[mapping] )? // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_keyValuePair_in_dictPairs710];
                [self keyValuePair:mapping ];

                [self popFollow];


                do {
                    NSInteger alt18=2;
                    NSInteger LA18_0 = [input LA:1];
                    if ( (LA18_0==19) ) {
                        NSInteger LA18_1 = [input LA:2];
                        if ( (LA18_1==STRING) ) {
                            alt18=1;
                        }


                    }


                    switch (alt18) {
                        case 1 : ;
                            // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:334:7: ',' keyValuePair[mapping] // alt
                            {
                            [self match:input TokenType:19 Follow:FOLLOW_19_in_dictPairs719]; 
                            /* ruleRef */
                            [self pushFollow:FOLLOW_keyValuePair_in_dictPairs721];
                            [self keyValuePair:mapping ];

                            [self popFollow];



                            }
                            break;

                        default :
                            goto loop18;
                    }
                } while (YES);
                loop18: ;

                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:334:35: ( ',' defaultValuePair[mapping] )? // block
                NSInteger alt19=2;
                NSInteger LA19_0 = [input LA:1];

                if ( (LA19_0==19) ) {
                    alt19=1;
                }
                switch (alt19) {
                    case 1 : ;
                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:334:36: ',' defaultValuePair[mapping] // alt
                        {
                        [self match:input TokenType:19 Follow:FOLLOW_19_in_dictPairs727]; 
                        /* ruleRef */
                        [self pushFollow:FOLLOW_defaultValuePair_in_dictPairs729];
                        [self defaultValuePair:mapping ];

                        [self popFollow];



                        }
                        break;

                }


                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:335:7: defaultValuePair[mapping] // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_defaultValuePair_in_dictPairs740];
                [self defaultValuePair:mapping ];

                [self popFollow];



                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {

        		[self error:[NSString stringWithFormat:@"missing dictionary entry at '%@'", [input LT:1].text]];
        	
    }
    @finally {
    }
    return ;
}
/* $ANTLR end dictPairs */

/*
 * $ANTLR start defaultValuePair
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:341:1: defaultValuePair[NSMutableDictionary *mapping] : 'default' ':' keyValue ;
 */
- (void) defaultValuePair:(NSMutableDictionary *)mapping 
{
    /* ruleScopeSetUp */

    @try {
        id keyValue10 = nil;


        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:342:2: ( 'default' ':' keyValue ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:342:4: 'default' ':' keyValue // alt
        {
        [self match:input TokenType:28 Follow:FOLLOW_28_in_defaultValuePair763]; 
        [self match:input TokenType:17 Follow:FOLLOW_17_in_defaultValuePair765]; 
        /* ruleRef */
        [self pushFollow:FOLLOW_keyValue_in_defaultValuePair767];
        keyValue10 = [self keyValue];

        [self popFollow];


        [mapping setObject:keyValue10 forKey:STGroup.DEFAULT_KEY];

        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end defaultValuePair */

/*
 * $ANTLR start keyValuePair
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:345:1: keyValuePair[NSMutableDictionary *mapping] : STRING ':' keyValue ;
 */
- (void) keyValuePair:(NSMutableDictionary *)mapping 
{
    /* ruleScopeSetUp */

    @try {
        STToken *STRING12 = nil;
        id keyValue11 = nil;


        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:346:2: ( STRING ':' keyValue ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:346:4: STRING ':' keyValue // alt
        {
        STRING12=(STToken *)[self match:input TokenType:STRING Follow:FOLLOW_STRING_in_keyValuePair781]; 
        [self match:input TokenType:17 Follow:FOLLOW_17_in_keyValuePair783]; 
        /* ruleRef */
        [self pushFollow:FOLLOW_keyValue_in_keyValuePair785];
        keyValue11 = [self keyValue];

        [self popFollow];


        [mapping setObject:keyValue11 forKey:[Misc replaceEscapes:[Misc strip:(STRING12!=nil?[STRING12 getText]:nil) n:1]]];

        }

        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
    }
    return ;
}
/* $ANTLR end keyValuePair */

/*
 * $ANTLR start keyValue
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:349:1: keyValue returns [id value] : ( BIGSTRING | BIGSTRING_NO_NL | ANONYMOUS_TEMPLATE | STRING | T_TRUE | T_FALSE | {...}? => ID );
 */
- (id) keyValue
{
    /* ruleScopeSetUp */

    id value = nil;

    @try {
        STToken *BIGSTRING13 = nil;
        STToken *BIGSTRING_NO_NL14 = nil;
        STToken *ANONYMOUS_TEMPLATE15 = nil;
        STToken *STRING16 = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:350:2: ( BIGSTRING | BIGSTRING_NO_NL | ANONYMOUS_TEMPLATE | STRING | T_TRUE | T_FALSE | {...}? => ID ) //ruleblock
        NSInteger alt21=7;
        NSInteger LA21_0 = [input LA:1];

        if ( (LA21_0==BIGSTRING) ) {
            alt21=1;
        }
        else if ( (LA21_0==BIGSTRING_NO_NL) ) {
            alt21=2;
        }
        else if ( (LA21_0==ANONYMOUS_TEMPLATE) ) {
            alt21=3;
        }
        else if ( (LA21_0==STRING) ) {
            alt21=4;
        }
        else if ( (LA21_0==T_TRUE) ) {
            alt21=5;
        }
        else if ( (LA21_0==T_FALSE) ) {
            alt21=6;
        }
        else if ( (LA21_0==ID) && (([[[input LT:1] getText] isEqualToString:@"key"]))) {
            alt21=7;
        }
        else {
            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:21 state:0 stream:input];
            @throw nvae;
        }
        switch (alt21) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:350:4: BIGSTRING // alt
                {
                BIGSTRING13=(STToken *)[self match:input TokenType:BIGSTRING Follow:FOLLOW_BIGSTRING_in_keyValue802]; 
                value =  [group createSingleton:BIGSTRING13];

                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:351:4: BIGSTRING_NO_NL // alt
                {
                BIGSTRING_NO_NL14=(STToken *)[self match:input TokenType:BIGSTRING_NO_NL Follow:FOLLOW_BIGSTRING_NO_NL_in_keyValue811]; 
                value =  [group createSingleton:BIGSTRING_NO_NL14];

                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:352:4: ANONYMOUS_TEMPLATE // alt
                {
                ANONYMOUS_TEMPLATE15=(STToken *)[self match:input TokenType:ANONYMOUS_TEMPLATE Follow:FOLLOW_ANONYMOUS_TEMPLATE_in_keyValue819]; 
                value =  [group createSingleton:ANONYMOUS_TEMPLATE15];

                }
                break;
            case 4 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:353:4: STRING // alt
                {
                STRING16=(STToken *)[self match:input TokenType:STRING Follow:FOLLOW_STRING_in_keyValue826]; 
                value =  [Misc replaceEscapes:[Misc strip:(STRING16!=nil?[STRING16 getText]:nil) n:1]];

                }
                break;
            case 5 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:354:4: T_TRUE // alt
                {
                [self match:input TokenType:T_TRUE Follow:FOLLOW_T_TRUE_in_keyValue836]; 
                value =  true;

                }
                break;
            case 6 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:355:4: T_FALSE // alt
                {
                [self match:input TokenType:T_FALSE Follow:FOLLOW_T_FALSE_in_keyValue846]; 
                value =  false;

                }
                break;
            case 7 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:356:4: {...}? => ID // alt
                {
                if ( !(([[[input LT:1] getText] isEqualToString:@"key"])) ) {
                    @throw [ANTLRFailedPredicateException newException:@"keyValue" predicate:@"[[[input LT:1] getText] isEqualToString:@\"key\"]" stream:input];
                }
                [self match:input TokenType:ID Follow:FOLLOW_ID_in_keyValue859]; 
                value =  STGroup.DICT_KEY;

                }
                break;

        }
        // token+rule list labels

    }
    @catch (ANTLRRecognitionException *re) {

        		[self error:[NSString stringWithFormat:@"missing value for key at '%@'", [[input LT:1] getText]]];
        	
    }
    @finally {
    }
    return value;
}
/* $ANTLR end keyValue */
/* ObjC end rules */

@end /* end of GroupParser implementation line 692 */
